
SensorWurthWSEN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ada4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  0800af38  0800af38  0000bf38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4b4  0800b4b4  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4b4  0800b4b4  0000c4b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4bc  0800b4bc  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4bc  0800b4bc  0000c4bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b4c0  0800b4c0  0000c4c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b4c4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  200001d4  0800b698  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000046c  0800b698  0000d46c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000150a2  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e5b  00000000  00000000  000222a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  00025108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eef  00000000  00000000  00026430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029027  00000000  00000000  0002731f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001892b  00000000  00000000  00050346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7430  00000000  00000000  00068c71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001600a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000659c  00000000  00000000  001600e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00166680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800af1c 	.word	0x0800af1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800af1c 	.word	0x0800af1c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <check_device_communication>:
extern UART_HandleTypeDef huart2;




void check_device_communication() {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af04      	add	r7, sp, #16
    uint8_t deviceID = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef status;

    status = HAL_I2C_Mem_Read(&hi2c1, (uint8_t)(SENSOR_ADDRESS), 0x0F, I2C_MEMADD_SIZE_8BIT, &deviceID, 1, HAL_MAX_DELAY);
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ff2:	9302      	str	r3, [sp, #8]
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	9301      	str	r3, [sp, #4]
 8000ff8:	1dbb      	adds	r3, r7, #6
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	220f      	movs	r2, #15
 8001000:	21d6      	movs	r1, #214	@ 0xd6
 8001002:	4809      	ldr	r0, [pc, #36]	@ (8001028 <check_device_communication+0x44>)
 8001004:	f001 fb20 	bl	8002648 <HAL_I2C_Mem_Read>
 8001008:	4603      	mov	r3, r0
 800100a:	71fb      	strb	r3, [r7, #7]

    if (status == HAL_OK) {
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d103      	bne.n	800101a <check_device_communication+0x36>
        printf("Communication réussie.\r\n");
 8001012:	4806      	ldr	r0, [pc, #24]	@ (800102c <check_device_communication+0x48>)
 8001014:	f007 f9e0 	bl	80083d8 <puts>
    } else {
        printf("Échec de la communication.\r\n");
    }
}
 8001018:	e002      	b.n	8001020 <check_device_communication+0x3c>
        printf("Échec de la communication.\r\n");
 800101a:	4805      	ldr	r0, [pc, #20]	@ (8001030 <check_device_communication+0x4c>)
 800101c:	f007 f9dc 	bl	80083d8 <puts>
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	200001f0 	.word	0x200001f0
 800102c:	0800af38 	.word	0x0800af38
 8001030:	0800af54 	.word	0x0800af54

08001034 <Init_HighPerf_Mode_6_axis>:

void Init_HighPerf_Mode_6_axis(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af04      	add	r7, sp, #16
    uint8_t data = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	71fb      	strb	r3, [r7, #7]

    // Activer le mode haute performance pour l'accéléromètre et le gyroscope
    data = 0x54; // 208 Hz, ±16g pour l'accéléromètre
 800103e:	2354      	movs	r3, #84	@ 0x54
 8001040:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, SENSOR_ADDRESS, CTRL1_XL, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8001042:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001046:	9302      	str	r3, [sp, #8]
 8001048:	2301      	movs	r3, #1
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	1dfb      	adds	r3, r7, #7
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2301      	movs	r3, #1
 8001052:	2210      	movs	r2, #16
 8001054:	21d6      	movs	r1, #214	@ 0xd6
 8001056:	4838      	ldr	r0, [pc, #224]	@ (8001138 <Init_HighPerf_Mode_6_axis+0x104>)
 8001058:	f001 f9e2 	bl	8002420 <HAL_I2C_Mem_Write>

    data = 0x4C; // 208 Hz, ±2000 dps pour le gyroscope
 800105c:	234c      	movs	r3, #76	@ 0x4c
 800105e:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, SENSOR_ADDRESS, CTRL2_G, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8001060:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001064:	9302      	str	r3, [sp, #8]
 8001066:	2301      	movs	r3, #1
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	1dfb      	adds	r3, r7, #7
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2301      	movs	r3, #1
 8001070:	2211      	movs	r2, #17
 8001072:	21d6      	movs	r1, #214	@ 0xd6
 8001074:	4830      	ldr	r0, [pc, #192]	@ (8001138 <Init_HighPerf_Mode_6_axis+0x104>)
 8001076:	f001 f9d3 	bl	8002420 <HAL_I2C_Mem_Write>

    // Activer l'incrémentation automatique des adresses et l'update des données
    data = 0x00; // Incrémentation automatique activée, BDU activé
 800107a:	2300      	movs	r3, #0
 800107c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, SENSOR_ADDRESS, CTRL3_C, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800107e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001082:	9302      	str	r3, [sp, #8]
 8001084:	2301      	movs	r3, #1
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	1dfb      	adds	r3, r7, #7
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	2212      	movs	r2, #18
 8001090:	21d6      	movs	r1, #214	@ 0xd6
 8001092:	4829      	ldr	r0, [pc, #164]	@ (8001138 <Init_HighPerf_Mode_6_axis+0x104>)
 8001094:	f001 f9c4 	bl	8002420 <HAL_I2C_Mem_Write>

    // Configurer la bande passante et autres options
    data = 0x00; // Paramètre par défaut pour CTRL6_C
 8001098:	2300      	movs	r3, #0
 800109a:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, SENSOR_ADDRESS, CTRL6_C, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800109c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	2301      	movs	r3, #1
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	1dfb      	adds	r3, r7, #7
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2301      	movs	r3, #1
 80010ac:	2215      	movs	r2, #21
 80010ae:	21d6      	movs	r1, #214	@ 0xd6
 80010b0:	4821      	ldr	r0, [pc, #132]	@ (8001138 <Init_HighPerf_Mode_6_axis+0x104>)
 80010b2:	f001 f9b5 	bl	8002420 <HAL_I2C_Mem_Write>

    // Configuration supplémentaire du gyroscope
    data = 0x00; // Paramètre par défaut pour CTRL7_G
 80010b6:	2300      	movs	r3, #0
 80010b8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, SENSOR_ADDRESS, CTRL7_G, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80010ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010be:	9302      	str	r3, [sp, #8]
 80010c0:	2301      	movs	r3, #1
 80010c2:	9301      	str	r3, [sp, #4]
 80010c4:	1dfb      	adds	r3, r7, #7
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2301      	movs	r3, #1
 80010ca:	2216      	movs	r2, #22
 80010cc:	21d6      	movs	r1, #214	@ 0xd6
 80010ce:	481a      	ldr	r0, [pc, #104]	@ (8001138 <Init_HighPerf_Mode_6_axis+0x104>)
 80010d0:	f001 f9a6 	bl	8002420 <HAL_I2C_Mem_Write>

    // Configuration supplémentaire pour l'accéléromètre
    data = 0x00; // Paramètre par défaut pour CTRL8_XL
 80010d4:	2300      	movs	r3, #0
 80010d6:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, SENSOR_ADDRESS, CTRL8_XL, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010dc:	9302      	str	r3, [sp, #8]
 80010de:	2301      	movs	r3, #1
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	2217      	movs	r2, #23
 80010ea:	21d6      	movs	r1, #214	@ 0xd6
 80010ec:	4812      	ldr	r0, [pc, #72]	@ (8001138 <Init_HighPerf_Mode_6_axis+0x104>)
 80010ee:	f001 f997 	bl	8002420 <HAL_I2C_Mem_Write>

    uint8_t status = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	71bb      	strb	r3, [r7, #6]

        // Lire le registre de statut via STATUS_REG pour voir si les données sont prêtes (XLDA et GDA)
        HAL_I2C_Mem_Read(&hi2c1, SENSOR_ADDRESS, STATUS_REG, I2C_MEMADD_SIZE_8BIT, &status, 1, HAL_MAX_DELAY);
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010fa:	9302      	str	r3, [sp, #8]
 80010fc:	2301      	movs	r3, #1
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	1dbb      	adds	r3, r7, #6
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	221e      	movs	r2, #30
 8001108:	21d6      	movs	r1, #214	@ 0xd6
 800110a:	480b      	ldr	r0, [pc, #44]	@ (8001138 <Init_HighPerf_Mode_6_axis+0x104>)
 800110c:	f001 fa9c 	bl	8002648 <HAL_I2C_Mem_Read>

        if (status & 0x01) {
 8001110:	79bb      	ldrb	r3, [r7, #6]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b00      	cmp	r3, #0
 8001118:	d002      	beq.n	8001120 <Init_HighPerf_Mode_6_axis+0xec>
            printf("Les données de l'accéléromètre sont prêtes.\r\n");
 800111a:	4808      	ldr	r0, [pc, #32]	@ (800113c <Init_HighPerf_Mode_6_axis+0x108>)
 800111c:	f007 f95c 	bl	80083d8 <puts>
        }
        if (status & 0x02) {
 8001120:	79bb      	ldrb	r3, [r7, #6]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d002      	beq.n	8001130 <Init_HighPerf_Mode_6_axis+0xfc>
            printf("Les données du gyroscope sont prêtes.\r\n");
 800112a:	4805      	ldr	r0, [pc, #20]	@ (8001140 <Init_HighPerf_Mode_6_axis+0x10c>)
 800112c:	f007 f954 	bl	80083d8 <puts>
        }

}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	200001f0 	.word	0x200001f0
 800113c:	0800af74 	.word	0x0800af74
 8001140:	0800afa8 	.word	0x0800afa8
 8001144:	00000000 	.word	0x00000000

08001148 <Read_sensor_data>:

HAL_StatusTypeDef Read_sensor_data(int16_t* accel_data, int16_t* gyro_data) {
 8001148:	b590      	push	{r4, r7, lr}
 800114a:	b08b      	sub	sp, #44	@ 0x2c
 800114c:	af04      	add	r7, sp, #16
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef status;
    uint8_t status_reg;
    uint8_t low_byte, high_byte;

    // Étape 1 : Lire STATUS_REG pour vérifier XLDA et GDA
    status = HAL_I2C_Mem_Read(&hi2c1, SENSOR_ADDRESS, STATUS_REG, I2C_MEMADD_SIZE_8BIT, &status_reg, 1, HAL_MAX_DELAY);
 8001152:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001156:	9302      	str	r3, [sp, #8]
 8001158:	2301      	movs	r3, #1
 800115a:	9301      	str	r3, [sp, #4]
 800115c:	f107 030a 	add.w	r3, r7, #10
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	2301      	movs	r3, #1
 8001164:	221e      	movs	r2, #30
 8001166:	21d6      	movs	r1, #214	@ 0xd6
 8001168:	485f      	ldr	r0, [pc, #380]	@ (80012e8 <Read_sensor_data+0x1a0>)
 800116a:	f001 fa6d 	bl	8002648 <HAL_I2C_Mem_Read>
 800116e:	4603      	mov	r3, r0
 8001170:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8001172:	7bfb      	ldrb	r3, [r7, #15]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <Read_sensor_data+0x34>
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	e0ad      	b.n	80012d8 <Read_sensor_data+0x190>

    // Vérifier si les bits XLDA (bit 0) et GDA (bit 1) sont à 1
    if (!(status_reg & 0x01) & !(status_reg & 0x02)) {
 800117c:	7abb      	ldrb	r3, [r7, #10]
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <Read_sensor_data+0x42>
        // Pas de nouvelles données prêtes
        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e0a6      	b.n	80012d8 <Read_sensor_data+0x190>
    }
	// Lire les données du gyroscope
	for (int i = 0; i < 3; i++) {
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
 800118e:	e049      	b.n	8001224 <Read_sensor_data+0xdc>
		// Adresses des registres pour chaque axe
		uint8_t low_addr = G_X_OUT_L + i * 2;
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	3311      	adds	r3, #17
 8001194:	b2db      	uxtb	r3, r3
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	733b      	strb	r3, [r7, #12]
		uint8_t high_addr = low_addr + 1;
 800119a:	7b3b      	ldrb	r3, [r7, #12]
 800119c:	3301      	adds	r3, #1
 800119e:	72fb      	strb	r3, [r7, #11]

		// Lire l'octet bas
		status = HAL_I2C_Mem_Read(&hi2c1, SENSOR_ADDRESS, low_addr, I2C_MEMADD_SIZE_8BIT, &low_byte, 1, HAL_MAX_DELAY);
 80011a0:	7b3b      	ldrb	r3, [r7, #12]
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011a8:	9302      	str	r3, [sp, #8]
 80011aa:	2301      	movs	r3, #1
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	f107 0309 	add.w	r3, r7, #9
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	2301      	movs	r3, #1
 80011b6:	21d6      	movs	r1, #214	@ 0xd6
 80011b8:	484b      	ldr	r0, [pc, #300]	@ (80012e8 <Read_sensor_data+0x1a0>)
 80011ba:	f001 fa45 	bl	8002648 <HAL_I2C_Mem_Read>
 80011be:	4603      	mov	r3, r0
 80011c0:	73fb      	strb	r3, [r7, #15]
		if (status != HAL_OK) return status;
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <Read_sensor_data+0x84>
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	e085      	b.n	80012d8 <Read_sensor_data+0x190>

		// Lire l'octet haut
		status = HAL_I2C_Mem_Read(&hi2c1, SENSOR_ADDRESS, high_addr, I2C_MEMADD_SIZE_8BIT, &high_byte, 1, HAL_MAX_DELAY);
 80011cc:	7afb      	ldrb	r3, [r7, #11]
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011d4:	9302      	str	r3, [sp, #8]
 80011d6:	2301      	movs	r3, #1
 80011d8:	9301      	str	r3, [sp, #4]
 80011da:	f107 0308 	add.w	r3, r7, #8
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2301      	movs	r3, #1
 80011e2:	21d6      	movs	r1, #214	@ 0xd6
 80011e4:	4840      	ldr	r0, [pc, #256]	@ (80012e8 <Read_sensor_data+0x1a0>)
 80011e6:	f001 fa2f 	bl	8002648 <HAL_I2C_Mem_Read>
 80011ea:	4603      	mov	r3, r0
 80011ec:	73fb      	strb	r3, [r7, #15]
		if (status != HAL_OK) return status;
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <Read_sensor_data+0xb0>
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	e06f      	b.n	80012d8 <Read_sensor_data+0x190>

		// Combiner les octets pour obtenir la valeur 16 bits
		gyro_data[i] = (int16_t)(((high_byte << 8) | low_byte) * GYRO_SENSITIVITY_2000DPS);
 80011f8:	7a3b      	ldrb	r3, [r7, #8]
 80011fa:	021b      	lsls	r3, r3, #8
 80011fc:	7a7a      	ldrb	r2, [r7, #9]
 80011fe:	4313      	orrs	r3, r2
 8001200:	b29b      	uxth	r3, r3
 8001202:	461a      	mov	r2, r3
 8001204:	0092      	lsls	r2, r2, #2
 8001206:	4413      	add	r3, r2
 8001208:	461a      	mov	r2, r3
 800120a:	00d2      	lsls	r2, r2, #3
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	b299      	uxth	r1, r3
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	683a      	ldr	r2, [r7, #0]
 8001218:	4413      	add	r3, r2
 800121a:	b20a      	sxth	r2, r1
 800121c:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < 3; i++) {
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	3301      	adds	r3, #1
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	2b02      	cmp	r3, #2
 8001228:	ddb2      	ble.n	8001190 <Read_sensor_data+0x48>
	}
	// Lire les données de l'accéléromètre
	for (int i = 0; i < 3; i++) {
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
 800122e:	e04f      	b.n	80012d0 <Read_sensor_data+0x188>
		// Adresses des registres pour chaque axe
		uint8_t low_addr = XL_X_OUT_L + i * 2;
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	3314      	adds	r3, #20
 8001234:	b2db      	uxtb	r3, r3
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	73bb      	strb	r3, [r7, #14]
		uint8_t high_addr = low_addr + 1;
 800123a:	7bbb      	ldrb	r3, [r7, #14]
 800123c:	3301      	adds	r3, #1
 800123e:	737b      	strb	r3, [r7, #13]

		// Lire l'octet bas
		status = HAL_I2C_Mem_Read(&hi2c1, SENSOR_ADDRESS, low_addr, I2C_MEMADD_SIZE_8BIT, &low_byte, 1, HAL_MAX_DELAY);
 8001240:	7bbb      	ldrb	r3, [r7, #14]
 8001242:	b29a      	uxth	r2, r3
 8001244:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001248:	9302      	str	r3, [sp, #8]
 800124a:	2301      	movs	r3, #1
 800124c:	9301      	str	r3, [sp, #4]
 800124e:	f107 0309 	add.w	r3, r7, #9
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	2301      	movs	r3, #1
 8001256:	21d6      	movs	r1, #214	@ 0xd6
 8001258:	4823      	ldr	r0, [pc, #140]	@ (80012e8 <Read_sensor_data+0x1a0>)
 800125a:	f001 f9f5 	bl	8002648 <HAL_I2C_Mem_Read>
 800125e:	4603      	mov	r3, r0
 8001260:	73fb      	strb	r3, [r7, #15]
		if (status != HAL_OK) return status;
 8001262:	7bfb      	ldrb	r3, [r7, #15]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <Read_sensor_data+0x124>
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	e035      	b.n	80012d8 <Read_sensor_data+0x190>

		// Lire l'octet haut
		status = HAL_I2C_Mem_Read(&hi2c1, SENSOR_ADDRESS, high_addr, I2C_MEMADD_SIZE_8BIT, &high_byte, 1, HAL_MAX_DELAY);
 800126c:	7b7b      	ldrb	r3, [r7, #13]
 800126e:	b29a      	uxth	r2, r3
 8001270:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001274:	9302      	str	r3, [sp, #8]
 8001276:	2301      	movs	r3, #1
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	f107 0308 	add.w	r3, r7, #8
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	2301      	movs	r3, #1
 8001282:	21d6      	movs	r1, #214	@ 0xd6
 8001284:	4818      	ldr	r0, [pc, #96]	@ (80012e8 <Read_sensor_data+0x1a0>)
 8001286:	f001 f9df 	bl	8002648 <HAL_I2C_Mem_Read>
 800128a:	4603      	mov	r3, r0
 800128c:	73fb      	strb	r3, [r7, #15]
		if (status != HAL_OK) return status;
 800128e:	7bfb      	ldrb	r3, [r7, #15]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <Read_sensor_data+0x150>
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	e01f      	b.n	80012d8 <Read_sensor_data+0x190>

		// Combiner les octets pour obtenir la valeur 16 bits
		accel_data[i] = (int16_t)(((high_byte << 8) | low_byte) * ACC_SENSITIVITY_16G);
 8001298:	7a3b      	ldrb	r3, [r7, #8]
 800129a:	021b      	lsls	r3, r3, #8
 800129c:	7a7a      	ldrb	r2, [r7, #9]
 800129e:	4313      	orrs	r3, r2
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f93f 	bl	8000524 <__aeabi_i2d>
 80012a6:	a30e      	add	r3, pc, #56	@ (adr r3, 80012e0 <Read_sensor_data+0x198>)
 80012a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ac:	f7ff f9a4 	bl	80005f8 <__aeabi_dmul>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4610      	mov	r0, r2
 80012b6:	4619      	mov	r1, r3
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	18d4      	adds	r4, r2, r3
 80012c0:	f7ff fc4a 	bl	8000b58 <__aeabi_d2iz>
 80012c4:	4603      	mov	r3, r0
 80012c6:	b21b      	sxth	r3, r3
 80012c8:	8023      	strh	r3, [r4, #0]
	for (int i = 0; i < 3; i++) {
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	3301      	adds	r3, #1
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	ddac      	ble.n	8001230 <Read_sensor_data+0xe8>
	}

	return HAL_OK;
 80012d6:	2300      	movs	r3, #0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	371c      	adds	r7, #28
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd90      	pop	{r4, r7, pc}
 80012e0:	5a1cac08 	.word	0x5a1cac08
 80012e4:	3fdf3b64 	.word	0x3fdf3b64
 80012e8:	200001f0 	.word	0x200001f0

080012ec <Display_6_axis_data>:

void Display_6_axis_data(void) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
    int16_t accel_data[3], gyro_data[3]; // Tableau pour stocker les données d'accéléromètre et de gyroscope
    HAL_StatusTypeDef status;

    // Lire les données du capteur
    status = Read_sensor_data(accel_data, gyro_data);
 80012f2:	463a      	mov	r2, r7
 80012f4:	f107 0308 	add.w	r3, r7, #8
 80012f8:	4611      	mov	r1, r2
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff ff24 	bl	8001148 <Read_sensor_data>
 8001300:	4603      	mov	r3, r0
 8001302:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK) {
 8001304:	7bfb      	ldrb	r3, [r7, #15]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d116      	bne.n	8001338 <Display_6_axis_data+0x4c>
        // Afficher les valeurs dans le format demandé
        printf("XL/(X,Y,Z) [mg] : %d ; %d ; %d\r\n", accel_data[0], accel_data[1], accel_data[2]);
 800130a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800130e:	4619      	mov	r1, r3
 8001310:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001314:	461a      	mov	r2, r3
 8001316:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800131a:	480c      	ldr	r0, [pc, #48]	@ (800134c <Display_6_axis_data+0x60>)
 800131c:	f006 fff4 	bl	8008308 <iprintf>
        printf("G/(X,Y,Z) [mdps] : %d ; %d ; %d\r\n", gyro_data[0], gyro_data[1], gyro_data[2]);
 8001320:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001324:	4619      	mov	r1, r3
 8001326:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800132a:	461a      	mov	r2, r3
 800132c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001330:	4807      	ldr	r0, [pc, #28]	@ (8001350 <Display_6_axis_data+0x64>)
 8001332:	f006 ffe9 	bl	8008308 <iprintf>
    } else {
        printf("Erreur de lecture du capteur --> ");
        check_device_communication();
    }
}
 8001336:	e004      	b.n	8001342 <Display_6_axis_data+0x56>
        printf("Erreur de lecture du capteur --> ");
 8001338:	4806      	ldr	r0, [pc, #24]	@ (8001354 <Display_6_axis_data+0x68>)
 800133a:	f006 ffe5 	bl	8008308 <iprintf>
        check_device_communication();
 800133e:	f7ff fe51 	bl	8000fe4 <check_device_communication>
}
 8001342:	bf00      	nop
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	0800afd4 	.word	0x0800afd4
 8001350:	0800aff8 	.word	0x0800aff8
 8001354:	0800b01c 	.word	0x0800b01c

08001358 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08a      	sub	sp, #40	@ 0x28
 800135c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800136e:	4b2b      	ldr	r3, [pc, #172]	@ (800141c <MX_GPIO_Init+0xc4>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001372:	4a2a      	ldr	r2, [pc, #168]	@ (800141c <MX_GPIO_Init+0xc4>)
 8001374:	f043 0304 	orr.w	r3, r3, #4
 8001378:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800137a:	4b28      	ldr	r3, [pc, #160]	@ (800141c <MX_GPIO_Init+0xc4>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137e:	f003 0304 	and.w	r3, r3, #4
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001386:	4b25      	ldr	r3, [pc, #148]	@ (800141c <MX_GPIO_Init+0xc4>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138a:	4a24      	ldr	r2, [pc, #144]	@ (800141c <MX_GPIO_Init+0xc4>)
 800138c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001390:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001392:	4b22      	ldr	r3, [pc, #136]	@ (800141c <MX_GPIO_Init+0xc4>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	4b1f      	ldr	r3, [pc, #124]	@ (800141c <MX_GPIO_Init+0xc4>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a2:	4a1e      	ldr	r2, [pc, #120]	@ (800141c <MX_GPIO_Init+0xc4>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013aa:	4b1c      	ldr	r3, [pc, #112]	@ (800141c <MX_GPIO_Init+0xc4>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	4b19      	ldr	r3, [pc, #100]	@ (800141c <MX_GPIO_Init+0xc4>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ba:	4a18      	ldr	r2, [pc, #96]	@ (800141c <MX_GPIO_Init+0xc4>)
 80013bc:	f043 0302 	orr.w	r3, r3, #2
 80013c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013c2:	4b16      	ldr	r3, [pc, #88]	@ (800141c <MX_GPIO_Init+0xc4>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2120      	movs	r1, #32
 80013d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013d6:	f000 ff6f 	bl	80022b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013e0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80013e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	4619      	mov	r1, r3
 80013f0:	480b      	ldr	r0, [pc, #44]	@ (8001420 <MX_GPIO_Init+0xc8>)
 80013f2:	f000 fdb7 	bl	8001f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013f6:	2320      	movs	r3, #32
 80013f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fa:	2301      	movs	r3, #1
 80013fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001402:	2300      	movs	r3, #0
 8001404:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001406:	f107 0314 	add.w	r3, r7, #20
 800140a:	4619      	mov	r1, r3
 800140c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001410:	f000 fda8 	bl	8001f64 <HAL_GPIO_Init>

}
 8001414:	bf00      	nop
 8001416:	3728      	adds	r7, #40	@ 0x28
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40021000 	.word	0x40021000
 8001420:	48000800 	.word	0x48000800

08001424 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001428:	4b1b      	ldr	r3, [pc, #108]	@ (8001498 <MX_I2C1_Init+0x74>)
 800142a:	4a1c      	ldr	r2, [pc, #112]	@ (800149c <MX_I2C1_Init+0x78>)
 800142c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 800142e:	4b1a      	ldr	r3, [pc, #104]	@ (8001498 <MX_I2C1_Init+0x74>)
 8001430:	4a1b      	ldr	r2, [pc, #108]	@ (80014a0 <MX_I2C1_Init+0x7c>)
 8001432:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001434:	4b18      	ldr	r3, [pc, #96]	@ (8001498 <MX_I2C1_Init+0x74>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800143a:	4b17      	ldr	r3, [pc, #92]	@ (8001498 <MX_I2C1_Init+0x74>)
 800143c:	2201      	movs	r2, #1
 800143e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001440:	4b15      	ldr	r3, [pc, #84]	@ (8001498 <MX_I2C1_Init+0x74>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001446:	4b14      	ldr	r3, [pc, #80]	@ (8001498 <MX_I2C1_Init+0x74>)
 8001448:	2200      	movs	r2, #0
 800144a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800144c:	4b12      	ldr	r3, [pc, #72]	@ (8001498 <MX_I2C1_Init+0x74>)
 800144e:	2200      	movs	r2, #0
 8001450:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001452:	4b11      	ldr	r3, [pc, #68]	@ (8001498 <MX_I2C1_Init+0x74>)
 8001454:	2200      	movs	r2, #0
 8001456:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001458:	4b0f      	ldr	r3, [pc, #60]	@ (8001498 <MX_I2C1_Init+0x74>)
 800145a:	2200      	movs	r2, #0
 800145c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800145e:	480e      	ldr	r0, [pc, #56]	@ (8001498 <MX_I2C1_Init+0x74>)
 8001460:	f000 ff42 	bl	80022e8 <HAL_I2C_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800146a:	f000 f924 	bl	80016b6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800146e:	2100      	movs	r1, #0
 8001470:	4809      	ldr	r0, [pc, #36]	@ (8001498 <MX_I2C1_Init+0x74>)
 8001472:	f002 fa9d 	bl	80039b0 <HAL_I2CEx_ConfigAnalogFilter>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800147c:	f000 f91b 	bl	80016b6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001480:	2100      	movs	r1, #0
 8001482:	4805      	ldr	r0, [pc, #20]	@ (8001498 <MX_I2C1_Init+0x74>)
 8001484:	f002 fadf 	bl	8003a46 <HAL_I2CEx_ConfigDigitalFilter>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800148e:	f000 f912 	bl	80016b6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200001f0 	.word	0x200001f0
 800149c:	40005400 	.word	0x40005400
 80014a0:	10d19ce4 	.word	0x10d19ce4

080014a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b0ac      	sub	sp, #176	@ 0xb0
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	2288      	movs	r2, #136	@ 0x88
 80014c2:	2100      	movs	r1, #0
 80014c4:	4618      	mov	r0, r3
 80014c6:	f006 ffa1 	bl	800840c <memset>
  if(i2cHandle->Instance==I2C1)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a29      	ldr	r2, [pc, #164]	@ (8001574 <HAL_I2C_MspInit+0xd0>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d14b      	bne.n	800156c <HAL_I2C_MspInit+0xc8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014d4:	2340      	movs	r3, #64	@ 0x40
 80014d6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014d8:	2300      	movs	r3, #0
 80014da:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4618      	mov	r0, r3
 80014e2:	f003 f961 	bl	80047a8 <HAL_RCCEx_PeriphCLKConfig>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80014ec:	f000 f8e3 	bl	80016b6 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f0:	4b21      	ldr	r3, [pc, #132]	@ (8001578 <HAL_I2C_MspInit+0xd4>)
 80014f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f4:	4a20      	ldr	r2, [pc, #128]	@ (8001578 <HAL_I2C_MspInit+0xd4>)
 80014f6:	f043 0302 	orr.w	r3, r3, #2
 80014fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001578 <HAL_I2C_MspInit+0xd4>)
 80014fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	613b      	str	r3, [r7, #16]
 8001506:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001508:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800150c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001510:	2312      	movs	r3, #18
 8001512:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001516:	2301      	movs	r3, #1
 8001518:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151c:	2303      	movs	r3, #3
 800151e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001522:	2304      	movs	r3, #4
 8001524:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001528:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800152c:	4619      	mov	r1, r3
 800152e:	4813      	ldr	r0, [pc, #76]	@ (800157c <HAL_I2C_MspInit+0xd8>)
 8001530:	f000 fd18 	bl	8001f64 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001534:	4b10      	ldr	r3, [pc, #64]	@ (8001578 <HAL_I2C_MspInit+0xd4>)
 8001536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001538:	4a0f      	ldr	r2, [pc, #60]	@ (8001578 <HAL_I2C_MspInit+0xd4>)
 800153a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800153e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001540:	4b0d      	ldr	r3, [pc, #52]	@ (8001578 <HAL_I2C_MspInit+0xd4>)
 8001542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001544:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800154c:	2200      	movs	r2, #0
 800154e:	2100      	movs	r1, #0
 8001550:	201f      	movs	r0, #31
 8001552:	f000 fc82 	bl	8001e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001556:	201f      	movs	r0, #31
 8001558:	f000 fc9b 	bl	8001e92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800155c:	2200      	movs	r2, #0
 800155e:	2100      	movs	r1, #0
 8001560:	2020      	movs	r0, #32
 8001562:	f000 fc7a 	bl	8001e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001566:	2020      	movs	r0, #32
 8001568:	f000 fc93 	bl	8001e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800156c:	bf00      	nop
 800156e:	37b0      	adds	r7, #176	@ 0xb0
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40005400 	.word	0x40005400
 8001578:	40021000 	.word	0x40021000
 800157c:	48000400 	.word	0x48000400

08001580 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001588:	1d39      	adds	r1, r7, #4
 800158a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800158e:	2201      	movs	r2, #1
 8001590:	4803      	ldr	r0, [pc, #12]	@ (80015a0 <__io_putchar+0x20>)
 8001592:	f004 fac3 	bl	8005b1c <HAL_UART_Transmit>
  return ch;
 8001596:	687b      	ldr	r3, [r7, #4]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20000294 	.word	0x20000294

080015a4 <__io_getchar>:


GETCHAR_PROTOTYPE
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart2);
 80015ae:	4b0b      	ldr	r3, [pc, #44]	@ (80015dc <__io_getchar+0x38>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2208      	movs	r2, #8
 80015b4:	621a      	str	r2, [r3, #32]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80015b6:	1df9      	adds	r1, r7, #7
 80015b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015bc:	2201      	movs	r2, #1
 80015be:	4807      	ldr	r0, [pc, #28]	@ (80015dc <__io_getchar+0x38>)
 80015c0:	f004 fb35 	bl	8005c2e <HAL_UART_Receive>
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80015c4:	1df9      	adds	r1, r7, #7
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015ca:	2201      	movs	r2, #1
 80015cc:	4803      	ldr	r0, [pc, #12]	@ (80015dc <__io_getchar+0x38>)
 80015ce:	f004 faa5 	bl	8005b1c <HAL_UART_Transmit>
  return ch;
 80015d2:	79fb      	ldrb	r3, [r7, #7]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000294 	.word	0x20000294

080015e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015e4:	f000 fae2 	bl	8001bac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015e8:	f000 f814 	bl	8001614 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  check_device_communication();
 80015ec:	f7ff fcfa 	bl	8000fe4 <check_device_communication>
  Init_HighPerf_Mode_6_axis();
 80015f0:	f7ff fd20 	bl	8001034 <Init_HighPerf_Mode_6_axis>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015f4:	f7ff feb0 	bl	8001358 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80015f8:	f000 fa22 	bl	8001a40 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80015fc:	f7ff ff12 	bl	8001424 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001600:	f000 f9ac 	bl	800195c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001604:	4802      	ldr	r0, [pc, #8]	@ (8001610 <main+0x30>)
 8001606:	f003 fde3 	bl	80051d0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800160a:	bf00      	nop
 800160c:	e7fd      	b.n	800160a <main+0x2a>
 800160e:	bf00      	nop
 8001610:	20000248 	.word	0x20000248

08001614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b096      	sub	sp, #88	@ 0x58
 8001618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	2244      	movs	r2, #68	@ 0x44
 8001620:	2100      	movs	r1, #0
 8001622:	4618      	mov	r0, r3
 8001624:	f006 fef2 	bl	800840c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001628:	463b      	mov	r3, r7
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]
 8001634:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001636:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800163a:	f002 fa5f 	bl	8003afc <HAL_PWREx_ControlVoltageScaling>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001644:	f000 f837 	bl	80016b6 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001648:	2302      	movs	r3, #2
 800164a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800164c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001650:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001652:	2310      	movs	r3, #16
 8001654:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001656:	2302      	movs	r3, #2
 8001658:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800165a:	2302      	movs	r3, #2
 800165c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800165e:	2301      	movs	r3, #1
 8001660:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001662:	230a      	movs	r3, #10
 8001664:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001666:	2307      	movs	r3, #7
 8001668:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800166a:	2302      	movs	r3, #2
 800166c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800166e:	2302      	movs	r3, #2
 8001670:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	4618      	mov	r0, r3
 8001678:	f002 fa96 	bl	8003ba8 <HAL_RCC_OscConfig>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001682:	f000 f818 	bl	80016b6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001686:	230f      	movs	r3, #15
 8001688:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800168a:	2303      	movs	r3, #3
 800168c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800169a:	463b      	mov	r3, r7
 800169c:	2104      	movs	r1, #4
 800169e:	4618      	mov	r0, r3
 80016a0:	f002 fe5e 	bl	8004360 <HAL_RCC_ClockConfig>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80016aa:	f000 f804 	bl	80016b6 <Error_Handler>
  }
}
 80016ae:	bf00      	nop
 80016b0:	3758      	adds	r7, #88	@ 0x58
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ba:	b672      	cpsid	i
}
 80016bc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016be:	bf00      	nop
 80016c0:	e7fd      	b.n	80016be <Error_Handler+0x8>
	...

080016c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001708 <HAL_MspInit+0x44>)
 80016cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001708 <HAL_MspInit+0x44>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80016d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001708 <HAL_MspInit+0x44>)
 80016d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e2:	4b09      	ldr	r3, [pc, #36]	@ (8001708 <HAL_MspInit+0x44>)
 80016e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e6:	4a08      	ldr	r2, [pc, #32]	@ (8001708 <HAL_MspInit+0x44>)
 80016e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80016ee:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <HAL_MspInit+0x44>)
 80016f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	40021000 	.word	0x40021000

0800170c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001710:	bf00      	nop
 8001712:	e7fd      	b.n	8001710 <NMI_Handler+0x4>

08001714 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <HardFault_Handler+0x4>

0800171c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <MemManage_Handler+0x4>

08001724 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <BusFault_Handler+0x4>

0800172c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <UsageFault_Handler+0x4>

08001734 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001762:	f000 fa7f 	bl	8001c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001770:	4803      	ldr	r0, [pc, #12]	@ (8001780 <TIM2_IRQHandler+0x14>)
 8001772:	f003 fd9d 	bl	80052b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  Display_6_axis_data();
 8001776:	f7ff fdb9 	bl	80012ec <Display_6_axis_data>
  /* USER CODE END TIM2_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000248 	.word	0x20000248

08001784 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001788:	4802      	ldr	r0, [pc, #8]	@ (8001794 <I2C1_EV_IRQHandler+0x10>)
 800178a:	f001 f877 	bl	800287c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	200001f0 	.word	0x200001f0

08001798 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800179c:	4802      	ldr	r0, [pc, #8]	@ (80017a8 <I2C1_ER_IRQHandler+0x10>)
 800179e:	f001 f887 	bl	80028b0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	200001f0 	.word	0x200001f0

080017ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return 1;
 80017b0:	2301      	movs	r3, #1
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <_kill>:

int _kill(int pid, int sig)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017c6:	f006 fe2d 	bl	8008424 <__errno>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2216      	movs	r2, #22
 80017ce:	601a      	str	r2, [r3, #0]
  return -1;
 80017d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <_exit>:

void _exit (int status)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017e4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff ffe7 	bl	80017bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80017ee:	bf00      	nop
 80017f0:	e7fd      	b.n	80017ee <_exit+0x12>

080017f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b086      	sub	sp, #24
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	60f8      	str	r0, [r7, #12]
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
 8001802:	e00a      	b.n	800181a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001804:	f7ff fece 	bl	80015a4 <__io_getchar>
 8001808:	4601      	mov	r1, r0
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	1c5a      	adds	r2, r3, #1
 800180e:	60ba      	str	r2, [r7, #8]
 8001810:	b2ca      	uxtb	r2, r1
 8001812:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	3301      	adds	r3, #1
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	429a      	cmp	r2, r3
 8001820:	dbf0      	blt.n	8001804 <_read+0x12>
  }

  return len;
 8001822:	687b      	ldr	r3, [r7, #4]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	e009      	b.n	8001852 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	1c5a      	adds	r2, r3, #1
 8001842:	60ba      	str	r2, [r7, #8]
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fe9a 	bl	8001580 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	3301      	adds	r3, #1
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	429a      	cmp	r2, r3
 8001858:	dbf1      	blt.n	800183e <_write+0x12>
  }
  return len;
 800185a:	687b      	ldr	r3, [r7, #4]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <_close>:

int _close(int file)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800186c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001870:	4618      	mov	r0, r3
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800188c:	605a      	str	r2, [r3, #4]
  return 0;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <_isatty>:

int _isatty(int file)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018a4:	2301      	movs	r3, #1
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b085      	sub	sp, #20
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	60f8      	str	r0, [r7, #12]
 80018ba:	60b9      	str	r1, [r7, #8]
 80018bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d4:	4a14      	ldr	r2, [pc, #80]	@ (8001928 <_sbrk+0x5c>)
 80018d6:	4b15      	ldr	r3, [pc, #84]	@ (800192c <_sbrk+0x60>)
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e0:	4b13      	ldr	r3, [pc, #76]	@ (8001930 <_sbrk+0x64>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d102      	bne.n	80018ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e8:	4b11      	ldr	r3, [pc, #68]	@ (8001930 <_sbrk+0x64>)
 80018ea:	4a12      	ldr	r2, [pc, #72]	@ (8001934 <_sbrk+0x68>)
 80018ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ee:	4b10      	ldr	r3, [pc, #64]	@ (8001930 <_sbrk+0x64>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d207      	bcs.n	800190c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018fc:	f006 fd92 	bl	8008424 <__errno>
 8001900:	4603      	mov	r3, r0
 8001902:	220c      	movs	r2, #12
 8001904:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001906:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800190a:	e009      	b.n	8001920 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800190c:	4b08      	ldr	r3, [pc, #32]	@ (8001930 <_sbrk+0x64>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001912:	4b07      	ldr	r3, [pc, #28]	@ (8001930 <_sbrk+0x64>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	4a05      	ldr	r2, [pc, #20]	@ (8001930 <_sbrk+0x64>)
 800191c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800191e:	68fb      	ldr	r3, [r7, #12]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20018000 	.word	0x20018000
 800192c:	00000400 	.word	0x00000400
 8001930:	20000244 	.word	0x20000244
 8001934:	20000470 	.word	0x20000470

08001938 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800193c:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <SystemInit+0x20>)
 800193e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001942:	4a05      	ldr	r2, [pc, #20]	@ (8001958 <SystemInit+0x20>)
 8001944:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001948:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b088      	sub	sp, #32
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001962:	f107 0310 	add.w	r3, r7, #16
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001970:	1d3b      	adds	r3, r7, #4
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800197a:	4b1d      	ldr	r3, [pc, #116]	@ (80019f0 <MX_TIM2_Init+0x94>)
 800197c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001980:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8001982:	4b1b      	ldr	r3, [pc, #108]	@ (80019f0 <MX_TIM2_Init+0x94>)
 8001984:	224f      	movs	r2, #79	@ 0x4f
 8001986:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001988:	4b19      	ldr	r3, [pc, #100]	@ (80019f0 <MX_TIM2_Init+0x94>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000-1;
 800198e:	4b18      	ldr	r3, [pc, #96]	@ (80019f0 <MX_TIM2_Init+0x94>)
 8001990:	4a18      	ldr	r2, [pc, #96]	@ (80019f4 <MX_TIM2_Init+0x98>)
 8001992:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001994:	4b16      	ldr	r3, [pc, #88]	@ (80019f0 <MX_TIM2_Init+0x94>)
 8001996:	2200      	movs	r2, #0
 8001998:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800199a:	4b15      	ldr	r3, [pc, #84]	@ (80019f0 <MX_TIM2_Init+0x94>)
 800199c:	2200      	movs	r2, #0
 800199e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019a0:	4813      	ldr	r0, [pc, #76]	@ (80019f0 <MX_TIM2_Init+0x94>)
 80019a2:	f003 fbbd 	bl	8005120 <HAL_TIM_Base_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80019ac:	f7ff fe83 	bl	80016b6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019b6:	f107 0310 	add.w	r3, r7, #16
 80019ba:	4619      	mov	r1, r3
 80019bc:	480c      	ldr	r0, [pc, #48]	@ (80019f0 <MX_TIM2_Init+0x94>)
 80019be:	f003 fd7e 	bl	80054be <HAL_TIM_ConfigClockSource>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80019c8:	f7ff fe75 	bl	80016b6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019cc:	2300      	movs	r3, #0
 80019ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	4619      	mov	r1, r3
 80019d8:	4805      	ldr	r0, [pc, #20]	@ (80019f0 <MX_TIM2_Init+0x94>)
 80019da:	f003 ffab 	bl	8005934 <HAL_TIMEx_MasterConfigSynchronization>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80019e4:	f7ff fe67 	bl	80016b6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019e8:	bf00      	nop
 80019ea:	3720      	adds	r7, #32
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20000248 	.word	0x20000248
 80019f4:	000f423f 	.word	0x000f423f

080019f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a08:	d113      	bne.n	8001a32 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a3c <HAL_TIM_Base_MspInit+0x44>)
 8001a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a0e:	4a0b      	ldr	r2, [pc, #44]	@ (8001a3c <HAL_TIM_Base_MspInit+0x44>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a16:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <HAL_TIM_Base_MspInit+0x44>)
 8001a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2100      	movs	r1, #0
 8001a26:	201c      	movs	r0, #28
 8001a28:	f000 fa17 	bl	8001e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a2c:	201c      	movs	r0, #28
 8001a2e:	f000 fa30 	bl	8001e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001a32:	bf00      	nop
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40021000 	.word	0x40021000

08001a40 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a44:	4b14      	ldr	r3, [pc, #80]	@ (8001a98 <MX_USART2_UART_Init+0x58>)
 8001a46:	4a15      	ldr	r2, [pc, #84]	@ (8001a9c <MX_USART2_UART_Init+0x5c>)
 8001a48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a4a:	4b13      	ldr	r3, [pc, #76]	@ (8001a98 <MX_USART2_UART_Init+0x58>)
 8001a4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a52:	4b11      	ldr	r3, [pc, #68]	@ (8001a98 <MX_USART2_UART_Init+0x58>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a58:	4b0f      	ldr	r3, [pc, #60]	@ (8001a98 <MX_USART2_UART_Init+0x58>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a98 <MX_USART2_UART_Init+0x58>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a64:	4b0c      	ldr	r3, [pc, #48]	@ (8001a98 <MX_USART2_UART_Init+0x58>)
 8001a66:	220c      	movs	r2, #12
 8001a68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a98 <MX_USART2_UART_Init+0x58>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a70:	4b09      	ldr	r3, [pc, #36]	@ (8001a98 <MX_USART2_UART_Init+0x58>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a76:	4b08      	ldr	r3, [pc, #32]	@ (8001a98 <MX_USART2_UART_Init+0x58>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a7c:	4b06      	ldr	r3, [pc, #24]	@ (8001a98 <MX_USART2_UART_Init+0x58>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a82:	4805      	ldr	r0, [pc, #20]	@ (8001a98 <MX_USART2_UART_Init+0x58>)
 8001a84:	f003 fffc 	bl	8005a80 <HAL_UART_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a8e:	f7ff fe12 	bl	80016b6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000294 	.word	0x20000294
 8001a9c:	40004400 	.word	0x40004400

08001aa0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b0ac      	sub	sp, #176	@ 0xb0
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	2288      	movs	r2, #136	@ 0x88
 8001abe:	2100      	movs	r1, #0
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f006 fca3 	bl	800840c <memset>
  if(uartHandle->Instance==USART2)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a21      	ldr	r2, [pc, #132]	@ (8001b50 <HAL_UART_MspInit+0xb0>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d13b      	bne.n	8001b48 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	4618      	mov	r0, r3
 8001ade:	f002 fe63 	bl	80047a8 <HAL_RCCEx_PeriphCLKConfig>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ae8:	f7ff fde5 	bl	80016b6 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aec:	4b19      	ldr	r3, [pc, #100]	@ (8001b54 <HAL_UART_MspInit+0xb4>)
 8001aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af0:	4a18      	ldr	r2, [pc, #96]	@ (8001b54 <HAL_UART_MspInit+0xb4>)
 8001af2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001af6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001af8:	4b16      	ldr	r3, [pc, #88]	@ (8001b54 <HAL_UART_MspInit+0xb4>)
 8001afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b04:	4b13      	ldr	r3, [pc, #76]	@ (8001b54 <HAL_UART_MspInit+0xb4>)
 8001b06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b08:	4a12      	ldr	r2, [pc, #72]	@ (8001b54 <HAL_UART_MspInit+0xb4>)
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b10:	4b10      	ldr	r3, [pc, #64]	@ (8001b54 <HAL_UART_MspInit+0xb4>)
 8001b12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b1c:	230c      	movs	r3, #12
 8001b1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b22:	2302      	movs	r3, #2
 8001b24:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b34:	2307      	movs	r3, #7
 8001b36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b44:	f000 fa0e 	bl	8001f64 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b48:	bf00      	nop
 8001b4a:	37b0      	adds	r7, #176	@ 0xb0
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40004400 	.word	0x40004400
 8001b54:	40021000 	.word	0x40021000

08001b58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b5c:	f7ff feec 	bl	8001938 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b60:	480c      	ldr	r0, [pc, #48]	@ (8001b94 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b62:	490d      	ldr	r1, [pc, #52]	@ (8001b98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b64:	4a0d      	ldr	r2, [pc, #52]	@ (8001b9c <LoopForever+0xe>)
  movs r3, #0
 8001b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b68:	e002      	b.n	8001b70 <LoopCopyDataInit>

08001b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b6e:	3304      	adds	r3, #4

08001b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b74:	d3f9      	bcc.n	8001b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b76:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b78:	4c0a      	ldr	r4, [pc, #40]	@ (8001ba4 <LoopForever+0x16>)
  movs r3, #0
 8001b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b7c:	e001      	b.n	8001b82 <LoopFillZerobss>

08001b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b80:	3204      	adds	r2, #4

08001b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b84:	d3fb      	bcc.n	8001b7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b86:	f006 fc53 	bl	8008430 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b8a:	f7ff fd29 	bl	80015e0 <main>

08001b8e <LoopForever>:

LoopForever:
    b LoopForever
 8001b8e:	e7fe      	b.n	8001b8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b90:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b98:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001b9c:	0800b4c4 	.word	0x0800b4c4
  ldr r2, =_sbss
 8001ba0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001ba4:	2000046c 	.word	0x2000046c

08001ba8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ba8:	e7fe      	b.n	8001ba8 <ADC1_2_IRQHandler>
	...

08001bac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	@ (8001be8 <HAL_Init+0x3c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a0b      	ldr	r2, [pc, #44]	@ (8001be8 <HAL_Init+0x3c>)
 8001bbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bc0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc2:	2003      	movs	r0, #3
 8001bc4:	f000 f93e 	bl	8001e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bc8:	2000      	movs	r0, #0
 8001bca:	f000 f80f 	bl	8001bec <HAL_InitTick>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d002      	beq.n	8001bda <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	71fb      	strb	r3, [r7, #7]
 8001bd8:	e001      	b.n	8001bde <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bda:	f7ff fd73 	bl	80016c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bde:	79fb      	ldrb	r3, [r7, #7]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40022000 	.word	0x40022000

08001bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001bf8:	4b17      	ldr	r3, [pc, #92]	@ (8001c58 <HAL_InitTick+0x6c>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d023      	beq.n	8001c48 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c00:	4b16      	ldr	r3, [pc, #88]	@ (8001c5c <HAL_InitTick+0x70>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b14      	ldr	r3, [pc, #80]	@ (8001c58 <HAL_InitTick+0x6c>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 f949 	bl	8001eae <HAL_SYSTICK_Config>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10f      	bne.n	8001c42 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b0f      	cmp	r3, #15
 8001c26:	d809      	bhi.n	8001c3c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c30:	f000 f913 	bl	8001e5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c34:	4a0a      	ldr	r2, [pc, #40]	@ (8001c60 <HAL_InitTick+0x74>)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	e007      	b.n	8001c4c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	73fb      	strb	r3, [r7, #15]
 8001c40:	e004      	b.n	8001c4c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	73fb      	strb	r3, [r7, #15]
 8001c46:	e001      	b.n	8001c4c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000008 	.word	0x20000008
 8001c5c:	20000000 	.word	0x20000000
 8001c60:	20000004 	.word	0x20000004

08001c64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c68:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <HAL_IncTick+0x20>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4b06      	ldr	r3, [pc, #24]	@ (8001c88 <HAL_IncTick+0x24>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4413      	add	r3, r2
 8001c74:	4a04      	ldr	r2, [pc, #16]	@ (8001c88 <HAL_IncTick+0x24>)
 8001c76:	6013      	str	r3, [r2, #0]
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	20000008 	.word	0x20000008
 8001c88:	2000031c 	.word	0x2000031c

08001c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c90:	4b03      	ldr	r3, [pc, #12]	@ (8001ca0 <HAL_GetTick+0x14>)
 8001c92:	681b      	ldr	r3, [r3, #0]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	2000031c 	.word	0x2000031c

08001ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ccc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd6:	4a04      	ldr	r2, [pc, #16]	@ (8001ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	60d3      	str	r3, [r2, #12]
}
 8001cdc:	bf00      	nop
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf0:	4b04      	ldr	r3, [pc, #16]	@ (8001d04 <__NVIC_GetPriorityGrouping+0x18>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	0a1b      	lsrs	r3, r3, #8
 8001cf6:	f003 0307 	and.w	r3, r3, #7
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	db0b      	blt.n	8001d32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	f003 021f 	and.w	r2, r3, #31
 8001d20:	4907      	ldr	r1, [pc, #28]	@ (8001d40 <__NVIC_EnableIRQ+0x38>)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	095b      	lsrs	r3, r3, #5
 8001d28:	2001      	movs	r0, #1
 8001d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	e000e100 	.word	0xe000e100

08001d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	6039      	str	r1, [r7, #0]
 8001d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	db0a      	blt.n	8001d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	490c      	ldr	r1, [pc, #48]	@ (8001d90 <__NVIC_SetPriority+0x4c>)
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	0112      	lsls	r2, r2, #4
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	440b      	add	r3, r1
 8001d68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d6c:	e00a      	b.n	8001d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	4908      	ldr	r1, [pc, #32]	@ (8001d94 <__NVIC_SetPriority+0x50>)
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	3b04      	subs	r3, #4
 8001d7c:	0112      	lsls	r2, r2, #4
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	440b      	add	r3, r1
 8001d82:	761a      	strb	r2, [r3, #24]
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000e100 	.word	0xe000e100
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b089      	sub	sp, #36	@ 0x24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f1c3 0307 	rsb	r3, r3, #7
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	bf28      	it	cs
 8001db6:	2304      	movcs	r3, #4
 8001db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	2b06      	cmp	r3, #6
 8001dc0:	d902      	bls.n	8001dc8 <NVIC_EncodePriority+0x30>
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3b03      	subs	r3, #3
 8001dc6:	e000      	b.n	8001dca <NVIC_EncodePriority+0x32>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dcc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43da      	mvns	r2, r3
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	401a      	ands	r2, r3
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dea:	43d9      	mvns	r1, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df0:	4313      	orrs	r3, r2
         );
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3724      	adds	r7, #36	@ 0x24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e10:	d301      	bcc.n	8001e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e12:	2301      	movs	r3, #1
 8001e14:	e00f      	b.n	8001e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e16:	4a0a      	ldr	r2, [pc, #40]	@ (8001e40 <SysTick_Config+0x40>)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e1e:	210f      	movs	r1, #15
 8001e20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e24:	f7ff ff8e 	bl	8001d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e28:	4b05      	ldr	r3, [pc, #20]	@ (8001e40 <SysTick_Config+0x40>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e2e:	4b04      	ldr	r3, [pc, #16]	@ (8001e40 <SysTick_Config+0x40>)
 8001e30:	2207      	movs	r2, #7
 8001e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	e000e010 	.word	0xe000e010

08001e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff ff29 	bl	8001ca4 <__NVIC_SetPriorityGrouping>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	4603      	mov	r3, r0
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e6c:	f7ff ff3e 	bl	8001cec <__NVIC_GetPriorityGrouping>
 8001e70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	68b9      	ldr	r1, [r7, #8]
 8001e76:	6978      	ldr	r0, [r7, #20]
 8001e78:	f7ff ff8e 	bl	8001d98 <NVIC_EncodePriority>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff5d 	bl	8001d44 <__NVIC_SetPriority>
}
 8001e8a:	bf00      	nop
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	4603      	mov	r3, r0
 8001e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff31 	bl	8001d08 <__NVIC_EnableIRQ>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff ffa2 	bl	8001e00 <SysTick_Config>
 8001ebc:	4603      	mov	r3, r0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b084      	sub	sp, #16
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d005      	beq.n	8001eea <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2204      	movs	r2, #4
 8001ee2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	73fb      	strb	r3, [r7, #15]
 8001ee8:	e029      	b.n	8001f3e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 020e 	bic.w	r2, r2, #14
 8001ef8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 0201 	bic.w	r2, r2, #1
 8001f08:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0e:	f003 021c 	and.w	r2, r3, #28
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f16:	2101      	movs	r1, #1
 8001f18:	fa01 f202 	lsl.w	r2, r1, r2
 8001f1c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	4798      	blx	r3
    }
  }
  return status;
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001f56:	b2db      	uxtb	r3, r3
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b087      	sub	sp, #28
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f72:	e17f      	b.n	8002274 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	2101      	movs	r1, #1
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f80:	4013      	ands	r3, r2
 8001f82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 8171 	beq.w	800226e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d005      	beq.n	8001fa4 <HAL_GPIO_Init+0x40>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d130      	bne.n	8002006 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	2203      	movs	r2, #3
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fda:	2201      	movs	r2, #1
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	091b      	lsrs	r3, r3, #4
 8001ff0:	f003 0201 	and.w	r2, r3, #1
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	2b03      	cmp	r3, #3
 8002010:	d118      	bne.n	8002044 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002016:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002018:	2201      	movs	r2, #1
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	4013      	ands	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	08db      	lsrs	r3, r3, #3
 800202e:	f003 0201 	and.w	r2, r3, #1
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	4313      	orrs	r3, r2
 800203c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	2b03      	cmp	r3, #3
 800204e:	d017      	beq.n	8002080 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	2203      	movs	r2, #3
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	4013      	ands	r3, r2
 8002066:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	4313      	orrs	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d123      	bne.n	80020d4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	08da      	lsrs	r2, r3, #3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3208      	adds	r2, #8
 8002094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002098:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	220f      	movs	r2, #15
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	4013      	ands	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	691a      	ldr	r2, [r3, #16]
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	08da      	lsrs	r2, r3, #3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3208      	adds	r2, #8
 80020ce:	6939      	ldr	r1, [r7, #16]
 80020d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	2203      	movs	r2, #3
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4013      	ands	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0203 	and.w	r2, r3, #3
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	4313      	orrs	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 80ac 	beq.w	800226e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002116:	4b5f      	ldr	r3, [pc, #380]	@ (8002294 <HAL_GPIO_Init+0x330>)
 8002118:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800211a:	4a5e      	ldr	r2, [pc, #376]	@ (8002294 <HAL_GPIO_Init+0x330>)
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	6613      	str	r3, [r2, #96]	@ 0x60
 8002122:	4b5c      	ldr	r3, [pc, #368]	@ (8002294 <HAL_GPIO_Init+0x330>)
 8002124:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800212e:	4a5a      	ldr	r2, [pc, #360]	@ (8002298 <HAL_GPIO_Init+0x334>)
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	089b      	lsrs	r3, r3, #2
 8002134:	3302      	adds	r3, #2
 8002136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	220f      	movs	r2, #15
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43db      	mvns	r3, r3
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	4013      	ands	r3, r2
 8002150:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002158:	d025      	beq.n	80021a6 <HAL_GPIO_Init+0x242>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a4f      	ldr	r2, [pc, #316]	@ (800229c <HAL_GPIO_Init+0x338>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d01f      	beq.n	80021a2 <HAL_GPIO_Init+0x23e>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a4e      	ldr	r2, [pc, #312]	@ (80022a0 <HAL_GPIO_Init+0x33c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d019      	beq.n	800219e <HAL_GPIO_Init+0x23a>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a4d      	ldr	r2, [pc, #308]	@ (80022a4 <HAL_GPIO_Init+0x340>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d013      	beq.n	800219a <HAL_GPIO_Init+0x236>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a4c      	ldr	r2, [pc, #304]	@ (80022a8 <HAL_GPIO_Init+0x344>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d00d      	beq.n	8002196 <HAL_GPIO_Init+0x232>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a4b      	ldr	r2, [pc, #300]	@ (80022ac <HAL_GPIO_Init+0x348>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d007      	beq.n	8002192 <HAL_GPIO_Init+0x22e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a4a      	ldr	r2, [pc, #296]	@ (80022b0 <HAL_GPIO_Init+0x34c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d101      	bne.n	800218e <HAL_GPIO_Init+0x22a>
 800218a:	2306      	movs	r3, #6
 800218c:	e00c      	b.n	80021a8 <HAL_GPIO_Init+0x244>
 800218e:	2307      	movs	r3, #7
 8002190:	e00a      	b.n	80021a8 <HAL_GPIO_Init+0x244>
 8002192:	2305      	movs	r3, #5
 8002194:	e008      	b.n	80021a8 <HAL_GPIO_Init+0x244>
 8002196:	2304      	movs	r3, #4
 8002198:	e006      	b.n	80021a8 <HAL_GPIO_Init+0x244>
 800219a:	2303      	movs	r3, #3
 800219c:	e004      	b.n	80021a8 <HAL_GPIO_Init+0x244>
 800219e:	2302      	movs	r3, #2
 80021a0:	e002      	b.n	80021a8 <HAL_GPIO_Init+0x244>
 80021a2:	2301      	movs	r3, #1
 80021a4:	e000      	b.n	80021a8 <HAL_GPIO_Init+0x244>
 80021a6:	2300      	movs	r3, #0
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	f002 0203 	and.w	r2, r2, #3
 80021ae:	0092      	lsls	r2, r2, #2
 80021b0:	4093      	lsls	r3, r2
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021b8:	4937      	ldr	r1, [pc, #220]	@ (8002298 <HAL_GPIO_Init+0x334>)
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	089b      	lsrs	r3, r3, #2
 80021be:	3302      	adds	r3, #2
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021c6:	4b3b      	ldr	r3, [pc, #236]	@ (80022b4 <HAL_GPIO_Init+0x350>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	43db      	mvns	r3, r3
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	4013      	ands	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021ea:	4a32      	ldr	r2, [pc, #200]	@ (80022b4 <HAL_GPIO_Init+0x350>)
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021f0:	4b30      	ldr	r3, [pc, #192]	@ (80022b4 <HAL_GPIO_Init+0x350>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	43db      	mvns	r3, r3
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	4013      	ands	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	4313      	orrs	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002214:	4a27      	ldr	r2, [pc, #156]	@ (80022b4 <HAL_GPIO_Init+0x350>)
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800221a:	4b26      	ldr	r3, [pc, #152]	@ (80022b4 <HAL_GPIO_Init+0x350>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	43db      	mvns	r3, r3
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4013      	ands	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4313      	orrs	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800223e:	4a1d      	ldr	r2, [pc, #116]	@ (80022b4 <HAL_GPIO_Init+0x350>)
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002244:	4b1b      	ldr	r3, [pc, #108]	@ (80022b4 <HAL_GPIO_Init+0x350>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	43db      	mvns	r3, r3
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	4013      	ands	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	4313      	orrs	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002268:	4a12      	ldr	r2, [pc, #72]	@ (80022b4 <HAL_GPIO_Init+0x350>)
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	3301      	adds	r3, #1
 8002272:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	fa22 f303 	lsr.w	r3, r2, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	f47f ae78 	bne.w	8001f74 <HAL_GPIO_Init+0x10>
  }
}
 8002284:	bf00      	nop
 8002286:	bf00      	nop
 8002288:	371c      	adds	r7, #28
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	40021000 	.word	0x40021000
 8002298:	40010000 	.word	0x40010000
 800229c:	48000400 	.word	0x48000400
 80022a0:	48000800 	.word	0x48000800
 80022a4:	48000c00 	.word	0x48000c00
 80022a8:	48001000 	.word	0x48001000
 80022ac:	48001400 	.word	0x48001400
 80022b0:	48001800 	.word	0x48001800
 80022b4:	40010400 	.word	0x40010400

080022b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	460b      	mov	r3, r1
 80022c2:	807b      	strh	r3, [r7, #2]
 80022c4:	4613      	mov	r3, r2
 80022c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022c8:	787b      	ldrb	r3, [r7, #1]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022ce:	887a      	ldrh	r2, [r7, #2]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022d4:	e002      	b.n	80022dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022d6:	887a      	ldrh	r2, [r7, #2]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e08d      	b.n	8002416 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d106      	bne.n	8002314 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff f8c8 	bl	80014a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2224      	movs	r2, #36	@ 0x24
 8002318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0201 	bic.w	r2, r2, #1
 800232a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002338:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002348:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d107      	bne.n	8002362 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	e006      	b.n	8002370 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800236e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	2b02      	cmp	r3, #2
 8002376:	d108      	bne.n	800238a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002386:	605a      	str	r2, [r3, #4]
 8002388:	e007      	b.n	800239a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002398:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6812      	ldr	r2, [r2, #0]
 80023a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80023a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	691a      	ldr	r2, [r3, #16]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69d9      	ldr	r1, [r3, #28]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a1a      	ldr	r2, [r3, #32]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 0201 	orr.w	r2, r2, #1
 80023f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2220      	movs	r2, #32
 8002402:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b088      	sub	sp, #32
 8002424:	af02      	add	r7, sp, #8
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	4608      	mov	r0, r1
 800242a:	4611      	mov	r1, r2
 800242c:	461a      	mov	r2, r3
 800242e:	4603      	mov	r3, r0
 8002430:	817b      	strh	r3, [r7, #10]
 8002432:	460b      	mov	r3, r1
 8002434:	813b      	strh	r3, [r7, #8]
 8002436:	4613      	mov	r3, r2
 8002438:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b20      	cmp	r3, #32
 8002444:	f040 80f9 	bne.w	800263a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002448:	6a3b      	ldr	r3, [r7, #32]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d002      	beq.n	8002454 <HAL_I2C_Mem_Write+0x34>
 800244e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002450:	2b00      	cmp	r3, #0
 8002452:	d105      	bne.n	8002460 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800245a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e0ed      	b.n	800263c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002466:	2b01      	cmp	r3, #1
 8002468:	d101      	bne.n	800246e <HAL_I2C_Mem_Write+0x4e>
 800246a:	2302      	movs	r3, #2
 800246c:	e0e6      	b.n	800263c <HAL_I2C_Mem_Write+0x21c>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002476:	f7ff fc09 	bl	8001c8c <HAL_GetTick>
 800247a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	2319      	movs	r3, #25
 8002482:	2201      	movs	r2, #1
 8002484:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f001 f83e 	bl	800350a <I2C_WaitOnFlagUntilTimeout>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e0d1      	b.n	800263c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2221      	movs	r2, #33	@ 0x21
 800249c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2240      	movs	r2, #64	@ 0x40
 80024a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6a3a      	ldr	r2, [r7, #32]
 80024b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80024b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024c0:	88f8      	ldrh	r0, [r7, #6]
 80024c2:	893a      	ldrh	r2, [r7, #8]
 80024c4:	8979      	ldrh	r1, [r7, #10]
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	9301      	str	r3, [sp, #4]
 80024ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	4603      	mov	r3, r0
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 fb81 	bl	8002bd8 <I2C_RequestMemoryWrite>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d005      	beq.n	80024e8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e0a9      	b.n	800263c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	2bff      	cmp	r3, #255	@ 0xff
 80024f0:	d90e      	bls.n	8002510 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	22ff      	movs	r2, #255	@ 0xff
 80024f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	8979      	ldrh	r1, [r7, #10]
 8002500:	2300      	movs	r3, #0
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f001 f9c1 	bl	8003890 <I2C_TransferConfig>
 800250e:	e00f      	b.n	8002530 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002514:	b29a      	uxth	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800251e:	b2da      	uxtb	r2, r3
 8002520:	8979      	ldrh	r1, [r7, #10]
 8002522:	2300      	movs	r3, #0
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f001 f9b0 	bl	8003890 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f001 f841 	bl	80035bc <I2C_WaitOnTXISFlagUntilTimeout>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e07b      	b.n	800263c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002548:	781a      	ldrb	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002554:	1c5a      	adds	r2, r3, #1
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800255e:	b29b      	uxth	r3, r3
 8002560:	3b01      	subs	r3, #1
 8002562:	b29a      	uxth	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800256c:	3b01      	subs	r3, #1
 800256e:	b29a      	uxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002578:	b29b      	uxth	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d034      	beq.n	80025e8 <HAL_I2C_Mem_Write+0x1c8>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002582:	2b00      	cmp	r3, #0
 8002584:	d130      	bne.n	80025e8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800258c:	2200      	movs	r2, #0
 800258e:	2180      	movs	r1, #128	@ 0x80
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 ffba 	bl	800350a <I2C_WaitOnFlagUntilTimeout>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e04d      	b.n	800263c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	2bff      	cmp	r3, #255	@ 0xff
 80025a8:	d90e      	bls.n	80025c8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	22ff      	movs	r2, #255	@ 0xff
 80025ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	8979      	ldrh	r1, [r7, #10]
 80025b8:	2300      	movs	r3, #0
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f001 f965 	bl	8003890 <I2C_TransferConfig>
 80025c6:	e00f      	b.n	80025e8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	8979      	ldrh	r1, [r7, #10]
 80025da:	2300      	movs	r3, #0
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f001 f954 	bl	8003890 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d19e      	bne.n	8002530 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f001 f827 	bl	800364a <I2C_WaitOnSTOPFlagUntilTimeout>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e01a      	b.n	800263c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2220      	movs	r2, #32
 800260c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6859      	ldr	r1, [r3, #4]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	4b0a      	ldr	r3, [pc, #40]	@ (8002644 <HAL_I2C_Mem_Write+0x224>)
 800261a:	400b      	ands	r3, r1
 800261c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2220      	movs	r2, #32
 8002622:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002636:	2300      	movs	r3, #0
 8002638:	e000      	b.n	800263c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800263a:	2302      	movs	r3, #2
  }
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	fe00e800 	.word	0xfe00e800

08002648 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af02      	add	r7, sp, #8
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	4608      	mov	r0, r1
 8002652:	4611      	mov	r1, r2
 8002654:	461a      	mov	r2, r3
 8002656:	4603      	mov	r3, r0
 8002658:	817b      	strh	r3, [r7, #10]
 800265a:	460b      	mov	r3, r1
 800265c:	813b      	strh	r3, [r7, #8]
 800265e:	4613      	mov	r3, r2
 8002660:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b20      	cmp	r3, #32
 800266c:	f040 80fd 	bne.w	800286a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <HAL_I2C_Mem_Read+0x34>
 8002676:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002678:	2b00      	cmp	r3, #0
 800267a:	d105      	bne.n	8002688 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002682:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e0f1      	b.n	800286c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800268e:	2b01      	cmp	r3, #1
 8002690:	d101      	bne.n	8002696 <HAL_I2C_Mem_Read+0x4e>
 8002692:	2302      	movs	r3, #2
 8002694:	e0ea      	b.n	800286c <HAL_I2C_Mem_Read+0x224>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800269e:	f7ff faf5 	bl	8001c8c <HAL_GetTick>
 80026a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	2319      	movs	r3, #25
 80026aa:	2201      	movs	r2, #1
 80026ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 ff2a 	bl	800350a <I2C_WaitOnFlagUntilTimeout>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e0d5      	b.n	800286c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2222      	movs	r2, #34	@ 0x22
 80026c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2240      	movs	r2, #64	@ 0x40
 80026cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6a3a      	ldr	r2, [r7, #32]
 80026da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80026e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026e8:	88f8      	ldrh	r0, [r7, #6]
 80026ea:	893a      	ldrh	r2, [r7, #8]
 80026ec:	8979      	ldrh	r1, [r7, #10]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	9301      	str	r3, [sp, #4]
 80026f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	4603      	mov	r3, r0
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 fac1 	bl	8002c80 <I2C_RequestMemoryRead>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e0ad      	b.n	800286c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002714:	b29b      	uxth	r3, r3
 8002716:	2bff      	cmp	r3, #255	@ 0xff
 8002718:	d90e      	bls.n	8002738 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2201      	movs	r2, #1
 800271e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002724:	b2da      	uxtb	r2, r3
 8002726:	8979      	ldrh	r1, [r7, #10]
 8002728:	4b52      	ldr	r3, [pc, #328]	@ (8002874 <HAL_I2C_Mem_Read+0x22c>)
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f001 f8ad 	bl	8003890 <I2C_TransferConfig>
 8002736:	e00f      	b.n	8002758 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800273c:	b29a      	uxth	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002746:	b2da      	uxtb	r2, r3
 8002748:	8979      	ldrh	r1, [r7, #10]
 800274a:	4b4a      	ldr	r3, [pc, #296]	@ (8002874 <HAL_I2C_Mem_Read+0x22c>)
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f001 f89c 	bl	8003890 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800275e:	2200      	movs	r2, #0
 8002760:	2104      	movs	r1, #4
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 fed1 	bl	800350a <I2C_WaitOnFlagUntilTimeout>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e07c      	b.n	800286c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002784:	1c5a      	adds	r2, r3, #1
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800278e:	3b01      	subs	r3, #1
 8002790:	b29a      	uxth	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800279a:	b29b      	uxth	r3, r3
 800279c:	3b01      	subs	r3, #1
 800279e:	b29a      	uxth	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d034      	beq.n	8002818 <HAL_I2C_Mem_Read+0x1d0>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d130      	bne.n	8002818 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027bc:	2200      	movs	r2, #0
 80027be:	2180      	movs	r1, #128	@ 0x80
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 fea2 	bl	800350a <I2C_WaitOnFlagUntilTimeout>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e04d      	b.n	800286c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	2bff      	cmp	r3, #255	@ 0xff
 80027d8:	d90e      	bls.n	80027f8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2201      	movs	r2, #1
 80027de:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	8979      	ldrh	r1, [r7, #10]
 80027e8:	2300      	movs	r3, #0
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f001 f84d 	bl	8003890 <I2C_TransferConfig>
 80027f6:	e00f      	b.n	8002818 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002806:	b2da      	uxtb	r2, r3
 8002808:	8979      	ldrh	r1, [r7, #10]
 800280a:	2300      	movs	r3, #0
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f001 f83c 	bl	8003890 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800281c:	b29b      	uxth	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d19a      	bne.n	8002758 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 ff0f 	bl	800364a <I2C_WaitOnSTOPFlagUntilTimeout>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e01a      	b.n	800286c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2220      	movs	r2, #32
 800283c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6859      	ldr	r1, [r3, #4]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	4b0b      	ldr	r3, [pc, #44]	@ (8002878 <HAL_I2C_Mem_Read+0x230>)
 800284a:	400b      	ands	r3, r1
 800284c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2220      	movs	r2, #32
 8002852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002866:	2300      	movs	r3, #0
 8002868:	e000      	b.n	800286c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800286a:	2302      	movs	r3, #2
  }
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	80002400 	.word	0x80002400
 8002878:	fe00e800 	.word	0xfe00e800

0800287c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002898:	2b00      	cmp	r3, #0
 800289a:	d005      	beq.n	80028a8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	68f9      	ldr	r1, [r7, #12]
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	4798      	blx	r3
  }
}
 80028a8:	bf00      	nop
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00f      	beq.n	80028f2 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00a      	beq.n	80028f2 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e0:	f043 0201 	orr.w	r2, r3, #1
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028f0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00f      	beq.n	800291c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00a      	beq.n	800291c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800290a:	f043 0208 	orr.w	r2, r3, #8
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800291a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00f      	beq.n	8002946 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00a      	beq.n	8002946 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002934:	f043 0202 	orr.w	r2, r3, #2
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002944:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800294a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 030b 	and.w	r3, r3, #11
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002956:	68f9      	ldr	r1, [r7, #12]
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 fc7d 	bl	8003258 <I2C_ITError>
  }
}
 800295e:	bf00      	nop
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
 8002996:	460b      	mov	r3, r1
 8002998:	70fb      	strb	r3, [r7, #3]
 800299a:	4613      	mov	r3, r2
 800299c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b086      	sub	sp, #24
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	60f8      	str	r0, [r7, #12]
 80029ee:	60b9      	str	r1, [r7, #8]
 80029f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d101      	bne.n	8002a0a <I2C_Slave_ISR_IT+0x24>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e0e2      	b.n	8002bd0 <I2C_Slave_ISR_IT+0x1ea>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	f003 0320 	and.w	r3, r3, #32
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d009      	beq.n	8002a30 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d004      	beq.n	8002a30 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002a26:	6939      	ldr	r1, [r7, #16]
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f000 fa5d 	bl	8002ee8 <I2C_ITSlaveCplt>
 8002a2e:	e0ca      	b.n	8002bc6 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	f003 0310 	and.w	r3, r3, #16
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d04b      	beq.n	8002ad2 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d046      	beq.n	8002ad2 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d128      	bne.n	8002aa0 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b28      	cmp	r3, #40	@ 0x28
 8002a58:	d108      	bne.n	8002a6c <I2C_Slave_ISR_IT+0x86>
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a60:	d104      	bne.n	8002a6c <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002a62:	6939      	ldr	r1, [r7, #16]
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 fba3 	bl	80031b0 <I2C_ITListenCplt>
 8002a6a:	e031      	b.n	8002ad0 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b29      	cmp	r3, #41	@ 0x29
 8002a76:	d10e      	bne.n	8002a96 <I2C_Slave_ISR_IT+0xb0>
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a7e:	d00a      	beq.n	8002a96 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2210      	movs	r2, #16
 8002a86:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 fcfc 	bl	8003486 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 f9ce 	bl	8002e30 <I2C_ITSlaveSeqCplt>
 8002a94:	e01c      	b.n	8002ad0 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2210      	movs	r2, #16
 8002a9c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002a9e:	e08f      	b.n	8002bc0 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2210      	movs	r2, #16
 8002aa6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aac:	f043 0204 	orr.w	r2, r3, #4
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <I2C_Slave_ISR_IT+0xdc>
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ac0:	d17e      	bne.n	8002bc0 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 fbc5 	bl	8003258 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002ace:	e077      	b.n	8002bc0 <I2C_Slave_ISR_IT+0x1da>
 8002ad0:	e076      	b.n	8002bc0 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d02f      	beq.n	8002b3c <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d02a      	beq.n	8002b3c <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d018      	beq.n	8002b22 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d14b      	bne.n	8002bc4 <I2C_Slave_ISR_IT+0x1de>
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b32:	d047      	beq.n	8002bc4 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 f97b 	bl	8002e30 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002b3a:	e043      	b.n	8002bc4 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d009      	beq.n	8002b5a <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d004      	beq.n	8002b5a <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002b50:	6939      	ldr	r1, [r7, #16]
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 f8e8 	bl	8002d28 <I2C_ITAddrCplt>
 8002b58:	e035      	b.n	8002bc6 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d030      	beq.n	8002bc6 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d02b      	beq.n	8002bc6 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d018      	beq.n	8002baa <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b7c:	781a      	ldrb	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b88:	1c5a      	adds	r2, r3, #1
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	3b01      	subs	r3, #1
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002ba8:	e00d      	b.n	8002bc6 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bb0:	d002      	beq.n	8002bb8 <I2C_Slave_ISR_IT+0x1d2>
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d106      	bne.n	8002bc6 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f000 f939 	bl	8002e30 <I2C_ITSlaveSeqCplt>
 8002bbe:	e002      	b.n	8002bc6 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002bc0:	bf00      	nop
 8002bc2:	e000      	b.n	8002bc6 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002bc4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3718      	adds	r7, #24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af02      	add	r7, sp, #8
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	4608      	mov	r0, r1
 8002be2:	4611      	mov	r1, r2
 8002be4:	461a      	mov	r2, r3
 8002be6:	4603      	mov	r3, r0
 8002be8:	817b      	strh	r3, [r7, #10]
 8002bea:	460b      	mov	r3, r1
 8002bec:	813b      	strh	r3, [r7, #8]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002bf2:	88fb      	ldrh	r3, [r7, #6]
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	8979      	ldrh	r1, [r7, #10]
 8002bf8:	4b20      	ldr	r3, [pc, #128]	@ (8002c7c <I2C_RequestMemoryWrite+0xa4>)
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f000 fe45 	bl	8003890 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c06:	69fa      	ldr	r2, [r7, #28]
 8002c08:	69b9      	ldr	r1, [r7, #24]
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f000 fcd6 	bl	80035bc <I2C_WaitOnTXISFlagUntilTimeout>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e02c      	b.n	8002c74 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c1a:	88fb      	ldrh	r3, [r7, #6]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d105      	bne.n	8002c2c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c20:	893b      	ldrh	r3, [r7, #8]
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c2a:	e015      	b.n	8002c58 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c2c:	893b      	ldrh	r3, [r7, #8]
 8002c2e:	0a1b      	lsrs	r3, r3, #8
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c3a:	69fa      	ldr	r2, [r7, #28]
 8002c3c:	69b9      	ldr	r1, [r7, #24]
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 fcbc 	bl	80035bc <I2C_WaitOnTXISFlagUntilTimeout>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e012      	b.n	8002c74 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c4e:	893b      	ldrh	r3, [r7, #8]
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	2180      	movs	r1, #128	@ 0x80
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 fc51 	bl	800350a <I2C_WaitOnFlagUntilTimeout>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	80002000 	.word	0x80002000

08002c80 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af02      	add	r7, sp, #8
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	4608      	mov	r0, r1
 8002c8a:	4611      	mov	r1, r2
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	4603      	mov	r3, r0
 8002c90:	817b      	strh	r3, [r7, #10]
 8002c92:	460b      	mov	r3, r1
 8002c94:	813b      	strh	r3, [r7, #8]
 8002c96:	4613      	mov	r3, r2
 8002c98:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002c9a:	88fb      	ldrh	r3, [r7, #6]
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	8979      	ldrh	r1, [r7, #10]
 8002ca0:	4b20      	ldr	r3, [pc, #128]	@ (8002d24 <I2C_RequestMemoryRead+0xa4>)
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 fdf2 	bl	8003890 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cac:	69fa      	ldr	r2, [r7, #28]
 8002cae:	69b9      	ldr	r1, [r7, #24]
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f000 fc83 	bl	80035bc <I2C_WaitOnTXISFlagUntilTimeout>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e02c      	b.n	8002d1a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cc0:	88fb      	ldrh	r3, [r7, #6]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d105      	bne.n	8002cd2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cc6:	893b      	ldrh	r3, [r7, #8]
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	629a      	str	r2, [r3, #40]	@ 0x28
 8002cd0:	e015      	b.n	8002cfe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002cd2:	893b      	ldrh	r3, [r7, #8]
 8002cd4:	0a1b      	lsrs	r3, r3, #8
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ce0:	69fa      	ldr	r2, [r7, #28]
 8002ce2:	69b9      	ldr	r1, [r7, #24]
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 fc69 	bl	80035bc <I2C_WaitOnTXISFlagUntilTimeout>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e012      	b.n	8002d1a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cf4:	893b      	ldrh	r3, [r7, #8]
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	2200      	movs	r2, #0
 8002d06:	2140      	movs	r1, #64	@ 0x40
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 fbfe 	bl	800350a <I2C_WaitOnFlagUntilTimeout>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e000      	b.n	8002d1a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	80002000 	.word	0x80002000

08002d28 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002d3e:	2b28      	cmp	r3, #40	@ 0x28
 8002d40:	d16a      	bne.n	8002e18 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	0c1b      	lsrs	r3, r3, #16
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	0c1b      	lsrs	r3, r3, #16
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002d60:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d6e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002d7c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d138      	bne.n	8002df8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002d86:	897b      	ldrh	r3, [r7, #10]
 8002d88:	09db      	lsrs	r3, r3, #7
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	89bb      	ldrh	r3, [r7, #12]
 8002d8e:	4053      	eors	r3, r2
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	f003 0306 	and.w	r3, r3, #6
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d11c      	bne.n	8002dd4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002d9a:	897b      	ldrh	r3, [r7, #10]
 8002d9c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d13b      	bne.n	8002e28 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2208      	movs	r2, #8
 8002dbc:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002dc6:	89ba      	ldrh	r2, [r7, #12]
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
 8002dca:	4619      	mov	r1, r3
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f7ff fdde 	bl	800298e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002dd2:	e029      	b.n	8002e28 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002dd4:	893b      	ldrh	r3, [r7, #8]
 8002dd6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002dd8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 fd89 	bl	80038f4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002dea:	89ba      	ldrh	r2, [r7, #12]
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
 8002dee:	4619      	mov	r1, r3
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f7ff fdcc 	bl	800298e <HAL_I2C_AddrCallback>
}
 8002df6:	e017      	b.n	8002e28 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002df8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 fd79 	bl	80038f4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002e0a:	89ba      	ldrh	r2, [r7, #12]
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
 8002e0e:	4619      	mov	r1, r3
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7ff fdbc 	bl	800298e <HAL_I2C_AddrCallback>
}
 8002e16:	e007      	b.n	8002e28 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2208      	movs	r2, #8
 8002e1e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002e28:	bf00      	nop
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d008      	beq.n	8002e64 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	e00c      	b.n	8002e7e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d007      	beq.n	8002e7e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e7c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b29      	cmp	r3, #41	@ 0x29
 8002e88:	d112      	bne.n	8002eb0 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2228      	movs	r2, #40	@ 0x28
 8002e8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2221      	movs	r2, #33	@ 0x21
 8002e96:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002e98:	2101      	movs	r1, #1
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 fd2a 	bl	80038f4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f7ff fd5c 	bl	8002966 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002eae:	e017      	b.n	8002ee0 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8002eba:	d111      	bne.n	8002ee0 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2228      	movs	r2, #40	@ 0x28
 8002ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2222      	movs	r2, #34	@ 0x22
 8002ec8:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002eca:	2102      	movs	r1, #2
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 fd11 	bl	80038f4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7ff fd4d 	bl	800297a <HAL_I2C_SlaveRxCpltCallback>
}
 8002ee0:	bf00      	nop
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f02:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f0a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2220      	movs	r2, #32
 8002f12:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002f14:	7afb      	ldrb	r3, [r7, #11]
 8002f16:	2b21      	cmp	r3, #33	@ 0x21
 8002f18:	d002      	beq.n	8002f20 <I2C_ITSlaveCplt+0x38>
 8002f1a:	7afb      	ldrb	r3, [r7, #11]
 8002f1c:	2b29      	cmp	r3, #41	@ 0x29
 8002f1e:	d108      	bne.n	8002f32 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002f20:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 fce5 	bl	80038f4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2221      	movs	r2, #33	@ 0x21
 8002f2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f30:	e019      	b.n	8002f66 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002f32:	7afb      	ldrb	r3, [r7, #11]
 8002f34:	2b22      	cmp	r3, #34	@ 0x22
 8002f36:	d002      	beq.n	8002f3e <I2C_ITSlaveCplt+0x56>
 8002f38:	7afb      	ldrb	r3, [r7, #11]
 8002f3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f3c:	d108      	bne.n	8002f50 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002f3e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 fcd6 	bl	80038f4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2222      	movs	r2, #34	@ 0x22
 8002f4c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f4e:	e00a      	b.n	8002f66 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002f50:	7afb      	ldrb	r3, [r7, #11]
 8002f52:	2b28      	cmp	r3, #40	@ 0x28
 8002f54:	d107      	bne.n	8002f66 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002f56:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 fcca 	bl	80038f4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f74:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6859      	ldr	r1, [r3, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	4b89      	ldr	r3, [pc, #548]	@ (80031a8 <I2C_ITSlaveCplt+0x2c0>)
 8002f82:	400b      	ands	r3, r1
 8002f84:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 fa7d 	bl	8003486 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d013      	beq.n	8002fbe <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002fa4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d01f      	beq.n	8002fee <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002fbc:	e017      	b.n	8002fee <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d012      	beq.n	8002fee <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fd6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d006      	beq.n	8002fee <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d020      	beq.n	800303a <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	f023 0304 	bic.w	r3, r3, #4
 8002ffe:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003012:	1c5a      	adds	r2, r3, #1
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00c      	beq.n	800303a <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003024:	3b01      	subs	r3, #1
 8003026:	b29a      	uxth	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003030:	b29b      	uxth	r3, r3
 8003032:	3b01      	subs	r3, #1
 8003034:	b29a      	uxth	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800303e:	b29b      	uxth	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	d005      	beq.n	8003050 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003048:	f043 0204 	orr.w	r2, r3, #4
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	f003 0310 	and.w	r3, r3, #16
 8003056:	2b00      	cmp	r3, #0
 8003058:	d049      	beq.n	80030ee <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003060:	2b00      	cmp	r3, #0
 8003062:	d044      	beq.n	80030ee <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003068:	b29b      	uxth	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d128      	bne.n	80030c0 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b28      	cmp	r3, #40	@ 0x28
 8003078:	d108      	bne.n	800308c <I2C_ITSlaveCplt+0x1a4>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003080:	d104      	bne.n	800308c <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003082:	6979      	ldr	r1, [r7, #20]
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f893 	bl	80031b0 <I2C_ITListenCplt>
 800308a:	e030      	b.n	80030ee <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b29      	cmp	r3, #41	@ 0x29
 8003096:	d10e      	bne.n	80030b6 <I2C_ITSlaveCplt+0x1ce>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800309e:	d00a      	beq.n	80030b6 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2210      	movs	r2, #16
 80030a6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 f9ec 	bl	8003486 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7ff febe 	bl	8002e30 <I2C_ITSlaveSeqCplt>
 80030b4:	e01b      	b.n	80030ee <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2210      	movs	r2, #16
 80030bc:	61da      	str	r2, [r3, #28]
 80030be:	e016      	b.n	80030ee <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2210      	movs	r2, #16
 80030c6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030cc:	f043 0204 	orr.w	r2, r3, #4
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <I2C_ITSlaveCplt+0x1fa>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030e0:	d105      	bne.n	80030ee <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e6:	4619      	mov	r1, r3
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 f8b5 	bl	8003258 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003100:	2b00      	cmp	r3, #0
 8003102:	d010      	beq.n	8003126 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003108:	4619      	mov	r1, r3
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f8a4 	bl	8003258 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b28      	cmp	r3, #40	@ 0x28
 800311a:	d141      	bne.n	80031a0 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800311c:	6979      	ldr	r1, [r7, #20]
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f846 	bl	80031b0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003124:	e03c      	b.n	80031a0 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800312a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800312e:	d014      	beq.n	800315a <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7ff fe7d 	bl	8002e30 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a1c      	ldr	r2, [pc, #112]	@ (80031ac <I2C_ITSlaveCplt+0x2c4>)
 800313a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2220      	movs	r2, #32
 8003140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7ff fc29 	bl	80029aa <HAL_I2C_ListenCpltCallback>
}
 8003158:	e022      	b.n	80031a0 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b22      	cmp	r3, #34	@ 0x22
 8003164:	d10e      	bne.n	8003184 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2220      	movs	r2, #32
 800316a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7ff fbfc 	bl	800297a <HAL_I2C_SlaveRxCpltCallback>
}
 8003182:	e00d      	b.n	80031a0 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2220      	movs	r2, #32
 8003188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7ff fbe3 	bl	8002966 <HAL_I2C_SlaveTxCpltCallback>
}
 80031a0:	bf00      	nop
 80031a2:	3718      	adds	r7, #24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	fe00e800 	.word	0xfe00e800
 80031ac:	ffff0000 	.word	0xffff0000

080031b0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a25      	ldr	r2, [pc, #148]	@ (8003254 <I2C_ITListenCplt+0xa4>)
 80031be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2220      	movs	r2, #32
 80031ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d022      	beq.n	800322c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f0:	b2d2      	uxtb	r2, r2
 80031f2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f8:	1c5a      	adds	r2, r3, #1
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003202:	2b00      	cmp	r3, #0
 8003204:	d012      	beq.n	800322c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800320a:	3b01      	subs	r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003216:	b29b      	uxth	r3, r3
 8003218:	3b01      	subs	r3, #1
 800321a:	b29a      	uxth	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003224:	f043 0204 	orr.w	r2, r3, #4
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800322c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 fb5f 	bl	80038f4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2210      	movs	r2, #16
 800323c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7ff fbaf 	bl	80029aa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800324c:	bf00      	nop
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	ffff0000 	.word	0xffff0000

08003258 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003268:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a6d      	ldr	r2, [pc, #436]	@ (800342c <I2C_ITError+0x1d4>)
 8003276:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	431a      	orrs	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800328a:	7bfb      	ldrb	r3, [r7, #15]
 800328c:	2b28      	cmp	r3, #40	@ 0x28
 800328e:	d005      	beq.n	800329c <I2C_ITError+0x44>
 8003290:	7bfb      	ldrb	r3, [r7, #15]
 8003292:	2b29      	cmp	r3, #41	@ 0x29
 8003294:	d002      	beq.n	800329c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	2b2a      	cmp	r3, #42	@ 0x2a
 800329a:	d10b      	bne.n	80032b4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800329c:	2103      	movs	r1, #3
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 fb28 	bl	80038f4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2228      	movs	r2, #40	@ 0x28
 80032a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a60      	ldr	r2, [pc, #384]	@ (8003430 <I2C_ITError+0x1d8>)
 80032b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80032b2:	e030      	b.n	8003316 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80032b4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 fb1b 	bl	80038f4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f8e1 	bl	8003486 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b60      	cmp	r3, #96	@ 0x60
 80032ce:	d01f      	beq.n	8003310 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	f003 0320 	and.w	r3, r3, #32
 80032e2:	2b20      	cmp	r3, #32
 80032e4:	d114      	bne.n	8003310 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	f003 0310 	and.w	r3, r3, #16
 80032f0:	2b10      	cmp	r3, #16
 80032f2:	d109      	bne.n	8003308 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2210      	movs	r2, #16
 80032fa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003300:	f043 0204 	orr.w	r2, r3, #4
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2220      	movs	r2, #32
 800330e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003320:	2b00      	cmp	r3, #0
 8003322:	d039      	beq.n	8003398 <I2C_ITError+0x140>
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2b11      	cmp	r3, #17
 8003328:	d002      	beq.n	8003330 <I2C_ITError+0xd8>
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	2b21      	cmp	r3, #33	@ 0x21
 800332e:	d133      	bne.n	8003398 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800333a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800333e:	d107      	bne.n	8003350 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800334e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003354:	4618      	mov	r0, r3
 8003356:	f7fe fdf7 	bl	8001f48 <HAL_DMA_GetState>
 800335a:	4603      	mov	r3, r0
 800335c:	2b01      	cmp	r3, #1
 800335e:	d017      	beq.n	8003390 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003364:	4a33      	ldr	r2, [pc, #204]	@ (8003434 <I2C_ITError+0x1dc>)
 8003366:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003374:	4618      	mov	r0, r3
 8003376:	f7fe fda6 	bl	8001ec6 <HAL_DMA_Abort_IT>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d04d      	beq.n	800341c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800338a:	4610      	mov	r0, r2
 800338c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800338e:	e045      	b.n	800341c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f851 	bl	8003438 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003396:	e041      	b.n	800341c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800339c:	2b00      	cmp	r3, #0
 800339e:	d039      	beq.n	8003414 <I2C_ITError+0x1bc>
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2b12      	cmp	r3, #18
 80033a4:	d002      	beq.n	80033ac <I2C_ITError+0x154>
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2b22      	cmp	r3, #34	@ 0x22
 80033aa:	d133      	bne.n	8003414 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033ba:	d107      	bne.n	80033cc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033ca:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7fe fdb9 	bl	8001f48 <HAL_DMA_GetState>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d017      	beq.n	800340c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e0:	4a14      	ldr	r2, [pc, #80]	@ (8003434 <I2C_ITError+0x1dc>)
 80033e2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7fe fd68 	bl	8001ec6 <HAL_DMA_Abort_IT>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d011      	beq.n	8003420 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003406:	4610      	mov	r0, r2
 8003408:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800340a:	e009      	b.n	8003420 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f813 	bl	8003438 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003412:	e005      	b.n	8003420 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 f80f 	bl	8003438 <I2C_TreatErrorCallback>
  }
}
 800341a:	e002      	b.n	8003422 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800341c:	bf00      	nop
 800341e:	e000      	b.n	8003422 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003420:	bf00      	nop
}
 8003422:	bf00      	nop
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	ffff0000 	.word	0xffff0000
 8003430:	080029e7 	.word	0x080029e7
 8003434:	080034cf 	.word	0x080034cf

08003438 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b60      	cmp	r3, #96	@ 0x60
 800344a:	d10e      	bne.n	800346a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7ff fab5 	bl	80029d2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003468:	e009      	b.n	800347e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f7ff faa0 	bl	80029be <HAL_I2C_ErrorCallback>
}
 800347e:	bf00      	nop
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003486:	b480      	push	{r7}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b02      	cmp	r3, #2
 800349a:	d103      	bne.n	80034a4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2200      	movs	r2, #0
 80034a2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d007      	beq.n	80034c2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	699a      	ldr	r2, [r3, #24]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f042 0201 	orr.w	r2, r2, #1
 80034c0:	619a      	str	r2, [r3, #24]
  }
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b084      	sub	sp, #16
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034da:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e8:	2200      	movs	r2, #0
 80034ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f8:	2200      	movs	r2, #0
 80034fa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f7ff ff9b 	bl	8003438 <I2C_TreatErrorCallback>
}
 8003502:	bf00      	nop
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b084      	sub	sp, #16
 800350e:	af00      	add	r7, sp, #0
 8003510:	60f8      	str	r0, [r7, #12]
 8003512:	60b9      	str	r1, [r7, #8]
 8003514:	603b      	str	r3, [r7, #0]
 8003516:	4613      	mov	r3, r2
 8003518:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800351a:	e03b      	b.n	8003594 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	6839      	ldr	r1, [r7, #0]
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 f8d5 	bl	80036d0 <I2C_IsErrorOccurred>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e041      	b.n	80035b4 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003536:	d02d      	beq.n	8003594 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003538:	f7fe fba8 	bl	8001c8c <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	429a      	cmp	r2, r3
 8003546:	d302      	bcc.n	800354e <I2C_WaitOnFlagUntilTimeout+0x44>
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d122      	bne.n	8003594 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	699a      	ldr	r2, [r3, #24]
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	4013      	ands	r3, r2
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	429a      	cmp	r2, r3
 800355c:	bf0c      	ite	eq
 800355e:	2301      	moveq	r3, #1
 8003560:	2300      	movne	r3, #0
 8003562:	b2db      	uxtb	r3, r3
 8003564:	461a      	mov	r2, r3
 8003566:	79fb      	ldrb	r3, [r7, #7]
 8003568:	429a      	cmp	r2, r3
 800356a:	d113      	bne.n	8003594 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003570:	f043 0220 	orr.w	r2, r3, #32
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2220      	movs	r2, #32
 800357c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e00f      	b.n	80035b4 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	699a      	ldr	r2, [r3, #24]
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	4013      	ands	r3, r2
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	bf0c      	ite	eq
 80035a4:	2301      	moveq	r3, #1
 80035a6:	2300      	movne	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	461a      	mov	r2, r3
 80035ac:	79fb      	ldrb	r3, [r7, #7]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d0b4      	beq.n	800351c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035c8:	e033      	b.n	8003632 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	68b9      	ldr	r1, [r7, #8]
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 f87e 	bl	80036d0 <I2C_IsErrorOccurred>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e031      	b.n	8003642 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035e4:	d025      	beq.n	8003632 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e6:	f7fe fb51 	bl	8001c8c <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d302      	bcc.n	80035fc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d11a      	bne.n	8003632 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b02      	cmp	r3, #2
 8003608:	d013      	beq.n	8003632 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800360e:	f043 0220 	orr.w	r2, r3, #32
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2220      	movs	r2, #32
 800361a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e007      	b.n	8003642 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b02      	cmp	r3, #2
 800363e:	d1c4      	bne.n	80035ca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b084      	sub	sp, #16
 800364e:	af00      	add	r7, sp, #0
 8003650:	60f8      	str	r0, [r7, #12]
 8003652:	60b9      	str	r1, [r7, #8]
 8003654:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003656:	e02f      	b.n	80036b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	68b9      	ldr	r1, [r7, #8]
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 f837 	bl	80036d0 <I2C_IsErrorOccurred>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e02d      	b.n	80036c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800366c:	f7fe fb0e 	bl	8001c8c <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	429a      	cmp	r2, r3
 800367a:	d302      	bcc.n	8003682 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d11a      	bne.n	80036b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	f003 0320 	and.w	r3, r3, #32
 800368c:	2b20      	cmp	r3, #32
 800368e:	d013      	beq.n	80036b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003694:	f043 0220 	orr.w	r2, r3, #32
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2220      	movs	r2, #32
 80036a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e007      	b.n	80036c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	f003 0320 	and.w	r3, r3, #32
 80036c2:	2b20      	cmp	r3, #32
 80036c4:	d1c8      	bne.n	8003658 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08a      	sub	sp, #40	@ 0x28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036dc:	2300      	movs	r3, #0
 80036de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80036ea:	2300      	movs	r3, #0
 80036ec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	f003 0310 	and.w	r3, r3, #16
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d068      	beq.n	80037ce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2210      	movs	r2, #16
 8003702:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003704:	e049      	b.n	800379a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800370c:	d045      	beq.n	800379a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800370e:	f7fe fabd 	bl	8001c8c <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	429a      	cmp	r2, r3
 800371c:	d302      	bcc.n	8003724 <I2C_IsErrorOccurred+0x54>
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d13a      	bne.n	800379a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800372e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003736:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003742:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003746:	d121      	bne.n	800378c <I2C_IsErrorOccurred+0xbc>
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800374e:	d01d      	beq.n	800378c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003750:	7cfb      	ldrb	r3, [r7, #19]
 8003752:	2b20      	cmp	r3, #32
 8003754:	d01a      	beq.n	800378c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003764:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003766:	f7fe fa91 	bl	8001c8c <HAL_GetTick>
 800376a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800376c:	e00e      	b.n	800378c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800376e:	f7fe fa8d 	bl	8001c8c <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b19      	cmp	r3, #25
 800377a:	d907      	bls.n	800378c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	f043 0320 	orr.w	r3, r3, #32
 8003782:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800378a:	e006      	b.n	800379a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	f003 0320 	and.w	r3, r3, #32
 8003796:	2b20      	cmp	r3, #32
 8003798:	d1e9      	bne.n	800376e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	f003 0320 	and.w	r3, r3, #32
 80037a4:	2b20      	cmp	r3, #32
 80037a6:	d003      	beq.n	80037b0 <I2C_IsErrorOccurred+0xe0>
 80037a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0aa      	beq.n	8003706 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80037b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d103      	bne.n	80037c0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2220      	movs	r2, #32
 80037be:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	f043 0304 	orr.w	r3, r3, #4
 80037c6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00b      	beq.n	80037f8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	f043 0301 	orr.w	r3, r3, #1
 80037e6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80037f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00b      	beq.n	800381a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003802:	6a3b      	ldr	r3, [r7, #32]
 8003804:	f043 0308 	orr.w	r3, r3, #8
 8003808:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003812:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00b      	beq.n	800383c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	f043 0302 	orr.w	r3, r3, #2
 800382a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003834:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800383c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003840:	2b00      	cmp	r3, #0
 8003842:	d01c      	beq.n	800387e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f7ff fe1e 	bl	8003486 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6859      	ldr	r1, [r3, #4]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	4b0d      	ldr	r3, [pc, #52]	@ (800388c <I2C_IsErrorOccurred+0x1bc>)
 8003856:	400b      	ands	r3, r1
 8003858:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	431a      	orrs	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2220      	movs	r2, #32
 800386a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800387e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003882:	4618      	mov	r0, r3
 8003884:	3728      	adds	r7, #40	@ 0x28
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	fe00e800 	.word	0xfe00e800

08003890 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003890:	b480      	push	{r7}
 8003892:	b087      	sub	sp, #28
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	607b      	str	r3, [r7, #4]
 800389a:	460b      	mov	r3, r1
 800389c:	817b      	strh	r3, [r7, #10]
 800389e:	4613      	mov	r3, r2
 80038a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038a2:	897b      	ldrh	r3, [r7, #10]
 80038a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038a8:	7a7b      	ldrb	r3, [r7, #9]
 80038aa:	041b      	lsls	r3, r3, #16
 80038ac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038b0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80038be:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	0d5b      	lsrs	r3, r3, #21
 80038ca:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80038ce:	4b08      	ldr	r3, [pc, #32]	@ (80038f0 <I2C_TransferConfig+0x60>)
 80038d0:	430b      	orrs	r3, r1
 80038d2:	43db      	mvns	r3, r3
 80038d4:	ea02 0103 	and.w	r1, r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	430a      	orrs	r2, r1
 80038e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80038e2:	bf00      	nop
 80038e4:	371c      	adds	r7, #28
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	03ff63ff 	.word	0x03ff63ff

080038f4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003900:	2300      	movs	r3, #0
 8003902:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003904:	887b      	ldrh	r3, [r7, #2]
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00f      	beq.n	800392e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003914:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800391c:	b2db      	uxtb	r3, r3
 800391e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003922:	2b28      	cmp	r3, #40	@ 0x28
 8003924:	d003      	beq.n	800392e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800392c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800392e:	887b      	ldrh	r3, [r7, #2]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00f      	beq.n	8003958 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800393e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003946:	b2db      	uxtb	r3, r3
 8003948:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800394c:	2b28      	cmp	r3, #40	@ 0x28
 800394e:	d003      	beq.n	8003958 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003956:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003958:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800395c:	2b00      	cmp	r3, #0
 800395e:	da03      	bge.n	8003968 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003966:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003968:	887b      	ldrh	r3, [r7, #2]
 800396a:	2b10      	cmp	r3, #16
 800396c:	d103      	bne.n	8003976 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003974:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003976:	887b      	ldrh	r3, [r7, #2]
 8003978:	2b20      	cmp	r3, #32
 800397a:	d103      	bne.n	8003984 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f043 0320 	orr.w	r3, r3, #32
 8003982:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003984:	887b      	ldrh	r3, [r7, #2]
 8003986:	2b40      	cmp	r3, #64	@ 0x40
 8003988:	d103      	bne.n	8003992 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003990:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6819      	ldr	r1, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	43da      	mvns	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	400a      	ands	r2, r1
 80039a2:	601a      	str	r2, [r3, #0]
}
 80039a4:	bf00      	nop
 80039a6:	3714      	adds	r7, #20
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b20      	cmp	r3, #32
 80039c4:	d138      	bne.n	8003a38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80039d0:	2302      	movs	r3, #2
 80039d2:	e032      	b.n	8003a3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2224      	movs	r2, #36	@ 0x24
 80039e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 0201 	bic.w	r2, r2, #1
 80039f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003a02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6819      	ldr	r1, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f042 0201 	orr.w	r2, r2, #1
 8003a22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2220      	movs	r2, #32
 8003a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	e000      	b.n	8003a3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a38:	2302      	movs	r3, #2
  }
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b085      	sub	sp, #20
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
 8003a4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2b20      	cmp	r3, #32
 8003a5a:	d139      	bne.n	8003ad0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d101      	bne.n	8003a6a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a66:	2302      	movs	r3, #2
 8003a68:	e033      	b.n	8003ad2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2224      	movs	r2, #36	@ 0x24
 8003a76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0201 	bic.w	r2, r2, #1
 8003a88:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003a98:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	021b      	lsls	r3, r3, #8
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f042 0201 	orr.w	r2, r2, #1
 8003aba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003acc:	2300      	movs	r3, #0
 8003ace:	e000      	b.n	8003ad2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ad0:	2302      	movs	r3, #2
  }
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
	...

08003ae0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003ae4:	4b04      	ldr	r3, [pc, #16]	@ (8003af8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	40007000 	.word	0x40007000

08003afc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b0a:	d130      	bne.n	8003b6e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b0c:	4b23      	ldr	r3, [pc, #140]	@ (8003b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003b14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b18:	d038      	beq.n	8003b8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b1a:	4b20      	ldr	r3, [pc, #128]	@ (8003b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b22:	4a1e      	ldr	r2, [pc, #120]	@ (8003b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b24:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b28:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b2a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ba0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2232      	movs	r2, #50	@ 0x32
 8003b30:	fb02 f303 	mul.w	r3, r2, r3
 8003b34:	4a1b      	ldr	r2, [pc, #108]	@ (8003ba4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003b36:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3a:	0c9b      	lsrs	r3, r3, #18
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b40:	e002      	b.n	8003b48 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	3b01      	subs	r3, #1
 8003b46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b48:	4b14      	ldr	r3, [pc, #80]	@ (8003b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b54:	d102      	bne.n	8003b5c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1f2      	bne.n	8003b42 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8003b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b68:	d110      	bne.n	8003b8c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e00f      	b.n	8003b8e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003b76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b7a:	d007      	beq.n	8003b8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b7c:	4b07      	ldr	r3, [pc, #28]	@ (8003b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b84:	4a05      	ldr	r2, [pc, #20]	@ (8003b9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b8a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3714      	adds	r7, #20
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	40007000 	.word	0x40007000
 8003ba0:	20000000 	.word	0x20000000
 8003ba4:	431bde83 	.word	0x431bde83

08003ba8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b088      	sub	sp, #32
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e3ca      	b.n	8004350 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bba:	4b97      	ldr	r3, [pc, #604]	@ (8003e18 <HAL_RCC_OscConfig+0x270>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 030c 	and.w	r3, r3, #12
 8003bc2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bc4:	4b94      	ldr	r3, [pc, #592]	@ (8003e18 <HAL_RCC_OscConfig+0x270>)
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f003 0303 	and.w	r3, r3, #3
 8003bcc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0310 	and.w	r3, r3, #16
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 80e4 	beq.w	8003da4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d007      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x4a>
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	2b0c      	cmp	r3, #12
 8003be6:	f040 808b 	bne.w	8003d00 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	f040 8087 	bne.w	8003d00 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bf2:	4b89      	ldr	r3, [pc, #548]	@ (8003e18 <HAL_RCC_OscConfig+0x270>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d005      	beq.n	8003c0a <HAL_RCC_OscConfig+0x62>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e3a2      	b.n	8004350 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1a      	ldr	r2, [r3, #32]
 8003c0e:	4b82      	ldr	r3, [pc, #520]	@ (8003e18 <HAL_RCC_OscConfig+0x270>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d004      	beq.n	8003c24 <HAL_RCC_OscConfig+0x7c>
 8003c1a:	4b7f      	ldr	r3, [pc, #508]	@ (8003e18 <HAL_RCC_OscConfig+0x270>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c22:	e005      	b.n	8003c30 <HAL_RCC_OscConfig+0x88>
 8003c24:	4b7c      	ldr	r3, [pc, #496]	@ (8003e18 <HAL_RCC_OscConfig+0x270>)
 8003c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c2a:	091b      	lsrs	r3, r3, #4
 8003c2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d223      	bcs.n	8003c7c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 fd55 	bl	80046e8 <RCC_SetFlashLatencyFromMSIRange>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e383      	b.n	8004350 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c48:	4b73      	ldr	r3, [pc, #460]	@ (8003e18 <HAL_RCC_OscConfig+0x270>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a72      	ldr	r2, [pc, #456]	@ (8003e18 <HAL_RCC_OscConfig+0x270>)
 8003c4e:	f043 0308 	orr.w	r3, r3, #8
 8003c52:	6013      	str	r3, [r2, #0]
 8003c54:	4b70      	ldr	r3, [pc, #448]	@ (8003e18 <HAL_RCC_OscConfig+0x270>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	496d      	ldr	r1, [pc, #436]	@ (8003e18 <HAL_RCC_OscConfig+0x270>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c66:	4b6c      	ldr	r3, [pc, #432]	@ (8003e18 <HAL_RCC_OscConfig+0x270>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	021b      	lsls	r3, r3, #8
 8003c74:	4968      	ldr	r1, [pc, #416]	@ (8003e18 <HAL_RCC_OscConfig+0x270>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	604b      	str	r3, [r1, #4]
 8003c7a:	e025      	b.n	8003cc8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c7c:	4b66      	ldr	r3, [pc, #408]	@ (8003e18 <HAL_RCC_OscConfig+0x270>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a65      	ldr	r2, [pc, #404]	@ (8003e18 <HAL_RCC_OscConfig+0x270>)
 8003c82:	f043 0308 	orr.w	r3, r3, #8
 8003c86:	6013      	str	r3, [r2, #0]
 8003c88:	4b63      	ldr	r3, [pc, #396]	@ (8003e18 <HAL_RCC_OscConfig+0x270>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	4960      	ldr	r1, [pc, #384]	@ (8003e18 <HAL_RCC_OscConfig+0x270>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c9a:	4b5f      	ldr	r3, [pc, #380]	@ (8003e18 <HAL_RCC_OscConfig+0x270>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	021b      	lsls	r3, r3, #8
 8003ca8:	495b      	ldr	r1, [pc, #364]	@ (8003e18 <HAL_RCC_OscConfig+0x270>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d109      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 fd15 	bl	80046e8 <RCC_SetFlashLatencyFromMSIRange>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e343      	b.n	8004350 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cc8:	f000 fc4a 	bl	8004560 <HAL_RCC_GetSysClockFreq>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	4b52      	ldr	r3, [pc, #328]	@ (8003e18 <HAL_RCC_OscConfig+0x270>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	091b      	lsrs	r3, r3, #4
 8003cd4:	f003 030f 	and.w	r3, r3, #15
 8003cd8:	4950      	ldr	r1, [pc, #320]	@ (8003e1c <HAL_RCC_OscConfig+0x274>)
 8003cda:	5ccb      	ldrb	r3, [r1, r3]
 8003cdc:	f003 031f 	and.w	r3, r3, #31
 8003ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce4:	4a4e      	ldr	r2, [pc, #312]	@ (8003e20 <HAL_RCC_OscConfig+0x278>)
 8003ce6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ce8:	4b4e      	ldr	r3, [pc, #312]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fd ff7d 	bl	8001bec <HAL_InitTick>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003cf6:	7bfb      	ldrb	r3, [r7, #15]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d052      	beq.n	8003da2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
 8003cfe:	e327      	b.n	8004350 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d032      	beq.n	8003d6e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d08:	4b43      	ldr	r3, [pc, #268]	@ (8003e18 <HAL_RCC_OscConfig+0x270>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a42      	ldr	r2, [pc, #264]	@ (8003e18 <HAL_RCC_OscConfig+0x270>)
 8003d0e:	f043 0301 	orr.w	r3, r3, #1
 8003d12:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d14:	f7fd ffba 	bl	8001c8c <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d1c:	f7fd ffb6 	bl	8001c8c <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e310      	b.n	8004350 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d2e:	4b3a      	ldr	r3, [pc, #232]	@ (8003e18 <HAL_RCC_OscConfig+0x270>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0f0      	beq.n	8003d1c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d3a:	4b37      	ldr	r3, [pc, #220]	@ (8003e18 <HAL_RCC_OscConfig+0x270>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a36      	ldr	r2, [pc, #216]	@ (8003e18 <HAL_RCC_OscConfig+0x270>)
 8003d40:	f043 0308 	orr.w	r3, r3, #8
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	4b34      	ldr	r3, [pc, #208]	@ (8003e18 <HAL_RCC_OscConfig+0x270>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	4931      	ldr	r1, [pc, #196]	@ (8003e18 <HAL_RCC_OscConfig+0x270>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d58:	4b2f      	ldr	r3, [pc, #188]	@ (8003e18 <HAL_RCC_OscConfig+0x270>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	021b      	lsls	r3, r3, #8
 8003d66:	492c      	ldr	r1, [pc, #176]	@ (8003e18 <HAL_RCC_OscConfig+0x270>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	604b      	str	r3, [r1, #4]
 8003d6c:	e01a      	b.n	8003da4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d6e:	4b2a      	ldr	r3, [pc, #168]	@ (8003e18 <HAL_RCC_OscConfig+0x270>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a29      	ldr	r2, [pc, #164]	@ (8003e18 <HAL_RCC_OscConfig+0x270>)
 8003d74:	f023 0301 	bic.w	r3, r3, #1
 8003d78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d7a:	f7fd ff87 	bl	8001c8c <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d80:	e008      	b.n	8003d94 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d82:	f7fd ff83 	bl	8001c8c <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e2dd      	b.n	8004350 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d94:	4b20      	ldr	r3, [pc, #128]	@ (8003e18 <HAL_RCC_OscConfig+0x270>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1f0      	bne.n	8003d82 <HAL_RCC_OscConfig+0x1da>
 8003da0:	e000      	b.n	8003da4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003da2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d074      	beq.n	8003e9a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	2b08      	cmp	r3, #8
 8003db4:	d005      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x21a>
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	2b0c      	cmp	r3, #12
 8003dba:	d10e      	bne.n	8003dda <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	2b03      	cmp	r3, #3
 8003dc0:	d10b      	bne.n	8003dda <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc2:	4b15      	ldr	r3, [pc, #84]	@ (8003e18 <HAL_RCC_OscConfig+0x270>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d064      	beq.n	8003e98 <HAL_RCC_OscConfig+0x2f0>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d160      	bne.n	8003e98 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e2ba      	b.n	8004350 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003de2:	d106      	bne.n	8003df2 <HAL_RCC_OscConfig+0x24a>
 8003de4:	4b0c      	ldr	r3, [pc, #48]	@ (8003e18 <HAL_RCC_OscConfig+0x270>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a0b      	ldr	r2, [pc, #44]	@ (8003e18 <HAL_RCC_OscConfig+0x270>)
 8003dea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dee:	6013      	str	r3, [r2, #0]
 8003df0:	e026      	b.n	8003e40 <HAL_RCC_OscConfig+0x298>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003dfa:	d115      	bne.n	8003e28 <HAL_RCC_OscConfig+0x280>
 8003dfc:	4b06      	ldr	r3, [pc, #24]	@ (8003e18 <HAL_RCC_OscConfig+0x270>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a05      	ldr	r2, [pc, #20]	@ (8003e18 <HAL_RCC_OscConfig+0x270>)
 8003e02:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e06:	6013      	str	r3, [r2, #0]
 8003e08:	4b03      	ldr	r3, [pc, #12]	@ (8003e18 <HAL_RCC_OscConfig+0x270>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a02      	ldr	r2, [pc, #8]	@ (8003e18 <HAL_RCC_OscConfig+0x270>)
 8003e0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e12:	6013      	str	r3, [r2, #0]
 8003e14:	e014      	b.n	8003e40 <HAL_RCC_OscConfig+0x298>
 8003e16:	bf00      	nop
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	0800b040 	.word	0x0800b040
 8003e20:	20000000 	.word	0x20000000
 8003e24:	20000004 	.word	0x20000004
 8003e28:	4ba0      	ldr	r3, [pc, #640]	@ (80040ac <HAL_RCC_OscConfig+0x504>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a9f      	ldr	r2, [pc, #636]	@ (80040ac <HAL_RCC_OscConfig+0x504>)
 8003e2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e32:	6013      	str	r3, [r2, #0]
 8003e34:	4b9d      	ldr	r3, [pc, #628]	@ (80040ac <HAL_RCC_OscConfig+0x504>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a9c      	ldr	r2, [pc, #624]	@ (80040ac <HAL_RCC_OscConfig+0x504>)
 8003e3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d013      	beq.n	8003e70 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e48:	f7fd ff20 	bl	8001c8c <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e50:	f7fd ff1c 	bl	8001c8c <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b64      	cmp	r3, #100	@ 0x64
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e276      	b.n	8004350 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e62:	4b92      	ldr	r3, [pc, #584]	@ (80040ac <HAL_RCC_OscConfig+0x504>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0f0      	beq.n	8003e50 <HAL_RCC_OscConfig+0x2a8>
 8003e6e:	e014      	b.n	8003e9a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e70:	f7fd ff0c 	bl	8001c8c <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e78:	f7fd ff08 	bl	8001c8c <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b64      	cmp	r3, #100	@ 0x64
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e262      	b.n	8004350 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e8a:	4b88      	ldr	r3, [pc, #544]	@ (80040ac <HAL_RCC_OscConfig+0x504>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1f0      	bne.n	8003e78 <HAL_RCC_OscConfig+0x2d0>
 8003e96:	e000      	b.n	8003e9a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d060      	beq.n	8003f68 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	2b04      	cmp	r3, #4
 8003eaa:	d005      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x310>
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	2b0c      	cmp	r3, #12
 8003eb0:	d119      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d116      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003eb8:	4b7c      	ldr	r3, [pc, #496]	@ (80040ac <HAL_RCC_OscConfig+0x504>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d005      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x328>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e23f      	b.n	8004350 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed0:	4b76      	ldr	r3, [pc, #472]	@ (80040ac <HAL_RCC_OscConfig+0x504>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	061b      	lsls	r3, r3, #24
 8003ede:	4973      	ldr	r1, [pc, #460]	@ (80040ac <HAL_RCC_OscConfig+0x504>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ee4:	e040      	b.n	8003f68 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d023      	beq.n	8003f36 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eee:	4b6f      	ldr	r3, [pc, #444]	@ (80040ac <HAL_RCC_OscConfig+0x504>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a6e      	ldr	r2, [pc, #440]	@ (80040ac <HAL_RCC_OscConfig+0x504>)
 8003ef4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ef8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efa:	f7fd fec7 	bl	8001c8c <HAL_GetTick>
 8003efe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f00:	e008      	b.n	8003f14 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f02:	f7fd fec3 	bl	8001c8c <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e21d      	b.n	8004350 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f14:	4b65      	ldr	r3, [pc, #404]	@ (80040ac <HAL_RCC_OscConfig+0x504>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d0f0      	beq.n	8003f02 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f20:	4b62      	ldr	r3, [pc, #392]	@ (80040ac <HAL_RCC_OscConfig+0x504>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	061b      	lsls	r3, r3, #24
 8003f2e:	495f      	ldr	r1, [pc, #380]	@ (80040ac <HAL_RCC_OscConfig+0x504>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	604b      	str	r3, [r1, #4]
 8003f34:	e018      	b.n	8003f68 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f36:	4b5d      	ldr	r3, [pc, #372]	@ (80040ac <HAL_RCC_OscConfig+0x504>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a5c      	ldr	r2, [pc, #368]	@ (80040ac <HAL_RCC_OscConfig+0x504>)
 8003f3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f42:	f7fd fea3 	bl	8001c8c <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f48:	e008      	b.n	8003f5c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f4a:	f7fd fe9f 	bl	8001c8c <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e1f9      	b.n	8004350 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f5c:	4b53      	ldr	r3, [pc, #332]	@ (80040ac <HAL_RCC_OscConfig+0x504>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1f0      	bne.n	8003f4a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0308 	and.w	r3, r3, #8
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d03c      	beq.n	8003fee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d01c      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f7c:	4b4b      	ldr	r3, [pc, #300]	@ (80040ac <HAL_RCC_OscConfig+0x504>)
 8003f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f82:	4a4a      	ldr	r2, [pc, #296]	@ (80040ac <HAL_RCC_OscConfig+0x504>)
 8003f84:	f043 0301 	orr.w	r3, r3, #1
 8003f88:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f8c:	f7fd fe7e 	bl	8001c8c <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f94:	f7fd fe7a 	bl	8001c8c <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e1d4      	b.n	8004350 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fa6:	4b41      	ldr	r3, [pc, #260]	@ (80040ac <HAL_RCC_OscConfig+0x504>)
 8003fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d0ef      	beq.n	8003f94 <HAL_RCC_OscConfig+0x3ec>
 8003fb4:	e01b      	b.n	8003fee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fb6:	4b3d      	ldr	r3, [pc, #244]	@ (80040ac <HAL_RCC_OscConfig+0x504>)
 8003fb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fbc:	4a3b      	ldr	r2, [pc, #236]	@ (80040ac <HAL_RCC_OscConfig+0x504>)
 8003fbe:	f023 0301 	bic.w	r3, r3, #1
 8003fc2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc6:	f7fd fe61 	bl	8001c8c <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fce:	f7fd fe5d 	bl	8001c8c <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e1b7      	b.n	8004350 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fe0:	4b32      	ldr	r3, [pc, #200]	@ (80040ac <HAL_RCC_OscConfig+0x504>)
 8003fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1ef      	bne.n	8003fce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0304 	and.w	r3, r3, #4
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 80a6 	beq.w	8004148 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004000:	4b2a      	ldr	r3, [pc, #168]	@ (80040ac <HAL_RCC_OscConfig+0x504>)
 8004002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004004:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10d      	bne.n	8004028 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800400c:	4b27      	ldr	r3, [pc, #156]	@ (80040ac <HAL_RCC_OscConfig+0x504>)
 800400e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004010:	4a26      	ldr	r2, [pc, #152]	@ (80040ac <HAL_RCC_OscConfig+0x504>)
 8004012:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004016:	6593      	str	r3, [r2, #88]	@ 0x58
 8004018:	4b24      	ldr	r3, [pc, #144]	@ (80040ac <HAL_RCC_OscConfig+0x504>)
 800401a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800401c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004020:	60bb      	str	r3, [r7, #8]
 8004022:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004024:	2301      	movs	r3, #1
 8004026:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004028:	4b21      	ldr	r3, [pc, #132]	@ (80040b0 <HAL_RCC_OscConfig+0x508>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004030:	2b00      	cmp	r3, #0
 8004032:	d118      	bne.n	8004066 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004034:	4b1e      	ldr	r3, [pc, #120]	@ (80040b0 <HAL_RCC_OscConfig+0x508>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a1d      	ldr	r2, [pc, #116]	@ (80040b0 <HAL_RCC_OscConfig+0x508>)
 800403a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800403e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004040:	f7fd fe24 	bl	8001c8c <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004048:	f7fd fe20 	bl	8001c8c <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e17a      	b.n	8004350 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800405a:	4b15      	ldr	r3, [pc, #84]	@ (80040b0 <HAL_RCC_OscConfig+0x508>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0f0      	beq.n	8004048 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d108      	bne.n	8004080 <HAL_RCC_OscConfig+0x4d8>
 800406e:	4b0f      	ldr	r3, [pc, #60]	@ (80040ac <HAL_RCC_OscConfig+0x504>)
 8004070:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004074:	4a0d      	ldr	r2, [pc, #52]	@ (80040ac <HAL_RCC_OscConfig+0x504>)
 8004076:	f043 0301 	orr.w	r3, r3, #1
 800407a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800407e:	e029      	b.n	80040d4 <HAL_RCC_OscConfig+0x52c>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	2b05      	cmp	r3, #5
 8004086:	d115      	bne.n	80040b4 <HAL_RCC_OscConfig+0x50c>
 8004088:	4b08      	ldr	r3, [pc, #32]	@ (80040ac <HAL_RCC_OscConfig+0x504>)
 800408a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800408e:	4a07      	ldr	r2, [pc, #28]	@ (80040ac <HAL_RCC_OscConfig+0x504>)
 8004090:	f043 0304 	orr.w	r3, r3, #4
 8004094:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004098:	4b04      	ldr	r3, [pc, #16]	@ (80040ac <HAL_RCC_OscConfig+0x504>)
 800409a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800409e:	4a03      	ldr	r2, [pc, #12]	@ (80040ac <HAL_RCC_OscConfig+0x504>)
 80040a0:	f043 0301 	orr.w	r3, r3, #1
 80040a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040a8:	e014      	b.n	80040d4 <HAL_RCC_OscConfig+0x52c>
 80040aa:	bf00      	nop
 80040ac:	40021000 	.word	0x40021000
 80040b0:	40007000 	.word	0x40007000
 80040b4:	4b9c      	ldr	r3, [pc, #624]	@ (8004328 <HAL_RCC_OscConfig+0x780>)
 80040b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ba:	4a9b      	ldr	r2, [pc, #620]	@ (8004328 <HAL_RCC_OscConfig+0x780>)
 80040bc:	f023 0301 	bic.w	r3, r3, #1
 80040c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040c4:	4b98      	ldr	r3, [pc, #608]	@ (8004328 <HAL_RCC_OscConfig+0x780>)
 80040c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ca:	4a97      	ldr	r2, [pc, #604]	@ (8004328 <HAL_RCC_OscConfig+0x780>)
 80040cc:	f023 0304 	bic.w	r3, r3, #4
 80040d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d016      	beq.n	800410a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040dc:	f7fd fdd6 	bl	8001c8c <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040e2:	e00a      	b.n	80040fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e4:	f7fd fdd2 	bl	8001c8c <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e12a      	b.n	8004350 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040fa:	4b8b      	ldr	r3, [pc, #556]	@ (8004328 <HAL_RCC_OscConfig+0x780>)
 80040fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d0ed      	beq.n	80040e4 <HAL_RCC_OscConfig+0x53c>
 8004108:	e015      	b.n	8004136 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800410a:	f7fd fdbf 	bl	8001c8c <HAL_GetTick>
 800410e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004110:	e00a      	b.n	8004128 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004112:	f7fd fdbb 	bl	8001c8c <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004120:	4293      	cmp	r3, r2
 8004122:	d901      	bls.n	8004128 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e113      	b.n	8004350 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004128:	4b7f      	ldr	r3, [pc, #508]	@ (8004328 <HAL_RCC_OscConfig+0x780>)
 800412a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1ed      	bne.n	8004112 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004136:	7ffb      	ldrb	r3, [r7, #31]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d105      	bne.n	8004148 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800413c:	4b7a      	ldr	r3, [pc, #488]	@ (8004328 <HAL_RCC_OscConfig+0x780>)
 800413e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004140:	4a79      	ldr	r2, [pc, #484]	@ (8004328 <HAL_RCC_OscConfig+0x780>)
 8004142:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004146:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 80fe 	beq.w	800434e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004156:	2b02      	cmp	r3, #2
 8004158:	f040 80d0 	bne.w	80042fc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800415c:	4b72      	ldr	r3, [pc, #456]	@ (8004328 <HAL_RCC_OscConfig+0x780>)
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f003 0203 	and.w	r2, r3, #3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416c:	429a      	cmp	r2, r3
 800416e:	d130      	bne.n	80041d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800417a:	3b01      	subs	r3, #1
 800417c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800417e:	429a      	cmp	r2, r3
 8004180:	d127      	bne.n	80041d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800418c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800418e:	429a      	cmp	r2, r3
 8004190:	d11f      	bne.n	80041d2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800419c:	2a07      	cmp	r2, #7
 800419e:	bf14      	ite	ne
 80041a0:	2201      	movne	r2, #1
 80041a2:	2200      	moveq	r2, #0
 80041a4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d113      	bne.n	80041d2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b4:	085b      	lsrs	r3, r3, #1
 80041b6:	3b01      	subs	r3, #1
 80041b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d109      	bne.n	80041d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c8:	085b      	lsrs	r3, r3, #1
 80041ca:	3b01      	subs	r3, #1
 80041cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d06e      	beq.n	80042b0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	2b0c      	cmp	r3, #12
 80041d6:	d069      	beq.n	80042ac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80041d8:	4b53      	ldr	r3, [pc, #332]	@ (8004328 <HAL_RCC_OscConfig+0x780>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d105      	bne.n	80041f0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80041e4:	4b50      	ldr	r3, [pc, #320]	@ (8004328 <HAL_RCC_OscConfig+0x780>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e0ad      	b.n	8004350 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80041f4:	4b4c      	ldr	r3, [pc, #304]	@ (8004328 <HAL_RCC_OscConfig+0x780>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a4b      	ldr	r2, [pc, #300]	@ (8004328 <HAL_RCC_OscConfig+0x780>)
 80041fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041fe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004200:	f7fd fd44 	bl	8001c8c <HAL_GetTick>
 8004204:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004208:	f7fd fd40 	bl	8001c8c <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b02      	cmp	r3, #2
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e09a      	b.n	8004350 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800421a:	4b43      	ldr	r3, [pc, #268]	@ (8004328 <HAL_RCC_OscConfig+0x780>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1f0      	bne.n	8004208 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004226:	4b40      	ldr	r3, [pc, #256]	@ (8004328 <HAL_RCC_OscConfig+0x780>)
 8004228:	68da      	ldr	r2, [r3, #12]
 800422a:	4b40      	ldr	r3, [pc, #256]	@ (800432c <HAL_RCC_OscConfig+0x784>)
 800422c:	4013      	ands	r3, r2
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004236:	3a01      	subs	r2, #1
 8004238:	0112      	lsls	r2, r2, #4
 800423a:	4311      	orrs	r1, r2
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004240:	0212      	lsls	r2, r2, #8
 8004242:	4311      	orrs	r1, r2
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004248:	0852      	lsrs	r2, r2, #1
 800424a:	3a01      	subs	r2, #1
 800424c:	0552      	lsls	r2, r2, #21
 800424e:	4311      	orrs	r1, r2
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004254:	0852      	lsrs	r2, r2, #1
 8004256:	3a01      	subs	r2, #1
 8004258:	0652      	lsls	r2, r2, #25
 800425a:	4311      	orrs	r1, r2
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004260:	0912      	lsrs	r2, r2, #4
 8004262:	0452      	lsls	r2, r2, #17
 8004264:	430a      	orrs	r2, r1
 8004266:	4930      	ldr	r1, [pc, #192]	@ (8004328 <HAL_RCC_OscConfig+0x780>)
 8004268:	4313      	orrs	r3, r2
 800426a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800426c:	4b2e      	ldr	r3, [pc, #184]	@ (8004328 <HAL_RCC_OscConfig+0x780>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a2d      	ldr	r2, [pc, #180]	@ (8004328 <HAL_RCC_OscConfig+0x780>)
 8004272:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004276:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004278:	4b2b      	ldr	r3, [pc, #172]	@ (8004328 <HAL_RCC_OscConfig+0x780>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	4a2a      	ldr	r2, [pc, #168]	@ (8004328 <HAL_RCC_OscConfig+0x780>)
 800427e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004282:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004284:	f7fd fd02 	bl	8001c8c <HAL_GetTick>
 8004288:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800428c:	f7fd fcfe 	bl	8001c8c <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b02      	cmp	r3, #2
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e058      	b.n	8004350 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800429e:	4b22      	ldr	r3, [pc, #136]	@ (8004328 <HAL_RCC_OscConfig+0x780>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0f0      	beq.n	800428c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042aa:	e050      	b.n	800434e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e04f      	b.n	8004350 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004328 <HAL_RCC_OscConfig+0x780>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d148      	bne.n	800434e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80042bc:	4b1a      	ldr	r3, [pc, #104]	@ (8004328 <HAL_RCC_OscConfig+0x780>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a19      	ldr	r2, [pc, #100]	@ (8004328 <HAL_RCC_OscConfig+0x780>)
 80042c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042c8:	4b17      	ldr	r3, [pc, #92]	@ (8004328 <HAL_RCC_OscConfig+0x780>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	4a16      	ldr	r2, [pc, #88]	@ (8004328 <HAL_RCC_OscConfig+0x780>)
 80042ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80042d4:	f7fd fcda 	bl	8001c8c <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042dc:	f7fd fcd6 	bl	8001c8c <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e030      	b.n	8004350 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ee:	4b0e      	ldr	r3, [pc, #56]	@ (8004328 <HAL_RCC_OscConfig+0x780>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d0f0      	beq.n	80042dc <HAL_RCC_OscConfig+0x734>
 80042fa:	e028      	b.n	800434e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	2b0c      	cmp	r3, #12
 8004300:	d023      	beq.n	800434a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004302:	4b09      	ldr	r3, [pc, #36]	@ (8004328 <HAL_RCC_OscConfig+0x780>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a08      	ldr	r2, [pc, #32]	@ (8004328 <HAL_RCC_OscConfig+0x780>)
 8004308:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800430c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430e:	f7fd fcbd 	bl	8001c8c <HAL_GetTick>
 8004312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004314:	e00c      	b.n	8004330 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004316:	f7fd fcb9 	bl	8001c8c <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d905      	bls.n	8004330 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e013      	b.n	8004350 <HAL_RCC_OscConfig+0x7a8>
 8004328:	40021000 	.word	0x40021000
 800432c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004330:	4b09      	ldr	r3, [pc, #36]	@ (8004358 <HAL_RCC_OscConfig+0x7b0>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1ec      	bne.n	8004316 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800433c:	4b06      	ldr	r3, [pc, #24]	@ (8004358 <HAL_RCC_OscConfig+0x7b0>)
 800433e:	68da      	ldr	r2, [r3, #12]
 8004340:	4905      	ldr	r1, [pc, #20]	@ (8004358 <HAL_RCC_OscConfig+0x7b0>)
 8004342:	4b06      	ldr	r3, [pc, #24]	@ (800435c <HAL_RCC_OscConfig+0x7b4>)
 8004344:	4013      	ands	r3, r2
 8004346:	60cb      	str	r3, [r1, #12]
 8004348:	e001      	b.n	800434e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e000      	b.n	8004350 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3720      	adds	r7, #32
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	40021000 	.word	0x40021000
 800435c:	feeefffc 	.word	0xfeeefffc

08004360 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e0e7      	b.n	8004544 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004374:	4b75      	ldr	r3, [pc, #468]	@ (800454c <HAL_RCC_ClockConfig+0x1ec>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	429a      	cmp	r2, r3
 8004380:	d910      	bls.n	80043a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004382:	4b72      	ldr	r3, [pc, #456]	@ (800454c <HAL_RCC_ClockConfig+0x1ec>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f023 0207 	bic.w	r2, r3, #7
 800438a:	4970      	ldr	r1, [pc, #448]	@ (800454c <HAL_RCC_ClockConfig+0x1ec>)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	4313      	orrs	r3, r2
 8004390:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004392:	4b6e      	ldr	r3, [pc, #440]	@ (800454c <HAL_RCC_ClockConfig+0x1ec>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0307 	and.w	r3, r3, #7
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	429a      	cmp	r2, r3
 800439e:	d001      	beq.n	80043a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e0cf      	b.n	8004544 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d010      	beq.n	80043d2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	4b66      	ldr	r3, [pc, #408]	@ (8004550 <HAL_RCC_ClockConfig+0x1f0>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043bc:	429a      	cmp	r2, r3
 80043be:	d908      	bls.n	80043d2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043c0:	4b63      	ldr	r3, [pc, #396]	@ (8004550 <HAL_RCC_ClockConfig+0x1f0>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	4960      	ldr	r1, [pc, #384]	@ (8004550 <HAL_RCC_ClockConfig+0x1f0>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d04c      	beq.n	8004478 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	2b03      	cmp	r3, #3
 80043e4:	d107      	bne.n	80043f6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043e6:	4b5a      	ldr	r3, [pc, #360]	@ (8004550 <HAL_RCC_ClockConfig+0x1f0>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d121      	bne.n	8004436 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e0a6      	b.n	8004544 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d107      	bne.n	800440e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043fe:	4b54      	ldr	r3, [pc, #336]	@ (8004550 <HAL_RCC_ClockConfig+0x1f0>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d115      	bne.n	8004436 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e09a      	b.n	8004544 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d107      	bne.n	8004426 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004416:	4b4e      	ldr	r3, [pc, #312]	@ (8004550 <HAL_RCC_ClockConfig+0x1f0>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d109      	bne.n	8004436 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e08e      	b.n	8004544 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004426:	4b4a      	ldr	r3, [pc, #296]	@ (8004550 <HAL_RCC_ClockConfig+0x1f0>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e086      	b.n	8004544 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004436:	4b46      	ldr	r3, [pc, #280]	@ (8004550 <HAL_RCC_ClockConfig+0x1f0>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f023 0203 	bic.w	r2, r3, #3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	4943      	ldr	r1, [pc, #268]	@ (8004550 <HAL_RCC_ClockConfig+0x1f0>)
 8004444:	4313      	orrs	r3, r2
 8004446:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004448:	f7fd fc20 	bl	8001c8c <HAL_GetTick>
 800444c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800444e:	e00a      	b.n	8004466 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004450:	f7fd fc1c 	bl	8001c8c <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800445e:	4293      	cmp	r3, r2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e06e      	b.n	8004544 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004466:	4b3a      	ldr	r3, [pc, #232]	@ (8004550 <HAL_RCC_ClockConfig+0x1f0>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 020c 	and.w	r2, r3, #12
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	429a      	cmp	r2, r3
 8004476:	d1eb      	bne.n	8004450 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d010      	beq.n	80044a6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	4b31      	ldr	r3, [pc, #196]	@ (8004550 <HAL_RCC_ClockConfig+0x1f0>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004490:	429a      	cmp	r2, r3
 8004492:	d208      	bcs.n	80044a6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004494:	4b2e      	ldr	r3, [pc, #184]	@ (8004550 <HAL_RCC_ClockConfig+0x1f0>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	492b      	ldr	r1, [pc, #172]	@ (8004550 <HAL_RCC_ClockConfig+0x1f0>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044a6:	4b29      	ldr	r3, [pc, #164]	@ (800454c <HAL_RCC_ClockConfig+0x1ec>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0307 	and.w	r3, r3, #7
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d210      	bcs.n	80044d6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b4:	4b25      	ldr	r3, [pc, #148]	@ (800454c <HAL_RCC_ClockConfig+0x1ec>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f023 0207 	bic.w	r2, r3, #7
 80044bc:	4923      	ldr	r1, [pc, #140]	@ (800454c <HAL_RCC_ClockConfig+0x1ec>)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c4:	4b21      	ldr	r3, [pc, #132]	@ (800454c <HAL_RCC_ClockConfig+0x1ec>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0307 	and.w	r3, r3, #7
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d001      	beq.n	80044d6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e036      	b.n	8004544 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0304 	and.w	r3, r3, #4
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d008      	beq.n	80044f4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044e2:	4b1b      	ldr	r3, [pc, #108]	@ (8004550 <HAL_RCC_ClockConfig+0x1f0>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	4918      	ldr	r1, [pc, #96]	@ (8004550 <HAL_RCC_ClockConfig+0x1f0>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0308 	and.w	r3, r3, #8
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d009      	beq.n	8004514 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004500:	4b13      	ldr	r3, [pc, #76]	@ (8004550 <HAL_RCC_ClockConfig+0x1f0>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	4910      	ldr	r1, [pc, #64]	@ (8004550 <HAL_RCC_ClockConfig+0x1f0>)
 8004510:	4313      	orrs	r3, r2
 8004512:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004514:	f000 f824 	bl	8004560 <HAL_RCC_GetSysClockFreq>
 8004518:	4602      	mov	r2, r0
 800451a:	4b0d      	ldr	r3, [pc, #52]	@ (8004550 <HAL_RCC_ClockConfig+0x1f0>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	091b      	lsrs	r3, r3, #4
 8004520:	f003 030f 	and.w	r3, r3, #15
 8004524:	490b      	ldr	r1, [pc, #44]	@ (8004554 <HAL_RCC_ClockConfig+0x1f4>)
 8004526:	5ccb      	ldrb	r3, [r1, r3]
 8004528:	f003 031f 	and.w	r3, r3, #31
 800452c:	fa22 f303 	lsr.w	r3, r2, r3
 8004530:	4a09      	ldr	r2, [pc, #36]	@ (8004558 <HAL_RCC_ClockConfig+0x1f8>)
 8004532:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004534:	4b09      	ldr	r3, [pc, #36]	@ (800455c <HAL_RCC_ClockConfig+0x1fc>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4618      	mov	r0, r3
 800453a:	f7fd fb57 	bl	8001bec <HAL_InitTick>
 800453e:	4603      	mov	r3, r0
 8004540:	72fb      	strb	r3, [r7, #11]

  return status;
 8004542:	7afb      	ldrb	r3, [r7, #11]
}
 8004544:	4618      	mov	r0, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40022000 	.word	0x40022000
 8004550:	40021000 	.word	0x40021000
 8004554:	0800b040 	.word	0x0800b040
 8004558:	20000000 	.word	0x20000000
 800455c:	20000004 	.word	0x20000004

08004560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004560:	b480      	push	{r7}
 8004562:	b089      	sub	sp, #36	@ 0x24
 8004564:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004566:	2300      	movs	r3, #0
 8004568:	61fb      	str	r3, [r7, #28]
 800456a:	2300      	movs	r3, #0
 800456c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800456e:	4b3e      	ldr	r3, [pc, #248]	@ (8004668 <HAL_RCC_GetSysClockFreq+0x108>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 030c 	and.w	r3, r3, #12
 8004576:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004578:	4b3b      	ldr	r3, [pc, #236]	@ (8004668 <HAL_RCC_GetSysClockFreq+0x108>)
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	f003 0303 	and.w	r3, r3, #3
 8004580:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d005      	beq.n	8004594 <HAL_RCC_GetSysClockFreq+0x34>
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	2b0c      	cmp	r3, #12
 800458c:	d121      	bne.n	80045d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d11e      	bne.n	80045d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004594:	4b34      	ldr	r3, [pc, #208]	@ (8004668 <HAL_RCC_GetSysClockFreq+0x108>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0308 	and.w	r3, r3, #8
 800459c:	2b00      	cmp	r3, #0
 800459e:	d107      	bne.n	80045b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80045a0:	4b31      	ldr	r3, [pc, #196]	@ (8004668 <HAL_RCC_GetSysClockFreq+0x108>)
 80045a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045a6:	0a1b      	lsrs	r3, r3, #8
 80045a8:	f003 030f 	and.w	r3, r3, #15
 80045ac:	61fb      	str	r3, [r7, #28]
 80045ae:	e005      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80045b0:	4b2d      	ldr	r3, [pc, #180]	@ (8004668 <HAL_RCC_GetSysClockFreq+0x108>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	091b      	lsrs	r3, r3, #4
 80045b6:	f003 030f 	and.w	r3, r3, #15
 80045ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80045bc:	4a2b      	ldr	r2, [pc, #172]	@ (800466c <HAL_RCC_GetSysClockFreq+0x10c>)
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10d      	bne.n	80045e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045d0:	e00a      	b.n	80045e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	2b04      	cmp	r3, #4
 80045d6:	d102      	bne.n	80045de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80045d8:	4b25      	ldr	r3, [pc, #148]	@ (8004670 <HAL_RCC_GetSysClockFreq+0x110>)
 80045da:	61bb      	str	r3, [r7, #24]
 80045dc:	e004      	b.n	80045e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	2b08      	cmp	r3, #8
 80045e2:	d101      	bne.n	80045e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045e4:	4b23      	ldr	r3, [pc, #140]	@ (8004674 <HAL_RCC_GetSysClockFreq+0x114>)
 80045e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	2b0c      	cmp	r3, #12
 80045ec:	d134      	bne.n	8004658 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045ee:	4b1e      	ldr	r3, [pc, #120]	@ (8004668 <HAL_RCC_GetSysClockFreq+0x108>)
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f003 0303 	and.w	r3, r3, #3
 80045f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d003      	beq.n	8004606 <HAL_RCC_GetSysClockFreq+0xa6>
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	2b03      	cmp	r3, #3
 8004602:	d003      	beq.n	800460c <HAL_RCC_GetSysClockFreq+0xac>
 8004604:	e005      	b.n	8004612 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004606:	4b1a      	ldr	r3, [pc, #104]	@ (8004670 <HAL_RCC_GetSysClockFreq+0x110>)
 8004608:	617b      	str	r3, [r7, #20]
      break;
 800460a:	e005      	b.n	8004618 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800460c:	4b19      	ldr	r3, [pc, #100]	@ (8004674 <HAL_RCC_GetSysClockFreq+0x114>)
 800460e:	617b      	str	r3, [r7, #20]
      break;
 8004610:	e002      	b.n	8004618 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	617b      	str	r3, [r7, #20]
      break;
 8004616:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004618:	4b13      	ldr	r3, [pc, #76]	@ (8004668 <HAL_RCC_GetSysClockFreq+0x108>)
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	091b      	lsrs	r3, r3, #4
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	3301      	adds	r3, #1
 8004624:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004626:	4b10      	ldr	r3, [pc, #64]	@ (8004668 <HAL_RCC_GetSysClockFreq+0x108>)
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	0a1b      	lsrs	r3, r3, #8
 800462c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	fb03 f202 	mul.w	r2, r3, r2
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	fbb2 f3f3 	udiv	r3, r2, r3
 800463c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800463e:	4b0a      	ldr	r3, [pc, #40]	@ (8004668 <HAL_RCC_GetSysClockFreq+0x108>)
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	0e5b      	lsrs	r3, r3, #25
 8004644:	f003 0303 	and.w	r3, r3, #3
 8004648:	3301      	adds	r3, #1
 800464a:	005b      	lsls	r3, r3, #1
 800464c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	fbb2 f3f3 	udiv	r3, r2, r3
 8004656:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004658:	69bb      	ldr	r3, [r7, #24]
}
 800465a:	4618      	mov	r0, r3
 800465c:	3724      	adds	r7, #36	@ 0x24
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	40021000 	.word	0x40021000
 800466c:	0800b058 	.word	0x0800b058
 8004670:	00f42400 	.word	0x00f42400
 8004674:	007a1200 	.word	0x007a1200

08004678 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800467c:	4b03      	ldr	r3, [pc, #12]	@ (800468c <HAL_RCC_GetHCLKFreq+0x14>)
 800467e:	681b      	ldr	r3, [r3, #0]
}
 8004680:	4618      	mov	r0, r3
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	20000000 	.word	0x20000000

08004690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004694:	f7ff fff0 	bl	8004678 <HAL_RCC_GetHCLKFreq>
 8004698:	4602      	mov	r2, r0
 800469a:	4b06      	ldr	r3, [pc, #24]	@ (80046b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	0a1b      	lsrs	r3, r3, #8
 80046a0:	f003 0307 	and.w	r3, r3, #7
 80046a4:	4904      	ldr	r1, [pc, #16]	@ (80046b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80046a6:	5ccb      	ldrb	r3, [r1, r3]
 80046a8:	f003 031f 	and.w	r3, r3, #31
 80046ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	40021000 	.word	0x40021000
 80046b8:	0800b050 	.word	0x0800b050

080046bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80046c0:	f7ff ffda 	bl	8004678 <HAL_RCC_GetHCLKFreq>
 80046c4:	4602      	mov	r2, r0
 80046c6:	4b06      	ldr	r3, [pc, #24]	@ (80046e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	0adb      	lsrs	r3, r3, #11
 80046cc:	f003 0307 	and.w	r3, r3, #7
 80046d0:	4904      	ldr	r1, [pc, #16]	@ (80046e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80046d2:	5ccb      	ldrb	r3, [r1, r3]
 80046d4:	f003 031f 	and.w	r3, r3, #31
 80046d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046dc:	4618      	mov	r0, r3
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	40021000 	.word	0x40021000
 80046e4:	0800b050 	.word	0x0800b050

080046e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80046f0:	2300      	movs	r3, #0
 80046f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80046f4:	4b2a      	ldr	r3, [pc, #168]	@ (80047a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d003      	beq.n	8004708 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004700:	f7ff f9ee 	bl	8003ae0 <HAL_PWREx_GetVoltageRange>
 8004704:	6178      	str	r0, [r7, #20]
 8004706:	e014      	b.n	8004732 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004708:	4b25      	ldr	r3, [pc, #148]	@ (80047a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800470a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800470c:	4a24      	ldr	r2, [pc, #144]	@ (80047a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800470e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004712:	6593      	str	r3, [r2, #88]	@ 0x58
 8004714:	4b22      	ldr	r3, [pc, #136]	@ (80047a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004718:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800471c:	60fb      	str	r3, [r7, #12]
 800471e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004720:	f7ff f9de 	bl	8003ae0 <HAL_PWREx_GetVoltageRange>
 8004724:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004726:	4b1e      	ldr	r3, [pc, #120]	@ (80047a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800472a:	4a1d      	ldr	r2, [pc, #116]	@ (80047a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800472c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004730:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004738:	d10b      	bne.n	8004752 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b80      	cmp	r3, #128	@ 0x80
 800473e:	d919      	bls.n	8004774 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2ba0      	cmp	r3, #160	@ 0xa0
 8004744:	d902      	bls.n	800474c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004746:	2302      	movs	r3, #2
 8004748:	613b      	str	r3, [r7, #16]
 800474a:	e013      	b.n	8004774 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800474c:	2301      	movs	r3, #1
 800474e:	613b      	str	r3, [r7, #16]
 8004750:	e010      	b.n	8004774 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b80      	cmp	r3, #128	@ 0x80
 8004756:	d902      	bls.n	800475e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004758:	2303      	movs	r3, #3
 800475a:	613b      	str	r3, [r7, #16]
 800475c:	e00a      	b.n	8004774 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2b80      	cmp	r3, #128	@ 0x80
 8004762:	d102      	bne.n	800476a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004764:	2302      	movs	r3, #2
 8004766:	613b      	str	r3, [r7, #16]
 8004768:	e004      	b.n	8004774 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b70      	cmp	r3, #112	@ 0x70
 800476e:	d101      	bne.n	8004774 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004770:	2301      	movs	r3, #1
 8004772:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004774:	4b0b      	ldr	r3, [pc, #44]	@ (80047a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f023 0207 	bic.w	r2, r3, #7
 800477c:	4909      	ldr	r1, [pc, #36]	@ (80047a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	4313      	orrs	r3, r2
 8004782:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004784:	4b07      	ldr	r3, [pc, #28]	@ (80047a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	429a      	cmp	r2, r3
 8004790:	d001      	beq.n	8004796 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e000      	b.n	8004798 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3718      	adds	r7, #24
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	40021000 	.word	0x40021000
 80047a4:	40022000 	.word	0x40022000

080047a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047b0:	2300      	movs	r3, #0
 80047b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047b4:	2300      	movs	r3, #0
 80047b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d041      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047c8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80047cc:	d02a      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80047ce:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80047d2:	d824      	bhi.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80047d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80047d8:	d008      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80047da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80047de:	d81e      	bhi.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00a      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 80047e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047e8:	d010      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80047ea:	e018      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80047ec:	4b86      	ldr	r3, [pc, #536]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	4a85      	ldr	r2, [pc, #532]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047f6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047f8:	e015      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	3304      	adds	r3, #4
 80047fe:	2100      	movs	r1, #0
 8004800:	4618      	mov	r0, r3
 8004802:	f000 fabb 	bl	8004d7c <RCCEx_PLLSAI1_Config>
 8004806:	4603      	mov	r3, r0
 8004808:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800480a:	e00c      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	3320      	adds	r3, #32
 8004810:	2100      	movs	r1, #0
 8004812:	4618      	mov	r0, r3
 8004814:	f000 fba6 	bl	8004f64 <RCCEx_PLLSAI2_Config>
 8004818:	4603      	mov	r3, r0
 800481a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800481c:	e003      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	74fb      	strb	r3, [r7, #19]
      break;
 8004822:	e000      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004824:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004826:	7cfb      	ldrb	r3, [r7, #19]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10b      	bne.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800482c:	4b76      	ldr	r3, [pc, #472]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800482e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004832:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800483a:	4973      	ldr	r1, [pc, #460]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800483c:	4313      	orrs	r3, r2
 800483e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004842:	e001      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004844:	7cfb      	ldrb	r3, [r7, #19]
 8004846:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d041      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004858:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800485c:	d02a      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800485e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004862:	d824      	bhi.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004864:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004868:	d008      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800486a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800486e:	d81e      	bhi.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00a      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004874:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004878:	d010      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800487a:	e018      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800487c:	4b62      	ldr	r3, [pc, #392]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	4a61      	ldr	r2, [pc, #388]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004882:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004886:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004888:	e015      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	3304      	adds	r3, #4
 800488e:	2100      	movs	r1, #0
 8004890:	4618      	mov	r0, r3
 8004892:	f000 fa73 	bl	8004d7c <RCCEx_PLLSAI1_Config>
 8004896:	4603      	mov	r3, r0
 8004898:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800489a:	e00c      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	3320      	adds	r3, #32
 80048a0:	2100      	movs	r1, #0
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 fb5e 	bl	8004f64 <RCCEx_PLLSAI2_Config>
 80048a8:	4603      	mov	r3, r0
 80048aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048ac:	e003      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	74fb      	strb	r3, [r7, #19]
      break;
 80048b2:	e000      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80048b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048b6:	7cfb      	ldrb	r3, [r7, #19]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10b      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80048bc:	4b52      	ldr	r3, [pc, #328]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048c2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048ca:	494f      	ldr	r1, [pc, #316]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80048d2:	e001      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d4:	7cfb      	ldrb	r3, [r7, #19]
 80048d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f000 80a0 	beq.w	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048e6:	2300      	movs	r3, #0
 80048e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80048ea:	4b47      	ldr	r3, [pc, #284]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80048f6:	2301      	movs	r3, #1
 80048f8:	e000      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80048fa:	2300      	movs	r3, #0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00d      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004900:	4b41      	ldr	r3, [pc, #260]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004904:	4a40      	ldr	r2, [pc, #256]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004906:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800490a:	6593      	str	r3, [r2, #88]	@ 0x58
 800490c:	4b3e      	ldr	r3, [pc, #248]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800490e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004910:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004914:	60bb      	str	r3, [r7, #8]
 8004916:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004918:	2301      	movs	r3, #1
 800491a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800491c:	4b3b      	ldr	r3, [pc, #236]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a3a      	ldr	r2, [pc, #232]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004922:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004926:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004928:	f7fd f9b0 	bl	8001c8c <HAL_GetTick>
 800492c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800492e:	e009      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004930:	f7fd f9ac 	bl	8001c8c <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b02      	cmp	r3, #2
 800493c:	d902      	bls.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	74fb      	strb	r3, [r7, #19]
        break;
 8004942:	e005      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004944:	4b31      	ldr	r3, [pc, #196]	@ (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800494c:	2b00      	cmp	r3, #0
 800494e:	d0ef      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004950:	7cfb      	ldrb	r3, [r7, #19]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d15c      	bne.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004956:	4b2c      	ldr	r3, [pc, #176]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004958:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800495c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004960:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d01f      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	429a      	cmp	r2, r3
 8004972:	d019      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004974:	4b24      	ldr	r3, [pc, #144]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800497a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800497e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004980:	4b21      	ldr	r3, [pc, #132]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004986:	4a20      	ldr	r2, [pc, #128]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004988:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800498c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004990:	4b1d      	ldr	r3, [pc, #116]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004996:	4a1c      	ldr	r2, [pc, #112]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004998:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800499c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049a0:	4a19      	ldr	r2, [pc, #100]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d016      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b2:	f7fd f96b 	bl	8001c8c <HAL_GetTick>
 80049b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049b8:	e00b      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ba:	f7fd f967 	bl	8001c8c <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d902      	bls.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	74fb      	strb	r3, [r7, #19]
            break;
 80049d0:	e006      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d0ec      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80049e0:	7cfb      	ldrb	r3, [r7, #19]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10c      	bne.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049e6:	4b08      	ldr	r3, [pc, #32]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049f6:	4904      	ldr	r1, [pc, #16]	@ (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80049fe:	e009      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a00:	7cfb      	ldrb	r3, [r7, #19]
 8004a02:	74bb      	strb	r3, [r7, #18]
 8004a04:	e006      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004a06:	bf00      	nop
 8004a08:	40021000 	.word	0x40021000
 8004a0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a10:	7cfb      	ldrb	r3, [r7, #19]
 8004a12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a14:	7c7b      	ldrb	r3, [r7, #17]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d105      	bne.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a1a:	4b9e      	ldr	r3, [pc, #632]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a1e:	4a9d      	ldr	r2, [pc, #628]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a24:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00a      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a32:	4b98      	ldr	r3, [pc, #608]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a38:	f023 0203 	bic.w	r2, r3, #3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a40:	4994      	ldr	r1, [pc, #592]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00a      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a54:	4b8f      	ldr	r3, [pc, #572]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a5a:	f023 020c 	bic.w	r2, r3, #12
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a62:	498c      	ldr	r1, [pc, #560]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0304 	and.w	r3, r3, #4
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00a      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a76:	4b87      	ldr	r3, [pc, #540]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a7c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a84:	4983      	ldr	r1, [pc, #524]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0308 	and.w	r3, r3, #8
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00a      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a98:	4b7e      	ldr	r3, [pc, #504]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a9e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aa6:	497b      	ldr	r1, [pc, #492]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0310 	and.w	r3, r3, #16
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00a      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004aba:	4b76      	ldr	r3, [pc, #472]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ac0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ac8:	4972      	ldr	r1, [pc, #456]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0320 	and.w	r3, r3, #32
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00a      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004adc:	4b6d      	ldr	r3, [pc, #436]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ae2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aea:	496a      	ldr	r1, [pc, #424]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00a      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004afe:	4b65      	ldr	r3, [pc, #404]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b04:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b0c:	4961      	ldr	r1, [pc, #388]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00a      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b20:	4b5c      	ldr	r3, [pc, #368]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b2e:	4959      	ldr	r1, [pc, #356]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00a      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b42:	4b54      	ldr	r3, [pc, #336]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b48:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b50:	4950      	ldr	r1, [pc, #320]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00a      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b64:	4b4b      	ldr	r3, [pc, #300]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b6a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b72:	4948      	ldr	r1, [pc, #288]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00a      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b86:	4b43      	ldr	r3, [pc, #268]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b8c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b94:	493f      	ldr	r1, [pc, #252]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d028      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ba8:	4b3a      	ldr	r3, [pc, #232]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bb6:	4937      	ldr	r1, [pc, #220]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bc2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bc6:	d106      	bne.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bc8:	4b32      	ldr	r3, [pc, #200]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	4a31      	ldr	r2, [pc, #196]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bd2:	60d3      	str	r3, [r2, #12]
 8004bd4:	e011      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bda:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004bde:	d10c      	bne.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	3304      	adds	r3, #4
 8004be4:	2101      	movs	r1, #1
 8004be6:	4618      	mov	r0, r3
 8004be8:	f000 f8c8 	bl	8004d7c <RCCEx_PLLSAI1_Config>
 8004bec:	4603      	mov	r3, r0
 8004bee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004bf0:	7cfb      	ldrb	r3, [r7, #19]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004bf6:	7cfb      	ldrb	r3, [r7, #19]
 8004bf8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d028      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c06:	4b23      	ldr	r3, [pc, #140]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c0c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c14:	491f      	ldr	r1, [pc, #124]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c24:	d106      	bne.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c26:	4b1b      	ldr	r3, [pc, #108]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	4a1a      	ldr	r2, [pc, #104]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c2c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c30:	60d3      	str	r3, [r2, #12]
 8004c32:	e011      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c3c:	d10c      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	3304      	adds	r3, #4
 8004c42:	2101      	movs	r1, #1
 8004c44:	4618      	mov	r0, r3
 8004c46:	f000 f899 	bl	8004d7c <RCCEx_PLLSAI1_Config>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c4e:	7cfb      	ldrb	r3, [r7, #19]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004c54:	7cfb      	ldrb	r3, [r7, #19]
 8004c56:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d02b      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c64:	4b0b      	ldr	r3, [pc, #44]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c6a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c72:	4908      	ldr	r1, [pc, #32]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c82:	d109      	bne.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c84:	4b03      	ldr	r3, [pc, #12]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	4a02      	ldr	r2, [pc, #8]	@ (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c8e:	60d3      	str	r3, [r2, #12]
 8004c90:	e014      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004c92:	bf00      	nop
 8004c94:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ca0:	d10c      	bne.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	3304      	adds	r3, #4
 8004ca6:	2101      	movs	r1, #1
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 f867 	bl	8004d7c <RCCEx_PLLSAI1_Config>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cb2:	7cfb      	ldrb	r3, [r7, #19]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d001      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004cb8:	7cfb      	ldrb	r3, [r7, #19]
 8004cba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d02f      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cce:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cd6:	4928      	ldr	r1, [pc, #160]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ce2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ce6:	d10d      	bne.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3304      	adds	r3, #4
 8004cec:	2102      	movs	r1, #2
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 f844 	bl	8004d7c <RCCEx_PLLSAI1_Config>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cf8:	7cfb      	ldrb	r3, [r7, #19]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d014      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004cfe:	7cfb      	ldrb	r3, [r7, #19]
 8004d00:	74bb      	strb	r3, [r7, #18]
 8004d02:	e011      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d0c:	d10c      	bne.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	3320      	adds	r3, #32
 8004d12:	2102      	movs	r1, #2
 8004d14:	4618      	mov	r0, r3
 8004d16:	f000 f925 	bl	8004f64 <RCCEx_PLLSAI2_Config>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d1e:	7cfb      	ldrb	r3, [r7, #19]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004d24:	7cfb      	ldrb	r3, [r7, #19]
 8004d26:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00a      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d34:	4b10      	ldr	r3, [pc, #64]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d3a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d42:	490d      	ldr	r1, [pc, #52]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00b      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d56:	4b08      	ldr	r3, [pc, #32]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d5c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d66:	4904      	ldr	r1, [pc, #16]	@ (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004d6e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3718      	adds	r7, #24
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	40021000 	.word	0x40021000

08004d7c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d86:	2300      	movs	r3, #0
 8004d88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d8a:	4b75      	ldr	r3, [pc, #468]	@ (8004f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	f003 0303 	and.w	r3, r3, #3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d018      	beq.n	8004dc8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004d96:	4b72      	ldr	r3, [pc, #456]	@ (8004f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	f003 0203 	and.w	r2, r3, #3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d10d      	bne.n	8004dc2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
       ||
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d009      	beq.n	8004dc2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004dae:	4b6c      	ldr	r3, [pc, #432]	@ (8004f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	091b      	lsrs	r3, r3, #4
 8004db4:	f003 0307 	and.w	r3, r3, #7
 8004db8:	1c5a      	adds	r2, r3, #1
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
       ||
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d047      	beq.n	8004e52 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	73fb      	strb	r3, [r7, #15]
 8004dc6:	e044      	b.n	8004e52 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b03      	cmp	r3, #3
 8004dce:	d018      	beq.n	8004e02 <RCCEx_PLLSAI1_Config+0x86>
 8004dd0:	2b03      	cmp	r3, #3
 8004dd2:	d825      	bhi.n	8004e20 <RCCEx_PLLSAI1_Config+0xa4>
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d002      	beq.n	8004dde <RCCEx_PLLSAI1_Config+0x62>
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d009      	beq.n	8004df0 <RCCEx_PLLSAI1_Config+0x74>
 8004ddc:	e020      	b.n	8004e20 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004dde:	4b60      	ldr	r3, [pc, #384]	@ (8004f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d11d      	bne.n	8004e26 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dee:	e01a      	b.n	8004e26 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004df0:	4b5b      	ldr	r3, [pc, #364]	@ (8004f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d116      	bne.n	8004e2a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e00:	e013      	b.n	8004e2a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e02:	4b57      	ldr	r3, [pc, #348]	@ (8004f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10f      	bne.n	8004e2e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e0e:	4b54      	ldr	r3, [pc, #336]	@ (8004f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d109      	bne.n	8004e2e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e1e:	e006      	b.n	8004e2e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	73fb      	strb	r3, [r7, #15]
      break;
 8004e24:	e004      	b.n	8004e30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e26:	bf00      	nop
 8004e28:	e002      	b.n	8004e30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e2a:	bf00      	nop
 8004e2c:	e000      	b.n	8004e30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e30:	7bfb      	ldrb	r3, [r7, #15]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10d      	bne.n	8004e52 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e36:	4b4a      	ldr	r3, [pc, #296]	@ (8004f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6819      	ldr	r1, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	3b01      	subs	r3, #1
 8004e48:	011b      	lsls	r3, r3, #4
 8004e4a:	430b      	orrs	r3, r1
 8004e4c:	4944      	ldr	r1, [pc, #272]	@ (8004f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e52:	7bfb      	ldrb	r3, [r7, #15]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d17d      	bne.n	8004f54 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004e58:	4b41      	ldr	r3, [pc, #260]	@ (8004f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a40      	ldr	r2, [pc, #256]	@ (8004f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e5e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e64:	f7fc ff12 	bl	8001c8c <HAL_GetTick>
 8004e68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e6a:	e009      	b.n	8004e80 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e6c:	f7fc ff0e 	bl	8001c8c <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d902      	bls.n	8004e80 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	73fb      	strb	r3, [r7, #15]
        break;
 8004e7e:	e005      	b.n	8004e8c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e80:	4b37      	ldr	r3, [pc, #220]	@ (8004f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1ef      	bne.n	8004e6c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e8c:	7bfb      	ldrb	r3, [r7, #15]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d160      	bne.n	8004f54 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d111      	bne.n	8004ebc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e98:	4b31      	ldr	r3, [pc, #196]	@ (8004f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004ea0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	6892      	ldr	r2, [r2, #8]
 8004ea8:	0211      	lsls	r1, r2, #8
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	68d2      	ldr	r2, [r2, #12]
 8004eae:	0912      	lsrs	r2, r2, #4
 8004eb0:	0452      	lsls	r2, r2, #17
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	492a      	ldr	r1, [pc, #168]	@ (8004f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	610b      	str	r3, [r1, #16]
 8004eba:	e027      	b.n	8004f0c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d112      	bne.n	8004ee8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ec2:	4b27      	ldr	r3, [pc, #156]	@ (8004f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004eca:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	6892      	ldr	r2, [r2, #8]
 8004ed2:	0211      	lsls	r1, r2, #8
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	6912      	ldr	r2, [r2, #16]
 8004ed8:	0852      	lsrs	r2, r2, #1
 8004eda:	3a01      	subs	r2, #1
 8004edc:	0552      	lsls	r2, r2, #21
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	491f      	ldr	r1, [pc, #124]	@ (8004f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	610b      	str	r3, [r1, #16]
 8004ee6:	e011      	b.n	8004f0c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8004f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004ef0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6892      	ldr	r2, [r2, #8]
 8004ef8:	0211      	lsls	r1, r2, #8
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	6952      	ldr	r2, [r2, #20]
 8004efe:	0852      	lsrs	r2, r2, #1
 8004f00:	3a01      	subs	r2, #1
 8004f02:	0652      	lsls	r2, r2, #25
 8004f04:	430a      	orrs	r2, r1
 8004f06:	4916      	ldr	r1, [pc, #88]	@ (8004f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f0c:	4b14      	ldr	r3, [pc, #80]	@ (8004f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a13      	ldr	r2, [pc, #76]	@ (8004f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f12:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f18:	f7fc feb8 	bl	8001c8c <HAL_GetTick>
 8004f1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f1e:	e009      	b.n	8004f34 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f20:	f7fc feb4 	bl	8001c8c <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d902      	bls.n	8004f34 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	73fb      	strb	r3, [r7, #15]
          break;
 8004f32:	e005      	b.n	8004f40 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f34:	4b0a      	ldr	r3, [pc, #40]	@ (8004f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d0ef      	beq.n	8004f20 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004f40:	7bfb      	ldrb	r3, [r7, #15]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d106      	bne.n	8004f54 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f46:	4b06      	ldr	r3, [pc, #24]	@ (8004f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f48:	691a      	ldr	r2, [r3, #16]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	4904      	ldr	r1, [pc, #16]	@ (8004f60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	40021000 	.word	0x40021000

08004f64 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f72:	4b6a      	ldr	r3, [pc, #424]	@ (800511c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	f003 0303 	and.w	r3, r3, #3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d018      	beq.n	8004fb0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004f7e:	4b67      	ldr	r3, [pc, #412]	@ (800511c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	f003 0203 	and.w	r2, r3, #3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d10d      	bne.n	8004faa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
       ||
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d009      	beq.n	8004faa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004f96:	4b61      	ldr	r3, [pc, #388]	@ (800511c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	091b      	lsrs	r3, r3, #4
 8004f9c:	f003 0307 	and.w	r3, r3, #7
 8004fa0:	1c5a      	adds	r2, r3, #1
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
       ||
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d047      	beq.n	800503a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	73fb      	strb	r3, [r7, #15]
 8004fae:	e044      	b.n	800503a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2b03      	cmp	r3, #3
 8004fb6:	d018      	beq.n	8004fea <RCCEx_PLLSAI2_Config+0x86>
 8004fb8:	2b03      	cmp	r3, #3
 8004fba:	d825      	bhi.n	8005008 <RCCEx_PLLSAI2_Config+0xa4>
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d002      	beq.n	8004fc6 <RCCEx_PLLSAI2_Config+0x62>
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d009      	beq.n	8004fd8 <RCCEx_PLLSAI2_Config+0x74>
 8004fc4:	e020      	b.n	8005008 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004fc6:	4b55      	ldr	r3, [pc, #340]	@ (800511c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d11d      	bne.n	800500e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fd6:	e01a      	b.n	800500e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004fd8:	4b50      	ldr	r3, [pc, #320]	@ (800511c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d116      	bne.n	8005012 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fe8:	e013      	b.n	8005012 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004fea:	4b4c      	ldr	r3, [pc, #304]	@ (800511c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10f      	bne.n	8005016 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ff6:	4b49      	ldr	r3, [pc, #292]	@ (800511c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d109      	bne.n	8005016 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005006:	e006      	b.n	8005016 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	73fb      	strb	r3, [r7, #15]
      break;
 800500c:	e004      	b.n	8005018 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800500e:	bf00      	nop
 8005010:	e002      	b.n	8005018 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005012:	bf00      	nop
 8005014:	e000      	b.n	8005018 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005016:	bf00      	nop
    }

    if(status == HAL_OK)
 8005018:	7bfb      	ldrb	r3, [r7, #15]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10d      	bne.n	800503a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800501e:	4b3f      	ldr	r3, [pc, #252]	@ (800511c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6819      	ldr	r1, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	3b01      	subs	r3, #1
 8005030:	011b      	lsls	r3, r3, #4
 8005032:	430b      	orrs	r3, r1
 8005034:	4939      	ldr	r1, [pc, #228]	@ (800511c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005036:	4313      	orrs	r3, r2
 8005038:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800503a:	7bfb      	ldrb	r3, [r7, #15]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d167      	bne.n	8005110 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005040:	4b36      	ldr	r3, [pc, #216]	@ (800511c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a35      	ldr	r2, [pc, #212]	@ (800511c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005046:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800504a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800504c:	f7fc fe1e 	bl	8001c8c <HAL_GetTick>
 8005050:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005052:	e009      	b.n	8005068 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005054:	f7fc fe1a 	bl	8001c8c <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b02      	cmp	r3, #2
 8005060:	d902      	bls.n	8005068 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	73fb      	strb	r3, [r7, #15]
        break;
 8005066:	e005      	b.n	8005074 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005068:	4b2c      	ldr	r3, [pc, #176]	@ (800511c <RCCEx_PLLSAI2_Config+0x1b8>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1ef      	bne.n	8005054 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005074:	7bfb      	ldrb	r3, [r7, #15]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d14a      	bne.n	8005110 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d111      	bne.n	80050a4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005080:	4b26      	ldr	r3, [pc, #152]	@ (800511c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005088:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	6892      	ldr	r2, [r2, #8]
 8005090:	0211      	lsls	r1, r2, #8
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	68d2      	ldr	r2, [r2, #12]
 8005096:	0912      	lsrs	r2, r2, #4
 8005098:	0452      	lsls	r2, r2, #17
 800509a:	430a      	orrs	r2, r1
 800509c:	491f      	ldr	r1, [pc, #124]	@ (800511c <RCCEx_PLLSAI2_Config+0x1b8>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	614b      	str	r3, [r1, #20]
 80050a2:	e011      	b.n	80050c8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050a4:	4b1d      	ldr	r3, [pc, #116]	@ (800511c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80050ac:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	6892      	ldr	r2, [r2, #8]
 80050b4:	0211      	lsls	r1, r2, #8
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	6912      	ldr	r2, [r2, #16]
 80050ba:	0852      	lsrs	r2, r2, #1
 80050bc:	3a01      	subs	r2, #1
 80050be:	0652      	lsls	r2, r2, #25
 80050c0:	430a      	orrs	r2, r1
 80050c2:	4916      	ldr	r1, [pc, #88]	@ (800511c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80050c8:	4b14      	ldr	r3, [pc, #80]	@ (800511c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a13      	ldr	r2, [pc, #76]	@ (800511c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d4:	f7fc fdda 	bl	8001c8c <HAL_GetTick>
 80050d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80050da:	e009      	b.n	80050f0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80050dc:	f7fc fdd6 	bl	8001c8c <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d902      	bls.n	80050f0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	73fb      	strb	r3, [r7, #15]
          break;
 80050ee:	e005      	b.n	80050fc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80050f0:	4b0a      	ldr	r3, [pc, #40]	@ (800511c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d0ef      	beq.n	80050dc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80050fc:	7bfb      	ldrb	r3, [r7, #15]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d106      	bne.n	8005110 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005102:	4b06      	ldr	r3, [pc, #24]	@ (800511c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005104:	695a      	ldr	r2, [r3, #20]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	4904      	ldr	r1, [pc, #16]	@ (800511c <RCCEx_PLLSAI2_Config+0x1b8>)
 800510c:	4313      	orrs	r3, r2
 800510e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005110:	7bfb      	ldrb	r3, [r7, #15]
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	40021000 	.word	0x40021000

08005120 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e049      	b.n	80051c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d106      	bne.n	800514c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f7fc fc56 	bl	80019f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	3304      	adds	r3, #4
 800515c:	4619      	mov	r1, r3
 800515e:	4610      	mov	r0, r2
 8005160:	f000 faa8 	bl	80056b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
	...

080051d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d001      	beq.n	80051e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e04f      	b.n	8005288 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2202      	movs	r2, #2
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68da      	ldr	r2, [r3, #12]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f042 0201 	orr.w	r2, r2, #1
 80051fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a23      	ldr	r2, [pc, #140]	@ (8005294 <HAL_TIM_Base_Start_IT+0xc4>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d01d      	beq.n	8005246 <HAL_TIM_Base_Start_IT+0x76>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005212:	d018      	beq.n	8005246 <HAL_TIM_Base_Start_IT+0x76>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a1f      	ldr	r2, [pc, #124]	@ (8005298 <HAL_TIM_Base_Start_IT+0xc8>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d013      	beq.n	8005246 <HAL_TIM_Base_Start_IT+0x76>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a1e      	ldr	r2, [pc, #120]	@ (800529c <HAL_TIM_Base_Start_IT+0xcc>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d00e      	beq.n	8005246 <HAL_TIM_Base_Start_IT+0x76>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a1c      	ldr	r2, [pc, #112]	@ (80052a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d009      	beq.n	8005246 <HAL_TIM_Base_Start_IT+0x76>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a1b      	ldr	r2, [pc, #108]	@ (80052a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d004      	beq.n	8005246 <HAL_TIM_Base_Start_IT+0x76>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a19      	ldr	r2, [pc, #100]	@ (80052a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d115      	bne.n	8005272 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	689a      	ldr	r2, [r3, #8]
 800524c:	4b17      	ldr	r3, [pc, #92]	@ (80052ac <HAL_TIM_Base_Start_IT+0xdc>)
 800524e:	4013      	ands	r3, r2
 8005250:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2b06      	cmp	r3, #6
 8005256:	d015      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0xb4>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800525e:	d011      	beq.n	8005284 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f042 0201 	orr.w	r2, r2, #1
 800526e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005270:	e008      	b.n	8005284 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f042 0201 	orr.w	r2, r2, #1
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	e000      	b.n	8005286 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005284:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3714      	adds	r7, #20
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr
 8005294:	40012c00 	.word	0x40012c00
 8005298:	40000400 	.word	0x40000400
 800529c:	40000800 	.word	0x40000800
 80052a0:	40000c00 	.word	0x40000c00
 80052a4:	40013400 	.word	0x40013400
 80052a8:	40014000 	.word	0x40014000
 80052ac:	00010007 	.word	0x00010007

080052b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d020      	beq.n	8005314 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d01b      	beq.n	8005314 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f06f 0202 	mvn.w	r2, #2
 80052e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	f003 0303 	and.w	r3, r3, #3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f9bc 	bl	8005678 <HAL_TIM_IC_CaptureCallback>
 8005300:	e005      	b.n	800530e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f9ae 	bl	8005664 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 f9bf 	bl	800568c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	f003 0304 	and.w	r3, r3, #4
 800531a:	2b00      	cmp	r3, #0
 800531c:	d020      	beq.n	8005360 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f003 0304 	and.w	r3, r3, #4
 8005324:	2b00      	cmp	r3, #0
 8005326:	d01b      	beq.n	8005360 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f06f 0204 	mvn.w	r2, #4
 8005330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2202      	movs	r2, #2
 8005336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f996 	bl	8005678 <HAL_TIM_IC_CaptureCallback>
 800534c:	e005      	b.n	800535a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f988 	bl	8005664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 f999 	bl	800568c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	f003 0308 	and.w	r3, r3, #8
 8005366:	2b00      	cmp	r3, #0
 8005368:	d020      	beq.n	80053ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f003 0308 	and.w	r3, r3, #8
 8005370:	2b00      	cmp	r3, #0
 8005372:	d01b      	beq.n	80053ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f06f 0208 	mvn.w	r2, #8
 800537c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2204      	movs	r2, #4
 8005382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	f003 0303 	and.w	r3, r3, #3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f970 	bl	8005678 <HAL_TIM_IC_CaptureCallback>
 8005398:	e005      	b.n	80053a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f962 	bl	8005664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 f973 	bl	800568c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	f003 0310 	and.w	r3, r3, #16
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d020      	beq.n	80053f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f003 0310 	and.w	r3, r3, #16
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d01b      	beq.n	80053f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f06f 0210 	mvn.w	r2, #16
 80053c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2208      	movs	r2, #8
 80053ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f94a 	bl	8005678 <HAL_TIM_IC_CaptureCallback>
 80053e4:	e005      	b.n	80053f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f93c 	bl	8005664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 f94d 	bl	800568c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00c      	beq.n	800541c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f003 0301 	and.w	r3, r3, #1
 8005408:	2b00      	cmp	r3, #0
 800540a:	d007      	beq.n	800541c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f06f 0201 	mvn.w	r2, #1
 8005414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f91a 	bl	8005650 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005422:	2b00      	cmp	r3, #0
 8005424:	d104      	bne.n	8005430 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00c      	beq.n	800544a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005436:	2b00      	cmp	r3, #0
 8005438:	d007      	beq.n	800544a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 fb07 	bl	8005a58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00c      	beq.n	800546e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800545a:	2b00      	cmp	r3, #0
 800545c:	d007      	beq.n	800546e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 faff 	bl	8005a6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00c      	beq.n	8005492 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800547e:	2b00      	cmp	r3, #0
 8005480:	d007      	beq.n	8005492 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800548a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 f907 	bl	80056a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	f003 0320 	and.w	r3, r3, #32
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00c      	beq.n	80054b6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f003 0320 	and.w	r3, r3, #32
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d007      	beq.n	80054b6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f06f 0220 	mvn.w	r2, #32
 80054ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 fac7 	bl	8005a44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054b6:	bf00      	nop
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b084      	sub	sp, #16
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
 80054c6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054c8:	2300      	movs	r3, #0
 80054ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d101      	bne.n	80054da <HAL_TIM_ConfigClockSource+0x1c>
 80054d6:	2302      	movs	r3, #2
 80054d8:	e0b6      	b.n	8005648 <HAL_TIM_ConfigClockSource+0x18a>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2202      	movs	r2, #2
 80054e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054f8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80054fc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005504:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005516:	d03e      	beq.n	8005596 <HAL_TIM_ConfigClockSource+0xd8>
 8005518:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800551c:	f200 8087 	bhi.w	800562e <HAL_TIM_ConfigClockSource+0x170>
 8005520:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005524:	f000 8086 	beq.w	8005634 <HAL_TIM_ConfigClockSource+0x176>
 8005528:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800552c:	d87f      	bhi.n	800562e <HAL_TIM_ConfigClockSource+0x170>
 800552e:	2b70      	cmp	r3, #112	@ 0x70
 8005530:	d01a      	beq.n	8005568 <HAL_TIM_ConfigClockSource+0xaa>
 8005532:	2b70      	cmp	r3, #112	@ 0x70
 8005534:	d87b      	bhi.n	800562e <HAL_TIM_ConfigClockSource+0x170>
 8005536:	2b60      	cmp	r3, #96	@ 0x60
 8005538:	d050      	beq.n	80055dc <HAL_TIM_ConfigClockSource+0x11e>
 800553a:	2b60      	cmp	r3, #96	@ 0x60
 800553c:	d877      	bhi.n	800562e <HAL_TIM_ConfigClockSource+0x170>
 800553e:	2b50      	cmp	r3, #80	@ 0x50
 8005540:	d03c      	beq.n	80055bc <HAL_TIM_ConfigClockSource+0xfe>
 8005542:	2b50      	cmp	r3, #80	@ 0x50
 8005544:	d873      	bhi.n	800562e <HAL_TIM_ConfigClockSource+0x170>
 8005546:	2b40      	cmp	r3, #64	@ 0x40
 8005548:	d058      	beq.n	80055fc <HAL_TIM_ConfigClockSource+0x13e>
 800554a:	2b40      	cmp	r3, #64	@ 0x40
 800554c:	d86f      	bhi.n	800562e <HAL_TIM_ConfigClockSource+0x170>
 800554e:	2b30      	cmp	r3, #48	@ 0x30
 8005550:	d064      	beq.n	800561c <HAL_TIM_ConfigClockSource+0x15e>
 8005552:	2b30      	cmp	r3, #48	@ 0x30
 8005554:	d86b      	bhi.n	800562e <HAL_TIM_ConfigClockSource+0x170>
 8005556:	2b20      	cmp	r3, #32
 8005558:	d060      	beq.n	800561c <HAL_TIM_ConfigClockSource+0x15e>
 800555a:	2b20      	cmp	r3, #32
 800555c:	d867      	bhi.n	800562e <HAL_TIM_ConfigClockSource+0x170>
 800555e:	2b00      	cmp	r3, #0
 8005560:	d05c      	beq.n	800561c <HAL_TIM_ConfigClockSource+0x15e>
 8005562:	2b10      	cmp	r3, #16
 8005564:	d05a      	beq.n	800561c <HAL_TIM_ConfigClockSource+0x15e>
 8005566:	e062      	b.n	800562e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005578:	f000 f9bc 	bl	80058f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800558a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68ba      	ldr	r2, [r7, #8]
 8005592:	609a      	str	r2, [r3, #8]
      break;
 8005594:	e04f      	b.n	8005636 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055a6:	f000 f9a5 	bl	80058f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	689a      	ldr	r2, [r3, #8]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80055b8:	609a      	str	r2, [r3, #8]
      break;
 80055ba:	e03c      	b.n	8005636 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055c8:	461a      	mov	r2, r3
 80055ca:	f000 f919 	bl	8005800 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2150      	movs	r1, #80	@ 0x50
 80055d4:	4618      	mov	r0, r3
 80055d6:	f000 f972 	bl	80058be <TIM_ITRx_SetConfig>
      break;
 80055da:	e02c      	b.n	8005636 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055e8:	461a      	mov	r2, r3
 80055ea:	f000 f938 	bl	800585e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2160      	movs	r1, #96	@ 0x60
 80055f4:	4618      	mov	r0, r3
 80055f6:	f000 f962 	bl	80058be <TIM_ITRx_SetConfig>
      break;
 80055fa:	e01c      	b.n	8005636 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005608:	461a      	mov	r2, r3
 800560a:	f000 f8f9 	bl	8005800 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2140      	movs	r1, #64	@ 0x40
 8005614:	4618      	mov	r0, r3
 8005616:	f000 f952 	bl	80058be <TIM_ITRx_SetConfig>
      break;
 800561a:	e00c      	b.n	8005636 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4619      	mov	r1, r3
 8005626:	4610      	mov	r0, r2
 8005628:	f000 f949 	bl	80058be <TIM_ITRx_SetConfig>
      break;
 800562c:	e003      	b.n	8005636 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	73fb      	strb	r3, [r7, #15]
      break;
 8005632:	e000      	b.n	8005636 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005634:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005646:	7bfb      	ldrb	r3, [r7, #15]
}
 8005648:	4618      	mov	r0, r3
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a46      	ldr	r2, [pc, #280]	@ (80057e0 <TIM_Base_SetConfig+0x12c>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d013      	beq.n	80056f4 <TIM_Base_SetConfig+0x40>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056d2:	d00f      	beq.n	80056f4 <TIM_Base_SetConfig+0x40>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a43      	ldr	r2, [pc, #268]	@ (80057e4 <TIM_Base_SetConfig+0x130>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d00b      	beq.n	80056f4 <TIM_Base_SetConfig+0x40>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a42      	ldr	r2, [pc, #264]	@ (80057e8 <TIM_Base_SetConfig+0x134>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d007      	beq.n	80056f4 <TIM_Base_SetConfig+0x40>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a41      	ldr	r2, [pc, #260]	@ (80057ec <TIM_Base_SetConfig+0x138>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d003      	beq.n	80056f4 <TIM_Base_SetConfig+0x40>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a40      	ldr	r2, [pc, #256]	@ (80057f0 <TIM_Base_SetConfig+0x13c>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d108      	bne.n	8005706 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	4313      	orrs	r3, r2
 8005704:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a35      	ldr	r2, [pc, #212]	@ (80057e0 <TIM_Base_SetConfig+0x12c>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d01f      	beq.n	800574e <TIM_Base_SetConfig+0x9a>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005714:	d01b      	beq.n	800574e <TIM_Base_SetConfig+0x9a>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a32      	ldr	r2, [pc, #200]	@ (80057e4 <TIM_Base_SetConfig+0x130>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d017      	beq.n	800574e <TIM_Base_SetConfig+0x9a>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a31      	ldr	r2, [pc, #196]	@ (80057e8 <TIM_Base_SetConfig+0x134>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d013      	beq.n	800574e <TIM_Base_SetConfig+0x9a>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a30      	ldr	r2, [pc, #192]	@ (80057ec <TIM_Base_SetConfig+0x138>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d00f      	beq.n	800574e <TIM_Base_SetConfig+0x9a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a2f      	ldr	r2, [pc, #188]	@ (80057f0 <TIM_Base_SetConfig+0x13c>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d00b      	beq.n	800574e <TIM_Base_SetConfig+0x9a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a2e      	ldr	r2, [pc, #184]	@ (80057f4 <TIM_Base_SetConfig+0x140>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d007      	beq.n	800574e <TIM_Base_SetConfig+0x9a>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a2d      	ldr	r2, [pc, #180]	@ (80057f8 <TIM_Base_SetConfig+0x144>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d003      	beq.n	800574e <TIM_Base_SetConfig+0x9a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a2c      	ldr	r2, [pc, #176]	@ (80057fc <TIM_Base_SetConfig+0x148>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d108      	bne.n	8005760 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005754:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	4313      	orrs	r3, r2
 800575e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	4313      	orrs	r3, r2
 800576c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	689a      	ldr	r2, [r3, #8]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a16      	ldr	r2, [pc, #88]	@ (80057e0 <TIM_Base_SetConfig+0x12c>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d00f      	beq.n	80057ac <TIM_Base_SetConfig+0xf8>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a18      	ldr	r2, [pc, #96]	@ (80057f0 <TIM_Base_SetConfig+0x13c>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d00b      	beq.n	80057ac <TIM_Base_SetConfig+0xf8>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a17      	ldr	r2, [pc, #92]	@ (80057f4 <TIM_Base_SetConfig+0x140>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d007      	beq.n	80057ac <TIM_Base_SetConfig+0xf8>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a16      	ldr	r2, [pc, #88]	@ (80057f8 <TIM_Base_SetConfig+0x144>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d003      	beq.n	80057ac <TIM_Base_SetConfig+0xf8>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a15      	ldr	r2, [pc, #84]	@ (80057fc <TIM_Base_SetConfig+0x148>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d103      	bne.n	80057b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	691a      	ldr	r2, [r3, #16]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d105      	bne.n	80057d2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	f023 0201 	bic.w	r2, r3, #1
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	611a      	str	r2, [r3, #16]
  }
}
 80057d2:	bf00      	nop
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	40012c00 	.word	0x40012c00
 80057e4:	40000400 	.word	0x40000400
 80057e8:	40000800 	.word	0x40000800
 80057ec:	40000c00 	.word	0x40000c00
 80057f0:	40013400 	.word	0x40013400
 80057f4:	40014000 	.word	0x40014000
 80057f8:	40014400 	.word	0x40014400
 80057fc:	40014800 	.word	0x40014800

08005800 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6a1b      	ldr	r3, [r3, #32]
 8005810:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	f023 0201 	bic.w	r2, r3, #1
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800582a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	011b      	lsls	r3, r3, #4
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	4313      	orrs	r3, r2
 8005834:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	f023 030a 	bic.w	r3, r3, #10
 800583c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	4313      	orrs	r3, r2
 8005844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	621a      	str	r2, [r3, #32]
}
 8005852:	bf00      	nop
 8005854:	371c      	adds	r7, #28
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800585e:	b480      	push	{r7}
 8005860:	b087      	sub	sp, #28
 8005862:	af00      	add	r7, sp, #0
 8005864:	60f8      	str	r0, [r7, #12]
 8005866:	60b9      	str	r1, [r7, #8]
 8005868:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6a1b      	ldr	r3, [r3, #32]
 8005874:	f023 0210 	bic.w	r2, r3, #16
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005888:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	031b      	lsls	r3, r3, #12
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	4313      	orrs	r3, r2
 8005892:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800589a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	011b      	lsls	r3, r3, #4
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	621a      	str	r2, [r3, #32]
}
 80058b2:	bf00      	nop
 80058b4:	371c      	adds	r7, #28
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr

080058be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058be:	b480      	push	{r7}
 80058c0:	b085      	sub	sp, #20
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
 80058c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058d6:	683a      	ldr	r2, [r7, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	4313      	orrs	r3, r2
 80058dc:	f043 0307 	orr.w	r3, r3, #7
 80058e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	609a      	str	r2, [r3, #8]
}
 80058e8:	bf00      	nop
 80058ea:	3714      	adds	r7, #20
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b087      	sub	sp, #28
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
 8005900:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800590e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	021a      	lsls	r2, r3, #8
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	431a      	orrs	r2, r3
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	4313      	orrs	r3, r2
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	4313      	orrs	r3, r2
 8005920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	609a      	str	r2, [r3, #8]
}
 8005928:	bf00      	nop
 800592a:	371c      	adds	r7, #28
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005944:	2b01      	cmp	r3, #1
 8005946:	d101      	bne.n	800594c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005948:	2302      	movs	r3, #2
 800594a:	e068      	b.n	8005a1e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2202      	movs	r2, #2
 8005958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a2e      	ldr	r2, [pc, #184]	@ (8005a2c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d004      	beq.n	8005980 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a2d      	ldr	r2, [pc, #180]	@ (8005a30 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d108      	bne.n	8005992 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005986:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	4313      	orrs	r3, r2
 8005990:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005998:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a1e      	ldr	r2, [pc, #120]	@ (8005a2c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d01d      	beq.n	80059f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059be:	d018      	beq.n	80059f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a1b      	ldr	r2, [pc, #108]	@ (8005a34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d013      	beq.n	80059f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a1a      	ldr	r2, [pc, #104]	@ (8005a38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d00e      	beq.n	80059f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a18      	ldr	r2, [pc, #96]	@ (8005a3c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d009      	beq.n	80059f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a13      	ldr	r2, [pc, #76]	@ (8005a30 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d004      	beq.n	80059f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a14      	ldr	r2, [pc, #80]	@ (8005a40 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d10c      	bne.n	8005a0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3714      	adds	r7, #20
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	40012c00 	.word	0x40012c00
 8005a30:	40013400 	.word	0x40013400
 8005a34:	40000400 	.word	0x40000400
 8005a38:	40000800 	.word	0x40000800
 8005a3c:	40000c00 	.word	0x40000c00
 8005a40:	40014000 	.word	0x40014000

08005a44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d101      	bne.n	8005a92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e040      	b.n	8005b14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d106      	bne.n	8005aa8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f7fb fffc 	bl	8001aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2224      	movs	r2, #36	@ 0x24
 8005aac:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f022 0201 	bic.w	r2, r2, #1
 8005abc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d002      	beq.n	8005acc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 fc32 	bl	8006330 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 f977 	bl	8005dc0 <UART_SetConfig>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d101      	bne.n	8005adc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e01b      	b.n	8005b14 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005aea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	689a      	ldr	r2, [r3, #8]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005afa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f042 0201 	orr.w	r2, r2, #1
 8005b0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 fcb1 	bl	8006474 <UART_CheckIdleState>
 8005b12:	4603      	mov	r3, r0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3708      	adds	r7, #8
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b08a      	sub	sp, #40	@ 0x28
 8005b20:	af02      	add	r7, sp, #8
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	603b      	str	r3, [r7, #0]
 8005b28:	4613      	mov	r3, r2
 8005b2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b30:	2b20      	cmp	r3, #32
 8005b32:	d177      	bne.n	8005c24 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d002      	beq.n	8005b40 <HAL_UART_Transmit+0x24>
 8005b3a:	88fb      	ldrh	r3, [r7, #6]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d101      	bne.n	8005b44 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e070      	b.n	8005c26 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2221      	movs	r2, #33	@ 0x21
 8005b50:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b52:	f7fc f89b 	bl	8001c8c <HAL_GetTick>
 8005b56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	88fa      	ldrh	r2, [r7, #6]
 8005b5c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	88fa      	ldrh	r2, [r7, #6]
 8005b64:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b70:	d108      	bne.n	8005b84 <HAL_UART_Transmit+0x68>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d104      	bne.n	8005b84 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	61bb      	str	r3, [r7, #24]
 8005b82:	e003      	b.n	8005b8c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b8c:	e02f      	b.n	8005bee <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	9300      	str	r3, [sp, #0]
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2200      	movs	r2, #0
 8005b96:	2180      	movs	r1, #128	@ 0x80
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f000 fd13 	bl	80065c4 <UART_WaitOnFlagUntilTimeout>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d004      	beq.n	8005bae <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e03b      	b.n	8005c26 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10b      	bne.n	8005bcc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	881a      	ldrh	r2, [r3, #0]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bc0:	b292      	uxth	r2, r2
 8005bc2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	3302      	adds	r3, #2
 8005bc8:	61bb      	str	r3, [r7, #24]
 8005bca:	e007      	b.n	8005bdc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	781a      	ldrb	r2, [r3, #0]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	3b01      	subs	r3, #1
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1c9      	bne.n	8005b8e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	9300      	str	r3, [sp, #0]
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	2200      	movs	r2, #0
 8005c02:	2140      	movs	r1, #64	@ 0x40
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f000 fcdd 	bl	80065c4 <UART_WaitOnFlagUntilTimeout>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d004      	beq.n	8005c1a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2220      	movs	r2, #32
 8005c14:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e005      	b.n	8005c26 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005c20:	2300      	movs	r3, #0
 8005c22:	e000      	b.n	8005c26 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005c24:	2302      	movs	r3, #2
  }
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3720      	adds	r7, #32
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b08a      	sub	sp, #40	@ 0x28
 8005c32:	af02      	add	r7, sp, #8
 8005c34:	60f8      	str	r0, [r7, #12]
 8005c36:	60b9      	str	r1, [r7, #8]
 8005c38:	603b      	str	r3, [r7, #0]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c44:	2b20      	cmp	r3, #32
 8005c46:	f040 80b6 	bne.w	8005db6 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d002      	beq.n	8005c56 <HAL_UART_Receive+0x28>
 8005c50:	88fb      	ldrh	r3, [r7, #6]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d101      	bne.n	8005c5a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e0ae      	b.n	8005db8 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2222      	movs	r2, #34	@ 0x22
 8005c66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c70:	f7fc f80c 	bl	8001c8c <HAL_GetTick>
 8005c74:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	88fa      	ldrh	r2, [r7, #6]
 8005c7a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	88fa      	ldrh	r2, [r7, #6]
 8005c82:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c8e:	d10e      	bne.n	8005cae <HAL_UART_Receive+0x80>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d105      	bne.n	8005ca4 <HAL_UART_Receive+0x76>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005c9e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005ca2:	e02d      	b.n	8005d00 <HAL_UART_Receive+0xd2>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	22ff      	movs	r2, #255	@ 0xff
 8005ca8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005cac:	e028      	b.n	8005d00 <HAL_UART_Receive+0xd2>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10d      	bne.n	8005cd2 <HAL_UART_Receive+0xa4>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d104      	bne.n	8005cc8 <HAL_UART_Receive+0x9a>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	22ff      	movs	r2, #255	@ 0xff
 8005cc2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005cc6:	e01b      	b.n	8005d00 <HAL_UART_Receive+0xd2>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	227f      	movs	r2, #127	@ 0x7f
 8005ccc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005cd0:	e016      	b.n	8005d00 <HAL_UART_Receive+0xd2>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005cda:	d10d      	bne.n	8005cf8 <HAL_UART_Receive+0xca>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d104      	bne.n	8005cee <HAL_UART_Receive+0xc0>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	227f      	movs	r2, #127	@ 0x7f
 8005ce8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005cec:	e008      	b.n	8005d00 <HAL_UART_Receive+0xd2>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	223f      	movs	r2, #63	@ 0x3f
 8005cf2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005cf6:	e003      	b.n	8005d00 <HAL_UART_Receive+0xd2>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005d06:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d10:	d108      	bne.n	8005d24 <HAL_UART_Receive+0xf6>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d104      	bne.n	8005d24 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	61bb      	str	r3, [r7, #24]
 8005d22:	e003      	b.n	8005d2c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005d2c:	e037      	b.n	8005d9e <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	2200      	movs	r2, #0
 8005d36:	2120      	movs	r1, #32
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f000 fc43 	bl	80065c4 <UART_WaitOnFlagUntilTimeout>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d005      	beq.n	8005d50 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2220      	movs	r2, #32
 8005d48:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e033      	b.n	8005db8 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10c      	bne.n	8005d70 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	8a7b      	ldrh	r3, [r7, #18]
 8005d60:	4013      	ands	r3, r2
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	3302      	adds	r3, #2
 8005d6c:	61bb      	str	r3, [r7, #24]
 8005d6e:	e00d      	b.n	8005d8c <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	8a7b      	ldrh	r3, [r7, #18]
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	4013      	ands	r3, r2
 8005d80:	b2da      	uxtb	r2, r3
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	3b01      	subs	r3, #1
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1c1      	bne.n	8005d2e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2220      	movs	r2, #32
 8005dae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8005db2:	2300      	movs	r3, #0
 8005db4:	e000      	b.n	8005db8 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8005db6:	2302      	movs	r3, #2
  }
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3720      	adds	r7, #32
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005dc4:	b08a      	sub	sp, #40	@ 0x28
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	689a      	ldr	r2, [r3, #8]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	431a      	orrs	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	695b      	ldr	r3, [r3, #20]
 8005dde:	431a      	orrs	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	69db      	ldr	r3, [r3, #28]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	4ba4      	ldr	r3, [pc, #656]	@ (8006080 <UART_SetConfig+0x2c0>)
 8005df0:	4013      	ands	r3, r2
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	6812      	ldr	r2, [r2, #0]
 8005df6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005df8:	430b      	orrs	r3, r1
 8005dfa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	68da      	ldr	r2, [r3, #12]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a99      	ldr	r2, [pc, #612]	@ (8006084 <UART_SetConfig+0x2c4>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d004      	beq.n	8005e2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a90      	ldr	r2, [pc, #576]	@ (8006088 <UART_SetConfig+0x2c8>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d126      	bne.n	8005e98 <UART_SetConfig+0xd8>
 8005e4a:	4b90      	ldr	r3, [pc, #576]	@ (800608c <UART_SetConfig+0x2cc>)
 8005e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e50:	f003 0303 	and.w	r3, r3, #3
 8005e54:	2b03      	cmp	r3, #3
 8005e56:	d81b      	bhi.n	8005e90 <UART_SetConfig+0xd0>
 8005e58:	a201      	add	r2, pc, #4	@ (adr r2, 8005e60 <UART_SetConfig+0xa0>)
 8005e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5e:	bf00      	nop
 8005e60:	08005e71 	.word	0x08005e71
 8005e64:	08005e81 	.word	0x08005e81
 8005e68:	08005e79 	.word	0x08005e79
 8005e6c:	08005e89 	.word	0x08005e89
 8005e70:	2301      	movs	r3, #1
 8005e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e76:	e116      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8005e78:	2302      	movs	r3, #2
 8005e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e7e:	e112      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8005e80:	2304      	movs	r3, #4
 8005e82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e86:	e10e      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8005e88:	2308      	movs	r3, #8
 8005e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e8e:	e10a      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8005e90:	2310      	movs	r3, #16
 8005e92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e96:	e106      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a7c      	ldr	r2, [pc, #496]	@ (8006090 <UART_SetConfig+0x2d0>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d138      	bne.n	8005f14 <UART_SetConfig+0x154>
 8005ea2:	4b7a      	ldr	r3, [pc, #488]	@ (800608c <UART_SetConfig+0x2cc>)
 8005ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ea8:	f003 030c 	and.w	r3, r3, #12
 8005eac:	2b0c      	cmp	r3, #12
 8005eae:	d82d      	bhi.n	8005f0c <UART_SetConfig+0x14c>
 8005eb0:	a201      	add	r2, pc, #4	@ (adr r2, 8005eb8 <UART_SetConfig+0xf8>)
 8005eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb6:	bf00      	nop
 8005eb8:	08005eed 	.word	0x08005eed
 8005ebc:	08005f0d 	.word	0x08005f0d
 8005ec0:	08005f0d 	.word	0x08005f0d
 8005ec4:	08005f0d 	.word	0x08005f0d
 8005ec8:	08005efd 	.word	0x08005efd
 8005ecc:	08005f0d 	.word	0x08005f0d
 8005ed0:	08005f0d 	.word	0x08005f0d
 8005ed4:	08005f0d 	.word	0x08005f0d
 8005ed8:	08005ef5 	.word	0x08005ef5
 8005edc:	08005f0d 	.word	0x08005f0d
 8005ee0:	08005f0d 	.word	0x08005f0d
 8005ee4:	08005f0d 	.word	0x08005f0d
 8005ee8:	08005f05 	.word	0x08005f05
 8005eec:	2300      	movs	r3, #0
 8005eee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ef2:	e0d8      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005efa:	e0d4      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8005efc:	2304      	movs	r3, #4
 8005efe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f02:	e0d0      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8005f04:	2308      	movs	r3, #8
 8005f06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f0a:	e0cc      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8005f0c:	2310      	movs	r3, #16
 8005f0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f12:	e0c8      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a5e      	ldr	r2, [pc, #376]	@ (8006094 <UART_SetConfig+0x2d4>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d125      	bne.n	8005f6a <UART_SetConfig+0x1aa>
 8005f1e:	4b5b      	ldr	r3, [pc, #364]	@ (800608c <UART_SetConfig+0x2cc>)
 8005f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f24:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005f28:	2b30      	cmp	r3, #48	@ 0x30
 8005f2a:	d016      	beq.n	8005f5a <UART_SetConfig+0x19a>
 8005f2c:	2b30      	cmp	r3, #48	@ 0x30
 8005f2e:	d818      	bhi.n	8005f62 <UART_SetConfig+0x1a2>
 8005f30:	2b20      	cmp	r3, #32
 8005f32:	d00a      	beq.n	8005f4a <UART_SetConfig+0x18a>
 8005f34:	2b20      	cmp	r3, #32
 8005f36:	d814      	bhi.n	8005f62 <UART_SetConfig+0x1a2>
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d002      	beq.n	8005f42 <UART_SetConfig+0x182>
 8005f3c:	2b10      	cmp	r3, #16
 8005f3e:	d008      	beq.n	8005f52 <UART_SetConfig+0x192>
 8005f40:	e00f      	b.n	8005f62 <UART_SetConfig+0x1a2>
 8005f42:	2300      	movs	r3, #0
 8005f44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f48:	e0ad      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f50:	e0a9      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8005f52:	2304      	movs	r3, #4
 8005f54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f58:	e0a5      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8005f5a:	2308      	movs	r3, #8
 8005f5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f60:	e0a1      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8005f62:	2310      	movs	r3, #16
 8005f64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f68:	e09d      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a4a      	ldr	r2, [pc, #296]	@ (8006098 <UART_SetConfig+0x2d8>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d125      	bne.n	8005fc0 <UART_SetConfig+0x200>
 8005f74:	4b45      	ldr	r3, [pc, #276]	@ (800608c <UART_SetConfig+0x2cc>)
 8005f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f7a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005f7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005f80:	d016      	beq.n	8005fb0 <UART_SetConfig+0x1f0>
 8005f82:	2bc0      	cmp	r3, #192	@ 0xc0
 8005f84:	d818      	bhi.n	8005fb8 <UART_SetConfig+0x1f8>
 8005f86:	2b80      	cmp	r3, #128	@ 0x80
 8005f88:	d00a      	beq.n	8005fa0 <UART_SetConfig+0x1e0>
 8005f8a:	2b80      	cmp	r3, #128	@ 0x80
 8005f8c:	d814      	bhi.n	8005fb8 <UART_SetConfig+0x1f8>
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d002      	beq.n	8005f98 <UART_SetConfig+0x1d8>
 8005f92:	2b40      	cmp	r3, #64	@ 0x40
 8005f94:	d008      	beq.n	8005fa8 <UART_SetConfig+0x1e8>
 8005f96:	e00f      	b.n	8005fb8 <UART_SetConfig+0x1f8>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f9e:	e082      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fa6:	e07e      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8005fa8:	2304      	movs	r3, #4
 8005faa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fae:	e07a      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8005fb0:	2308      	movs	r3, #8
 8005fb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fb6:	e076      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8005fb8:	2310      	movs	r3, #16
 8005fba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fbe:	e072      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a35      	ldr	r2, [pc, #212]	@ (800609c <UART_SetConfig+0x2dc>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d12a      	bne.n	8006020 <UART_SetConfig+0x260>
 8005fca:	4b30      	ldr	r3, [pc, #192]	@ (800608c <UART_SetConfig+0x2cc>)
 8005fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fd8:	d01a      	beq.n	8006010 <UART_SetConfig+0x250>
 8005fda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fde:	d81b      	bhi.n	8006018 <UART_SetConfig+0x258>
 8005fe0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fe4:	d00c      	beq.n	8006000 <UART_SetConfig+0x240>
 8005fe6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fea:	d815      	bhi.n	8006018 <UART_SetConfig+0x258>
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d003      	beq.n	8005ff8 <UART_SetConfig+0x238>
 8005ff0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ff4:	d008      	beq.n	8006008 <UART_SetConfig+0x248>
 8005ff6:	e00f      	b.n	8006018 <UART_SetConfig+0x258>
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ffe:	e052      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8006000:	2302      	movs	r3, #2
 8006002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006006:	e04e      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8006008:	2304      	movs	r3, #4
 800600a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800600e:	e04a      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8006010:	2308      	movs	r3, #8
 8006012:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006016:	e046      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8006018:	2310      	movs	r3, #16
 800601a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800601e:	e042      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a17      	ldr	r2, [pc, #92]	@ (8006084 <UART_SetConfig+0x2c4>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d13a      	bne.n	80060a0 <UART_SetConfig+0x2e0>
 800602a:	4b18      	ldr	r3, [pc, #96]	@ (800608c <UART_SetConfig+0x2cc>)
 800602c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006030:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006034:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006038:	d01a      	beq.n	8006070 <UART_SetConfig+0x2b0>
 800603a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800603e:	d81b      	bhi.n	8006078 <UART_SetConfig+0x2b8>
 8006040:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006044:	d00c      	beq.n	8006060 <UART_SetConfig+0x2a0>
 8006046:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800604a:	d815      	bhi.n	8006078 <UART_SetConfig+0x2b8>
 800604c:	2b00      	cmp	r3, #0
 800604e:	d003      	beq.n	8006058 <UART_SetConfig+0x298>
 8006050:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006054:	d008      	beq.n	8006068 <UART_SetConfig+0x2a8>
 8006056:	e00f      	b.n	8006078 <UART_SetConfig+0x2b8>
 8006058:	2300      	movs	r3, #0
 800605a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800605e:	e022      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8006060:	2302      	movs	r3, #2
 8006062:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006066:	e01e      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8006068:	2304      	movs	r3, #4
 800606a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800606e:	e01a      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8006070:	2308      	movs	r3, #8
 8006072:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006076:	e016      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8006078:	2310      	movs	r3, #16
 800607a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800607e:	e012      	b.n	80060a6 <UART_SetConfig+0x2e6>
 8006080:	efff69f3 	.word	0xefff69f3
 8006084:	40008000 	.word	0x40008000
 8006088:	40013800 	.word	0x40013800
 800608c:	40021000 	.word	0x40021000
 8006090:	40004400 	.word	0x40004400
 8006094:	40004800 	.word	0x40004800
 8006098:	40004c00 	.word	0x40004c00
 800609c:	40005000 	.word	0x40005000
 80060a0:	2310      	movs	r3, #16
 80060a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a9f      	ldr	r2, [pc, #636]	@ (8006328 <UART_SetConfig+0x568>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d17a      	bne.n	80061a6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80060b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80060b4:	2b08      	cmp	r3, #8
 80060b6:	d824      	bhi.n	8006102 <UART_SetConfig+0x342>
 80060b8:	a201      	add	r2, pc, #4	@ (adr r2, 80060c0 <UART_SetConfig+0x300>)
 80060ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060be:	bf00      	nop
 80060c0:	080060e5 	.word	0x080060e5
 80060c4:	08006103 	.word	0x08006103
 80060c8:	080060ed 	.word	0x080060ed
 80060cc:	08006103 	.word	0x08006103
 80060d0:	080060f3 	.word	0x080060f3
 80060d4:	08006103 	.word	0x08006103
 80060d8:	08006103 	.word	0x08006103
 80060dc:	08006103 	.word	0x08006103
 80060e0:	080060fb 	.word	0x080060fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060e4:	f7fe fad4 	bl	8004690 <HAL_RCC_GetPCLK1Freq>
 80060e8:	61f8      	str	r0, [r7, #28]
        break;
 80060ea:	e010      	b.n	800610e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060ec:	4b8f      	ldr	r3, [pc, #572]	@ (800632c <UART_SetConfig+0x56c>)
 80060ee:	61fb      	str	r3, [r7, #28]
        break;
 80060f0:	e00d      	b.n	800610e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060f2:	f7fe fa35 	bl	8004560 <HAL_RCC_GetSysClockFreq>
 80060f6:	61f8      	str	r0, [r7, #28]
        break;
 80060f8:	e009      	b.n	800610e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060fe:	61fb      	str	r3, [r7, #28]
        break;
 8006100:	e005      	b.n	800610e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006102:	2300      	movs	r3, #0
 8006104:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800610c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 80fb 	beq.w	800630c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	685a      	ldr	r2, [r3, #4]
 800611a:	4613      	mov	r3, r2
 800611c:	005b      	lsls	r3, r3, #1
 800611e:	4413      	add	r3, r2
 8006120:	69fa      	ldr	r2, [r7, #28]
 8006122:	429a      	cmp	r2, r3
 8006124:	d305      	bcc.n	8006132 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800612c:	69fa      	ldr	r2, [r7, #28]
 800612e:	429a      	cmp	r2, r3
 8006130:	d903      	bls.n	800613a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006138:	e0e8      	b.n	800630c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	2200      	movs	r2, #0
 800613e:	461c      	mov	r4, r3
 8006140:	4615      	mov	r5, r2
 8006142:	f04f 0200 	mov.w	r2, #0
 8006146:	f04f 0300 	mov.w	r3, #0
 800614a:	022b      	lsls	r3, r5, #8
 800614c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006150:	0222      	lsls	r2, r4, #8
 8006152:	68f9      	ldr	r1, [r7, #12]
 8006154:	6849      	ldr	r1, [r1, #4]
 8006156:	0849      	lsrs	r1, r1, #1
 8006158:	2000      	movs	r0, #0
 800615a:	4688      	mov	r8, r1
 800615c:	4681      	mov	r9, r0
 800615e:	eb12 0a08 	adds.w	sl, r2, r8
 8006162:	eb43 0b09 	adc.w	fp, r3, r9
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	603b      	str	r3, [r7, #0]
 800616e:	607a      	str	r2, [r7, #4]
 8006170:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006174:	4650      	mov	r0, sl
 8006176:	4659      	mov	r1, fp
 8006178:	f7fa fd86 	bl	8000c88 <__aeabi_uldivmod>
 800617c:	4602      	mov	r2, r0
 800617e:	460b      	mov	r3, r1
 8006180:	4613      	mov	r3, r2
 8006182:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800618a:	d308      	bcc.n	800619e <UART_SetConfig+0x3de>
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006192:	d204      	bcs.n	800619e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	69ba      	ldr	r2, [r7, #24]
 800619a:	60da      	str	r2, [r3, #12]
 800619c:	e0b6      	b.n	800630c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80061a4:	e0b2      	b.n	800630c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	69db      	ldr	r3, [r3, #28]
 80061aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061ae:	d15e      	bne.n	800626e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80061b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80061b4:	2b08      	cmp	r3, #8
 80061b6:	d828      	bhi.n	800620a <UART_SetConfig+0x44a>
 80061b8:	a201      	add	r2, pc, #4	@ (adr r2, 80061c0 <UART_SetConfig+0x400>)
 80061ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061be:	bf00      	nop
 80061c0:	080061e5 	.word	0x080061e5
 80061c4:	080061ed 	.word	0x080061ed
 80061c8:	080061f5 	.word	0x080061f5
 80061cc:	0800620b 	.word	0x0800620b
 80061d0:	080061fb 	.word	0x080061fb
 80061d4:	0800620b 	.word	0x0800620b
 80061d8:	0800620b 	.word	0x0800620b
 80061dc:	0800620b 	.word	0x0800620b
 80061e0:	08006203 	.word	0x08006203
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061e4:	f7fe fa54 	bl	8004690 <HAL_RCC_GetPCLK1Freq>
 80061e8:	61f8      	str	r0, [r7, #28]
        break;
 80061ea:	e014      	b.n	8006216 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061ec:	f7fe fa66 	bl	80046bc <HAL_RCC_GetPCLK2Freq>
 80061f0:	61f8      	str	r0, [r7, #28]
        break;
 80061f2:	e010      	b.n	8006216 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061f4:	4b4d      	ldr	r3, [pc, #308]	@ (800632c <UART_SetConfig+0x56c>)
 80061f6:	61fb      	str	r3, [r7, #28]
        break;
 80061f8:	e00d      	b.n	8006216 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061fa:	f7fe f9b1 	bl	8004560 <HAL_RCC_GetSysClockFreq>
 80061fe:	61f8      	str	r0, [r7, #28]
        break;
 8006200:	e009      	b.n	8006216 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006202:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006206:	61fb      	str	r3, [r7, #28]
        break;
 8006208:	e005      	b.n	8006216 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800620a:	2300      	movs	r3, #0
 800620c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006214:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d077      	beq.n	800630c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	005a      	lsls	r2, r3, #1
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	085b      	lsrs	r3, r3, #1
 8006226:	441a      	add	r2, r3
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006230:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	2b0f      	cmp	r3, #15
 8006236:	d916      	bls.n	8006266 <UART_SetConfig+0x4a6>
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800623e:	d212      	bcs.n	8006266 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	b29b      	uxth	r3, r3
 8006244:	f023 030f 	bic.w	r3, r3, #15
 8006248:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	085b      	lsrs	r3, r3, #1
 800624e:	b29b      	uxth	r3, r3
 8006250:	f003 0307 	and.w	r3, r3, #7
 8006254:	b29a      	uxth	r2, r3
 8006256:	8afb      	ldrh	r3, [r7, #22]
 8006258:	4313      	orrs	r3, r2
 800625a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	8afa      	ldrh	r2, [r7, #22]
 8006262:	60da      	str	r2, [r3, #12]
 8006264:	e052      	b.n	800630c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800626c:	e04e      	b.n	800630c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800626e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006272:	2b08      	cmp	r3, #8
 8006274:	d827      	bhi.n	80062c6 <UART_SetConfig+0x506>
 8006276:	a201      	add	r2, pc, #4	@ (adr r2, 800627c <UART_SetConfig+0x4bc>)
 8006278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800627c:	080062a1 	.word	0x080062a1
 8006280:	080062a9 	.word	0x080062a9
 8006284:	080062b1 	.word	0x080062b1
 8006288:	080062c7 	.word	0x080062c7
 800628c:	080062b7 	.word	0x080062b7
 8006290:	080062c7 	.word	0x080062c7
 8006294:	080062c7 	.word	0x080062c7
 8006298:	080062c7 	.word	0x080062c7
 800629c:	080062bf 	.word	0x080062bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062a0:	f7fe f9f6 	bl	8004690 <HAL_RCC_GetPCLK1Freq>
 80062a4:	61f8      	str	r0, [r7, #28]
        break;
 80062a6:	e014      	b.n	80062d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062a8:	f7fe fa08 	bl	80046bc <HAL_RCC_GetPCLK2Freq>
 80062ac:	61f8      	str	r0, [r7, #28]
        break;
 80062ae:	e010      	b.n	80062d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062b0:	4b1e      	ldr	r3, [pc, #120]	@ (800632c <UART_SetConfig+0x56c>)
 80062b2:	61fb      	str	r3, [r7, #28]
        break;
 80062b4:	e00d      	b.n	80062d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062b6:	f7fe f953 	bl	8004560 <HAL_RCC_GetSysClockFreq>
 80062ba:	61f8      	str	r0, [r7, #28]
        break;
 80062bc:	e009      	b.n	80062d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062c2:	61fb      	str	r3, [r7, #28]
        break;
 80062c4:	e005      	b.n	80062d2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80062c6:	2300      	movs	r3, #0
 80062c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80062d0:	bf00      	nop
    }

    if (pclk != 0U)
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d019      	beq.n	800630c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	085a      	lsrs	r2, r3, #1
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	441a      	add	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	2b0f      	cmp	r3, #15
 80062f0:	d909      	bls.n	8006306 <UART_SetConfig+0x546>
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062f8:	d205      	bcs.n	8006306 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	60da      	str	r2, [r3, #12]
 8006304:	e002      	b.n	800630c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2200      	movs	r2, #0
 8006310:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006318:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800631c:	4618      	mov	r0, r3
 800631e:	3728      	adds	r7, #40	@ 0x28
 8006320:	46bd      	mov	sp, r7
 8006322:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006326:	bf00      	nop
 8006328:	40008000 	.word	0x40008000
 800632c:	00f42400 	.word	0x00f42400

08006330 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800633c:	f003 0308 	and.w	r3, r3, #8
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00a      	beq.n	800635a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	430a      	orrs	r2, r1
 8006358:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00a      	beq.n	800637c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	430a      	orrs	r2, r1
 800637a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006380:	f003 0302 	and.w	r3, r3, #2
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00a      	beq.n	800639e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	430a      	orrs	r2, r1
 800639c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a2:	f003 0304 	and.w	r3, r3, #4
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00a      	beq.n	80063c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	430a      	orrs	r2, r1
 80063be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c4:	f003 0310 	and.w	r3, r3, #16
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00a      	beq.n	80063e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	430a      	orrs	r2, r1
 80063e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e6:	f003 0320 	and.w	r3, r3, #32
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00a      	beq.n	8006404 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	430a      	orrs	r2, r1
 8006402:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800640c:	2b00      	cmp	r3, #0
 800640e:	d01a      	beq.n	8006446 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	430a      	orrs	r2, r1
 8006424:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800642a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800642e:	d10a      	bne.n	8006446 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	430a      	orrs	r2, r1
 8006444:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800644a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00a      	beq.n	8006468 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	430a      	orrs	r2, r1
 8006466:	605a      	str	r2, [r3, #4]
  }
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b098      	sub	sp, #96	@ 0x60
 8006478:	af02      	add	r7, sp, #8
 800647a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006484:	f7fb fc02 	bl	8001c8c <HAL_GetTick>
 8006488:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f003 0308 	and.w	r3, r3, #8
 8006494:	2b08      	cmp	r3, #8
 8006496:	d12e      	bne.n	80064f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006498:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064a0:	2200      	movs	r2, #0
 80064a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f88c 	bl	80065c4 <UART_WaitOnFlagUntilTimeout>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d021      	beq.n	80064f6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ba:	e853 3f00 	ldrex	r3, [r3]
 80064be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80064c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	461a      	mov	r2, r3
 80064ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80064d2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80064d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064d8:	e841 2300 	strex	r3, r2, [r1]
 80064dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80064de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1e6      	bne.n	80064b2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2220      	movs	r2, #32
 80064e8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e062      	b.n	80065bc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0304 	and.w	r3, r3, #4
 8006500:	2b04      	cmp	r3, #4
 8006502:	d149      	bne.n	8006598 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006504:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006508:	9300      	str	r3, [sp, #0]
 800650a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800650c:	2200      	movs	r2, #0
 800650e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f856 	bl	80065c4 <UART_WaitOnFlagUntilTimeout>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d03c      	beq.n	8006598 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006526:	e853 3f00 	ldrex	r3, [r3]
 800652a:	623b      	str	r3, [r7, #32]
   return(result);
 800652c:	6a3b      	ldr	r3, [r7, #32]
 800652e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006532:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	461a      	mov	r2, r3
 800653a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800653c:	633b      	str	r3, [r7, #48]	@ 0x30
 800653e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006540:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006542:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006544:	e841 2300 	strex	r3, r2, [r1]
 8006548:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800654a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1e6      	bne.n	800651e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	3308      	adds	r3, #8
 8006556:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	e853 3f00 	ldrex	r3, [r3]
 800655e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f023 0301 	bic.w	r3, r3, #1
 8006566:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	3308      	adds	r3, #8
 800656e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006570:	61fa      	str	r2, [r7, #28]
 8006572:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006574:	69b9      	ldr	r1, [r7, #24]
 8006576:	69fa      	ldr	r2, [r7, #28]
 8006578:	e841 2300 	strex	r3, r2, [r1]
 800657c:	617b      	str	r3, [r7, #20]
   return(result);
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1e5      	bne.n	8006550 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2220      	movs	r2, #32
 8006588:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006594:	2303      	movs	r3, #3
 8006596:	e011      	b.n	80065bc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2220      	movs	r2, #32
 800659c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2220      	movs	r2, #32
 80065a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3758      	adds	r7, #88	@ 0x58
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	603b      	str	r3, [r7, #0]
 80065d0:	4613      	mov	r3, r2
 80065d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065d4:	e04f      	b.n	8006676 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065dc:	d04b      	beq.n	8006676 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065de:	f7fb fb55 	bl	8001c8c <HAL_GetTick>
 80065e2:	4602      	mov	r2, r0
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	69ba      	ldr	r2, [r7, #24]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d302      	bcc.n	80065f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d101      	bne.n	80065f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e04e      	b.n	8006696 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0304 	and.w	r3, r3, #4
 8006602:	2b00      	cmp	r3, #0
 8006604:	d037      	beq.n	8006676 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	2b80      	cmp	r3, #128	@ 0x80
 800660a:	d034      	beq.n	8006676 <UART_WaitOnFlagUntilTimeout+0xb2>
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	2b40      	cmp	r3, #64	@ 0x40
 8006610:	d031      	beq.n	8006676 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	69db      	ldr	r3, [r3, #28]
 8006618:	f003 0308 	and.w	r3, r3, #8
 800661c:	2b08      	cmp	r3, #8
 800661e:	d110      	bne.n	8006642 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2208      	movs	r2, #8
 8006626:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f000 f838 	bl	800669e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2208      	movs	r2, #8
 8006632:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e029      	b.n	8006696 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	69db      	ldr	r3, [r3, #28]
 8006648:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800664c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006650:	d111      	bne.n	8006676 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800665a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f000 f81e 	bl	800669e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2220      	movs	r2, #32
 8006666:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e00f      	b.n	8006696 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	69da      	ldr	r2, [r3, #28]
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	4013      	ands	r3, r2
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	429a      	cmp	r2, r3
 8006684:	bf0c      	ite	eq
 8006686:	2301      	moveq	r3, #1
 8006688:	2300      	movne	r3, #0
 800668a:	b2db      	uxtb	r3, r3
 800668c:	461a      	mov	r2, r3
 800668e:	79fb      	ldrb	r3, [r7, #7]
 8006690:	429a      	cmp	r2, r3
 8006692:	d0a0      	beq.n	80065d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800669e:	b480      	push	{r7}
 80066a0:	b095      	sub	sp, #84	@ 0x54
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ae:	e853 3f00 	ldrex	r3, [r3]
 80066b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80066b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	461a      	mov	r2, r3
 80066c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80066c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80066ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066cc:	e841 2300 	strex	r3, r2, [r1]
 80066d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1e6      	bne.n	80066a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	3308      	adds	r3, #8
 80066de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	e853 3f00 	ldrex	r3, [r3]
 80066e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	f023 0301 	bic.w	r3, r3, #1
 80066ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	3308      	adds	r3, #8
 80066f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006700:	e841 2300 	strex	r3, r2, [r1]
 8006704:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1e5      	bne.n	80066d8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006710:	2b01      	cmp	r3, #1
 8006712:	d118      	bne.n	8006746 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	e853 3f00 	ldrex	r3, [r3]
 8006720:	60bb      	str	r3, [r7, #8]
   return(result);
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	f023 0310 	bic.w	r3, r3, #16
 8006728:	647b      	str	r3, [r7, #68]	@ 0x44
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	461a      	mov	r2, r3
 8006730:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006732:	61bb      	str	r3, [r7, #24]
 8006734:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006736:	6979      	ldr	r1, [r7, #20]
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	e841 2300 	strex	r3, r2, [r1]
 800673e:	613b      	str	r3, [r7, #16]
   return(result);
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1e6      	bne.n	8006714 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2220      	movs	r2, #32
 800674a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800675a:	bf00      	nop
 800675c:	3754      	adds	r7, #84	@ 0x54
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr

08006766 <__cvt>:
 8006766:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800676a:	ec57 6b10 	vmov	r6, r7, d0
 800676e:	2f00      	cmp	r7, #0
 8006770:	460c      	mov	r4, r1
 8006772:	4619      	mov	r1, r3
 8006774:	463b      	mov	r3, r7
 8006776:	bfbb      	ittet	lt
 8006778:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800677c:	461f      	movlt	r7, r3
 800677e:	2300      	movge	r3, #0
 8006780:	232d      	movlt	r3, #45	@ 0x2d
 8006782:	700b      	strb	r3, [r1, #0]
 8006784:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006786:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800678a:	4691      	mov	r9, r2
 800678c:	f023 0820 	bic.w	r8, r3, #32
 8006790:	bfbc      	itt	lt
 8006792:	4632      	movlt	r2, r6
 8006794:	4616      	movlt	r6, r2
 8006796:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800679a:	d005      	beq.n	80067a8 <__cvt+0x42>
 800679c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80067a0:	d100      	bne.n	80067a4 <__cvt+0x3e>
 80067a2:	3401      	adds	r4, #1
 80067a4:	2102      	movs	r1, #2
 80067a6:	e000      	b.n	80067aa <__cvt+0x44>
 80067a8:	2103      	movs	r1, #3
 80067aa:	ab03      	add	r3, sp, #12
 80067ac:	9301      	str	r3, [sp, #4]
 80067ae:	ab02      	add	r3, sp, #8
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	ec47 6b10 	vmov	d0, r6, r7
 80067b6:	4653      	mov	r3, sl
 80067b8:	4622      	mov	r2, r4
 80067ba:	f001 ff09 	bl	80085d0 <_dtoa_r>
 80067be:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80067c2:	4605      	mov	r5, r0
 80067c4:	d119      	bne.n	80067fa <__cvt+0x94>
 80067c6:	f019 0f01 	tst.w	r9, #1
 80067ca:	d00e      	beq.n	80067ea <__cvt+0x84>
 80067cc:	eb00 0904 	add.w	r9, r0, r4
 80067d0:	2200      	movs	r2, #0
 80067d2:	2300      	movs	r3, #0
 80067d4:	4630      	mov	r0, r6
 80067d6:	4639      	mov	r1, r7
 80067d8:	f7fa f976 	bl	8000ac8 <__aeabi_dcmpeq>
 80067dc:	b108      	cbz	r0, 80067e2 <__cvt+0x7c>
 80067de:	f8cd 900c 	str.w	r9, [sp, #12]
 80067e2:	2230      	movs	r2, #48	@ 0x30
 80067e4:	9b03      	ldr	r3, [sp, #12]
 80067e6:	454b      	cmp	r3, r9
 80067e8:	d31e      	bcc.n	8006828 <__cvt+0xc2>
 80067ea:	9b03      	ldr	r3, [sp, #12]
 80067ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80067ee:	1b5b      	subs	r3, r3, r5
 80067f0:	4628      	mov	r0, r5
 80067f2:	6013      	str	r3, [r2, #0]
 80067f4:	b004      	add	sp, #16
 80067f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067fa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80067fe:	eb00 0904 	add.w	r9, r0, r4
 8006802:	d1e5      	bne.n	80067d0 <__cvt+0x6a>
 8006804:	7803      	ldrb	r3, [r0, #0]
 8006806:	2b30      	cmp	r3, #48	@ 0x30
 8006808:	d10a      	bne.n	8006820 <__cvt+0xba>
 800680a:	2200      	movs	r2, #0
 800680c:	2300      	movs	r3, #0
 800680e:	4630      	mov	r0, r6
 8006810:	4639      	mov	r1, r7
 8006812:	f7fa f959 	bl	8000ac8 <__aeabi_dcmpeq>
 8006816:	b918      	cbnz	r0, 8006820 <__cvt+0xba>
 8006818:	f1c4 0401 	rsb	r4, r4, #1
 800681c:	f8ca 4000 	str.w	r4, [sl]
 8006820:	f8da 3000 	ldr.w	r3, [sl]
 8006824:	4499      	add	r9, r3
 8006826:	e7d3      	b.n	80067d0 <__cvt+0x6a>
 8006828:	1c59      	adds	r1, r3, #1
 800682a:	9103      	str	r1, [sp, #12]
 800682c:	701a      	strb	r2, [r3, #0]
 800682e:	e7d9      	b.n	80067e4 <__cvt+0x7e>

08006830 <__exponent>:
 8006830:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006832:	2900      	cmp	r1, #0
 8006834:	bfba      	itte	lt
 8006836:	4249      	neglt	r1, r1
 8006838:	232d      	movlt	r3, #45	@ 0x2d
 800683a:	232b      	movge	r3, #43	@ 0x2b
 800683c:	2909      	cmp	r1, #9
 800683e:	7002      	strb	r2, [r0, #0]
 8006840:	7043      	strb	r3, [r0, #1]
 8006842:	dd29      	ble.n	8006898 <__exponent+0x68>
 8006844:	f10d 0307 	add.w	r3, sp, #7
 8006848:	461d      	mov	r5, r3
 800684a:	270a      	movs	r7, #10
 800684c:	461a      	mov	r2, r3
 800684e:	fbb1 f6f7 	udiv	r6, r1, r7
 8006852:	fb07 1416 	mls	r4, r7, r6, r1
 8006856:	3430      	adds	r4, #48	@ 0x30
 8006858:	f802 4c01 	strb.w	r4, [r2, #-1]
 800685c:	460c      	mov	r4, r1
 800685e:	2c63      	cmp	r4, #99	@ 0x63
 8006860:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006864:	4631      	mov	r1, r6
 8006866:	dcf1      	bgt.n	800684c <__exponent+0x1c>
 8006868:	3130      	adds	r1, #48	@ 0x30
 800686a:	1e94      	subs	r4, r2, #2
 800686c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006870:	1c41      	adds	r1, r0, #1
 8006872:	4623      	mov	r3, r4
 8006874:	42ab      	cmp	r3, r5
 8006876:	d30a      	bcc.n	800688e <__exponent+0x5e>
 8006878:	f10d 0309 	add.w	r3, sp, #9
 800687c:	1a9b      	subs	r3, r3, r2
 800687e:	42ac      	cmp	r4, r5
 8006880:	bf88      	it	hi
 8006882:	2300      	movhi	r3, #0
 8006884:	3302      	adds	r3, #2
 8006886:	4403      	add	r3, r0
 8006888:	1a18      	subs	r0, r3, r0
 800688a:	b003      	add	sp, #12
 800688c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800688e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006892:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006896:	e7ed      	b.n	8006874 <__exponent+0x44>
 8006898:	2330      	movs	r3, #48	@ 0x30
 800689a:	3130      	adds	r1, #48	@ 0x30
 800689c:	7083      	strb	r3, [r0, #2]
 800689e:	70c1      	strb	r1, [r0, #3]
 80068a0:	1d03      	adds	r3, r0, #4
 80068a2:	e7f1      	b.n	8006888 <__exponent+0x58>

080068a4 <_printf_float>:
 80068a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a8:	b08d      	sub	sp, #52	@ 0x34
 80068aa:	460c      	mov	r4, r1
 80068ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80068b0:	4616      	mov	r6, r2
 80068b2:	461f      	mov	r7, r3
 80068b4:	4605      	mov	r5, r0
 80068b6:	f001 fdb1 	bl	800841c <_localeconv_r>
 80068ba:	6803      	ldr	r3, [r0, #0]
 80068bc:	9304      	str	r3, [sp, #16]
 80068be:	4618      	mov	r0, r3
 80068c0:	f7f9 fcd6 	bl	8000270 <strlen>
 80068c4:	2300      	movs	r3, #0
 80068c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80068c8:	f8d8 3000 	ldr.w	r3, [r8]
 80068cc:	9005      	str	r0, [sp, #20]
 80068ce:	3307      	adds	r3, #7
 80068d0:	f023 0307 	bic.w	r3, r3, #7
 80068d4:	f103 0208 	add.w	r2, r3, #8
 80068d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80068dc:	f8d4 b000 	ldr.w	fp, [r4]
 80068e0:	f8c8 2000 	str.w	r2, [r8]
 80068e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068e8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80068ec:	9307      	str	r3, [sp, #28]
 80068ee:	f8cd 8018 	str.w	r8, [sp, #24]
 80068f2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80068f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068fa:	4b9c      	ldr	r3, [pc, #624]	@ (8006b6c <_printf_float+0x2c8>)
 80068fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006900:	f7fa f914 	bl	8000b2c <__aeabi_dcmpun>
 8006904:	bb70      	cbnz	r0, 8006964 <_printf_float+0xc0>
 8006906:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800690a:	4b98      	ldr	r3, [pc, #608]	@ (8006b6c <_printf_float+0x2c8>)
 800690c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006910:	f7fa f8ee 	bl	8000af0 <__aeabi_dcmple>
 8006914:	bb30      	cbnz	r0, 8006964 <_printf_float+0xc0>
 8006916:	2200      	movs	r2, #0
 8006918:	2300      	movs	r3, #0
 800691a:	4640      	mov	r0, r8
 800691c:	4649      	mov	r1, r9
 800691e:	f7fa f8dd 	bl	8000adc <__aeabi_dcmplt>
 8006922:	b110      	cbz	r0, 800692a <_printf_float+0x86>
 8006924:	232d      	movs	r3, #45	@ 0x2d
 8006926:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800692a:	4a91      	ldr	r2, [pc, #580]	@ (8006b70 <_printf_float+0x2cc>)
 800692c:	4b91      	ldr	r3, [pc, #580]	@ (8006b74 <_printf_float+0x2d0>)
 800692e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006932:	bf94      	ite	ls
 8006934:	4690      	movls	r8, r2
 8006936:	4698      	movhi	r8, r3
 8006938:	2303      	movs	r3, #3
 800693a:	6123      	str	r3, [r4, #16]
 800693c:	f02b 0304 	bic.w	r3, fp, #4
 8006940:	6023      	str	r3, [r4, #0]
 8006942:	f04f 0900 	mov.w	r9, #0
 8006946:	9700      	str	r7, [sp, #0]
 8006948:	4633      	mov	r3, r6
 800694a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800694c:	4621      	mov	r1, r4
 800694e:	4628      	mov	r0, r5
 8006950:	f000 f9d2 	bl	8006cf8 <_printf_common>
 8006954:	3001      	adds	r0, #1
 8006956:	f040 808d 	bne.w	8006a74 <_printf_float+0x1d0>
 800695a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800695e:	b00d      	add	sp, #52	@ 0x34
 8006960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006964:	4642      	mov	r2, r8
 8006966:	464b      	mov	r3, r9
 8006968:	4640      	mov	r0, r8
 800696a:	4649      	mov	r1, r9
 800696c:	f7fa f8de 	bl	8000b2c <__aeabi_dcmpun>
 8006970:	b140      	cbz	r0, 8006984 <_printf_float+0xe0>
 8006972:	464b      	mov	r3, r9
 8006974:	2b00      	cmp	r3, #0
 8006976:	bfbc      	itt	lt
 8006978:	232d      	movlt	r3, #45	@ 0x2d
 800697a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800697e:	4a7e      	ldr	r2, [pc, #504]	@ (8006b78 <_printf_float+0x2d4>)
 8006980:	4b7e      	ldr	r3, [pc, #504]	@ (8006b7c <_printf_float+0x2d8>)
 8006982:	e7d4      	b.n	800692e <_printf_float+0x8a>
 8006984:	6863      	ldr	r3, [r4, #4]
 8006986:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800698a:	9206      	str	r2, [sp, #24]
 800698c:	1c5a      	adds	r2, r3, #1
 800698e:	d13b      	bne.n	8006a08 <_printf_float+0x164>
 8006990:	2306      	movs	r3, #6
 8006992:	6063      	str	r3, [r4, #4]
 8006994:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006998:	2300      	movs	r3, #0
 800699a:	6022      	str	r2, [r4, #0]
 800699c:	9303      	str	r3, [sp, #12]
 800699e:	ab0a      	add	r3, sp, #40	@ 0x28
 80069a0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80069a4:	ab09      	add	r3, sp, #36	@ 0x24
 80069a6:	9300      	str	r3, [sp, #0]
 80069a8:	6861      	ldr	r1, [r4, #4]
 80069aa:	ec49 8b10 	vmov	d0, r8, r9
 80069ae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80069b2:	4628      	mov	r0, r5
 80069b4:	f7ff fed7 	bl	8006766 <__cvt>
 80069b8:	9b06      	ldr	r3, [sp, #24]
 80069ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80069bc:	2b47      	cmp	r3, #71	@ 0x47
 80069be:	4680      	mov	r8, r0
 80069c0:	d129      	bne.n	8006a16 <_printf_float+0x172>
 80069c2:	1cc8      	adds	r0, r1, #3
 80069c4:	db02      	blt.n	80069cc <_printf_float+0x128>
 80069c6:	6863      	ldr	r3, [r4, #4]
 80069c8:	4299      	cmp	r1, r3
 80069ca:	dd41      	ble.n	8006a50 <_printf_float+0x1ac>
 80069cc:	f1aa 0a02 	sub.w	sl, sl, #2
 80069d0:	fa5f fa8a 	uxtb.w	sl, sl
 80069d4:	3901      	subs	r1, #1
 80069d6:	4652      	mov	r2, sl
 80069d8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80069dc:	9109      	str	r1, [sp, #36]	@ 0x24
 80069de:	f7ff ff27 	bl	8006830 <__exponent>
 80069e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80069e4:	1813      	adds	r3, r2, r0
 80069e6:	2a01      	cmp	r2, #1
 80069e8:	4681      	mov	r9, r0
 80069ea:	6123      	str	r3, [r4, #16]
 80069ec:	dc02      	bgt.n	80069f4 <_printf_float+0x150>
 80069ee:	6822      	ldr	r2, [r4, #0]
 80069f0:	07d2      	lsls	r2, r2, #31
 80069f2:	d501      	bpl.n	80069f8 <_printf_float+0x154>
 80069f4:	3301      	adds	r3, #1
 80069f6:	6123      	str	r3, [r4, #16]
 80069f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d0a2      	beq.n	8006946 <_printf_float+0xa2>
 8006a00:	232d      	movs	r3, #45	@ 0x2d
 8006a02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a06:	e79e      	b.n	8006946 <_printf_float+0xa2>
 8006a08:	9a06      	ldr	r2, [sp, #24]
 8006a0a:	2a47      	cmp	r2, #71	@ 0x47
 8006a0c:	d1c2      	bne.n	8006994 <_printf_float+0xf0>
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1c0      	bne.n	8006994 <_printf_float+0xf0>
 8006a12:	2301      	movs	r3, #1
 8006a14:	e7bd      	b.n	8006992 <_printf_float+0xee>
 8006a16:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006a1a:	d9db      	bls.n	80069d4 <_printf_float+0x130>
 8006a1c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006a20:	d118      	bne.n	8006a54 <_printf_float+0x1b0>
 8006a22:	2900      	cmp	r1, #0
 8006a24:	6863      	ldr	r3, [r4, #4]
 8006a26:	dd0b      	ble.n	8006a40 <_printf_float+0x19c>
 8006a28:	6121      	str	r1, [r4, #16]
 8006a2a:	b913      	cbnz	r3, 8006a32 <_printf_float+0x18e>
 8006a2c:	6822      	ldr	r2, [r4, #0]
 8006a2e:	07d0      	lsls	r0, r2, #31
 8006a30:	d502      	bpl.n	8006a38 <_printf_float+0x194>
 8006a32:	3301      	adds	r3, #1
 8006a34:	440b      	add	r3, r1
 8006a36:	6123      	str	r3, [r4, #16]
 8006a38:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006a3a:	f04f 0900 	mov.w	r9, #0
 8006a3e:	e7db      	b.n	80069f8 <_printf_float+0x154>
 8006a40:	b913      	cbnz	r3, 8006a48 <_printf_float+0x1a4>
 8006a42:	6822      	ldr	r2, [r4, #0]
 8006a44:	07d2      	lsls	r2, r2, #31
 8006a46:	d501      	bpl.n	8006a4c <_printf_float+0x1a8>
 8006a48:	3302      	adds	r3, #2
 8006a4a:	e7f4      	b.n	8006a36 <_printf_float+0x192>
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e7f2      	b.n	8006a36 <_printf_float+0x192>
 8006a50:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006a54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a56:	4299      	cmp	r1, r3
 8006a58:	db05      	blt.n	8006a66 <_printf_float+0x1c2>
 8006a5a:	6823      	ldr	r3, [r4, #0]
 8006a5c:	6121      	str	r1, [r4, #16]
 8006a5e:	07d8      	lsls	r0, r3, #31
 8006a60:	d5ea      	bpl.n	8006a38 <_printf_float+0x194>
 8006a62:	1c4b      	adds	r3, r1, #1
 8006a64:	e7e7      	b.n	8006a36 <_printf_float+0x192>
 8006a66:	2900      	cmp	r1, #0
 8006a68:	bfd4      	ite	le
 8006a6a:	f1c1 0202 	rsble	r2, r1, #2
 8006a6e:	2201      	movgt	r2, #1
 8006a70:	4413      	add	r3, r2
 8006a72:	e7e0      	b.n	8006a36 <_printf_float+0x192>
 8006a74:	6823      	ldr	r3, [r4, #0]
 8006a76:	055a      	lsls	r2, r3, #21
 8006a78:	d407      	bmi.n	8006a8a <_printf_float+0x1e6>
 8006a7a:	6923      	ldr	r3, [r4, #16]
 8006a7c:	4642      	mov	r2, r8
 8006a7e:	4631      	mov	r1, r6
 8006a80:	4628      	mov	r0, r5
 8006a82:	47b8      	blx	r7
 8006a84:	3001      	adds	r0, #1
 8006a86:	d12b      	bne.n	8006ae0 <_printf_float+0x23c>
 8006a88:	e767      	b.n	800695a <_printf_float+0xb6>
 8006a8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006a8e:	f240 80dd 	bls.w	8006c4c <_printf_float+0x3a8>
 8006a92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006a96:	2200      	movs	r2, #0
 8006a98:	2300      	movs	r3, #0
 8006a9a:	f7fa f815 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a9e:	2800      	cmp	r0, #0
 8006aa0:	d033      	beq.n	8006b0a <_printf_float+0x266>
 8006aa2:	4a37      	ldr	r2, [pc, #220]	@ (8006b80 <_printf_float+0x2dc>)
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	4631      	mov	r1, r6
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	47b8      	blx	r7
 8006aac:	3001      	adds	r0, #1
 8006aae:	f43f af54 	beq.w	800695a <_printf_float+0xb6>
 8006ab2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006ab6:	4543      	cmp	r3, r8
 8006ab8:	db02      	blt.n	8006ac0 <_printf_float+0x21c>
 8006aba:	6823      	ldr	r3, [r4, #0]
 8006abc:	07d8      	lsls	r0, r3, #31
 8006abe:	d50f      	bpl.n	8006ae0 <_printf_float+0x23c>
 8006ac0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ac4:	4631      	mov	r1, r6
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	47b8      	blx	r7
 8006aca:	3001      	adds	r0, #1
 8006acc:	f43f af45 	beq.w	800695a <_printf_float+0xb6>
 8006ad0:	f04f 0900 	mov.w	r9, #0
 8006ad4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006ad8:	f104 0a1a 	add.w	sl, r4, #26
 8006adc:	45c8      	cmp	r8, r9
 8006ade:	dc09      	bgt.n	8006af4 <_printf_float+0x250>
 8006ae0:	6823      	ldr	r3, [r4, #0]
 8006ae2:	079b      	lsls	r3, r3, #30
 8006ae4:	f100 8103 	bmi.w	8006cee <_printf_float+0x44a>
 8006ae8:	68e0      	ldr	r0, [r4, #12]
 8006aea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006aec:	4298      	cmp	r0, r3
 8006aee:	bfb8      	it	lt
 8006af0:	4618      	movlt	r0, r3
 8006af2:	e734      	b.n	800695e <_printf_float+0xba>
 8006af4:	2301      	movs	r3, #1
 8006af6:	4652      	mov	r2, sl
 8006af8:	4631      	mov	r1, r6
 8006afa:	4628      	mov	r0, r5
 8006afc:	47b8      	blx	r7
 8006afe:	3001      	adds	r0, #1
 8006b00:	f43f af2b 	beq.w	800695a <_printf_float+0xb6>
 8006b04:	f109 0901 	add.w	r9, r9, #1
 8006b08:	e7e8      	b.n	8006adc <_printf_float+0x238>
 8006b0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	dc39      	bgt.n	8006b84 <_printf_float+0x2e0>
 8006b10:	4a1b      	ldr	r2, [pc, #108]	@ (8006b80 <_printf_float+0x2dc>)
 8006b12:	2301      	movs	r3, #1
 8006b14:	4631      	mov	r1, r6
 8006b16:	4628      	mov	r0, r5
 8006b18:	47b8      	blx	r7
 8006b1a:	3001      	adds	r0, #1
 8006b1c:	f43f af1d 	beq.w	800695a <_printf_float+0xb6>
 8006b20:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006b24:	ea59 0303 	orrs.w	r3, r9, r3
 8006b28:	d102      	bne.n	8006b30 <_printf_float+0x28c>
 8006b2a:	6823      	ldr	r3, [r4, #0]
 8006b2c:	07d9      	lsls	r1, r3, #31
 8006b2e:	d5d7      	bpl.n	8006ae0 <_printf_float+0x23c>
 8006b30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b34:	4631      	mov	r1, r6
 8006b36:	4628      	mov	r0, r5
 8006b38:	47b8      	blx	r7
 8006b3a:	3001      	adds	r0, #1
 8006b3c:	f43f af0d 	beq.w	800695a <_printf_float+0xb6>
 8006b40:	f04f 0a00 	mov.w	sl, #0
 8006b44:	f104 0b1a 	add.w	fp, r4, #26
 8006b48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b4a:	425b      	negs	r3, r3
 8006b4c:	4553      	cmp	r3, sl
 8006b4e:	dc01      	bgt.n	8006b54 <_printf_float+0x2b0>
 8006b50:	464b      	mov	r3, r9
 8006b52:	e793      	b.n	8006a7c <_printf_float+0x1d8>
 8006b54:	2301      	movs	r3, #1
 8006b56:	465a      	mov	r2, fp
 8006b58:	4631      	mov	r1, r6
 8006b5a:	4628      	mov	r0, r5
 8006b5c:	47b8      	blx	r7
 8006b5e:	3001      	adds	r0, #1
 8006b60:	f43f aefb 	beq.w	800695a <_printf_float+0xb6>
 8006b64:	f10a 0a01 	add.w	sl, sl, #1
 8006b68:	e7ee      	b.n	8006b48 <_printf_float+0x2a4>
 8006b6a:	bf00      	nop
 8006b6c:	7fefffff 	.word	0x7fefffff
 8006b70:	0800b088 	.word	0x0800b088
 8006b74:	0800b08c 	.word	0x0800b08c
 8006b78:	0800b090 	.word	0x0800b090
 8006b7c:	0800b094 	.word	0x0800b094
 8006b80:	0800b098 	.word	0x0800b098
 8006b84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006b86:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006b8a:	4553      	cmp	r3, sl
 8006b8c:	bfa8      	it	ge
 8006b8e:	4653      	movge	r3, sl
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	4699      	mov	r9, r3
 8006b94:	dc36      	bgt.n	8006c04 <_printf_float+0x360>
 8006b96:	f04f 0b00 	mov.w	fp, #0
 8006b9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b9e:	f104 021a 	add.w	r2, r4, #26
 8006ba2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ba4:	9306      	str	r3, [sp, #24]
 8006ba6:	eba3 0309 	sub.w	r3, r3, r9
 8006baa:	455b      	cmp	r3, fp
 8006bac:	dc31      	bgt.n	8006c12 <_printf_float+0x36e>
 8006bae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bb0:	459a      	cmp	sl, r3
 8006bb2:	dc3a      	bgt.n	8006c2a <_printf_float+0x386>
 8006bb4:	6823      	ldr	r3, [r4, #0]
 8006bb6:	07da      	lsls	r2, r3, #31
 8006bb8:	d437      	bmi.n	8006c2a <_printf_float+0x386>
 8006bba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bbc:	ebaa 0903 	sub.w	r9, sl, r3
 8006bc0:	9b06      	ldr	r3, [sp, #24]
 8006bc2:	ebaa 0303 	sub.w	r3, sl, r3
 8006bc6:	4599      	cmp	r9, r3
 8006bc8:	bfa8      	it	ge
 8006bca:	4699      	movge	r9, r3
 8006bcc:	f1b9 0f00 	cmp.w	r9, #0
 8006bd0:	dc33      	bgt.n	8006c3a <_printf_float+0x396>
 8006bd2:	f04f 0800 	mov.w	r8, #0
 8006bd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006bda:	f104 0b1a 	add.w	fp, r4, #26
 8006bde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006be0:	ebaa 0303 	sub.w	r3, sl, r3
 8006be4:	eba3 0309 	sub.w	r3, r3, r9
 8006be8:	4543      	cmp	r3, r8
 8006bea:	f77f af79 	ble.w	8006ae0 <_printf_float+0x23c>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	465a      	mov	r2, fp
 8006bf2:	4631      	mov	r1, r6
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	47b8      	blx	r7
 8006bf8:	3001      	adds	r0, #1
 8006bfa:	f43f aeae 	beq.w	800695a <_printf_float+0xb6>
 8006bfe:	f108 0801 	add.w	r8, r8, #1
 8006c02:	e7ec      	b.n	8006bde <_printf_float+0x33a>
 8006c04:	4642      	mov	r2, r8
 8006c06:	4631      	mov	r1, r6
 8006c08:	4628      	mov	r0, r5
 8006c0a:	47b8      	blx	r7
 8006c0c:	3001      	adds	r0, #1
 8006c0e:	d1c2      	bne.n	8006b96 <_printf_float+0x2f2>
 8006c10:	e6a3      	b.n	800695a <_printf_float+0xb6>
 8006c12:	2301      	movs	r3, #1
 8006c14:	4631      	mov	r1, r6
 8006c16:	4628      	mov	r0, r5
 8006c18:	9206      	str	r2, [sp, #24]
 8006c1a:	47b8      	blx	r7
 8006c1c:	3001      	adds	r0, #1
 8006c1e:	f43f ae9c 	beq.w	800695a <_printf_float+0xb6>
 8006c22:	9a06      	ldr	r2, [sp, #24]
 8006c24:	f10b 0b01 	add.w	fp, fp, #1
 8006c28:	e7bb      	b.n	8006ba2 <_printf_float+0x2fe>
 8006c2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c2e:	4631      	mov	r1, r6
 8006c30:	4628      	mov	r0, r5
 8006c32:	47b8      	blx	r7
 8006c34:	3001      	adds	r0, #1
 8006c36:	d1c0      	bne.n	8006bba <_printf_float+0x316>
 8006c38:	e68f      	b.n	800695a <_printf_float+0xb6>
 8006c3a:	9a06      	ldr	r2, [sp, #24]
 8006c3c:	464b      	mov	r3, r9
 8006c3e:	4442      	add	r2, r8
 8006c40:	4631      	mov	r1, r6
 8006c42:	4628      	mov	r0, r5
 8006c44:	47b8      	blx	r7
 8006c46:	3001      	adds	r0, #1
 8006c48:	d1c3      	bne.n	8006bd2 <_printf_float+0x32e>
 8006c4a:	e686      	b.n	800695a <_printf_float+0xb6>
 8006c4c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006c50:	f1ba 0f01 	cmp.w	sl, #1
 8006c54:	dc01      	bgt.n	8006c5a <_printf_float+0x3b6>
 8006c56:	07db      	lsls	r3, r3, #31
 8006c58:	d536      	bpl.n	8006cc8 <_printf_float+0x424>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	4642      	mov	r2, r8
 8006c5e:	4631      	mov	r1, r6
 8006c60:	4628      	mov	r0, r5
 8006c62:	47b8      	blx	r7
 8006c64:	3001      	adds	r0, #1
 8006c66:	f43f ae78 	beq.w	800695a <_printf_float+0xb6>
 8006c6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c6e:	4631      	mov	r1, r6
 8006c70:	4628      	mov	r0, r5
 8006c72:	47b8      	blx	r7
 8006c74:	3001      	adds	r0, #1
 8006c76:	f43f ae70 	beq.w	800695a <_printf_float+0xb6>
 8006c7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006c7e:	2200      	movs	r2, #0
 8006c80:	2300      	movs	r3, #0
 8006c82:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006c86:	f7f9 ff1f 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c8a:	b9c0      	cbnz	r0, 8006cbe <_printf_float+0x41a>
 8006c8c:	4653      	mov	r3, sl
 8006c8e:	f108 0201 	add.w	r2, r8, #1
 8006c92:	4631      	mov	r1, r6
 8006c94:	4628      	mov	r0, r5
 8006c96:	47b8      	blx	r7
 8006c98:	3001      	adds	r0, #1
 8006c9a:	d10c      	bne.n	8006cb6 <_printf_float+0x412>
 8006c9c:	e65d      	b.n	800695a <_printf_float+0xb6>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	465a      	mov	r2, fp
 8006ca2:	4631      	mov	r1, r6
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	47b8      	blx	r7
 8006ca8:	3001      	adds	r0, #1
 8006caa:	f43f ae56 	beq.w	800695a <_printf_float+0xb6>
 8006cae:	f108 0801 	add.w	r8, r8, #1
 8006cb2:	45d0      	cmp	r8, sl
 8006cb4:	dbf3      	blt.n	8006c9e <_printf_float+0x3fa>
 8006cb6:	464b      	mov	r3, r9
 8006cb8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006cbc:	e6df      	b.n	8006a7e <_printf_float+0x1da>
 8006cbe:	f04f 0800 	mov.w	r8, #0
 8006cc2:	f104 0b1a 	add.w	fp, r4, #26
 8006cc6:	e7f4      	b.n	8006cb2 <_printf_float+0x40e>
 8006cc8:	2301      	movs	r3, #1
 8006cca:	4642      	mov	r2, r8
 8006ccc:	e7e1      	b.n	8006c92 <_printf_float+0x3ee>
 8006cce:	2301      	movs	r3, #1
 8006cd0:	464a      	mov	r2, r9
 8006cd2:	4631      	mov	r1, r6
 8006cd4:	4628      	mov	r0, r5
 8006cd6:	47b8      	blx	r7
 8006cd8:	3001      	adds	r0, #1
 8006cda:	f43f ae3e 	beq.w	800695a <_printf_float+0xb6>
 8006cde:	f108 0801 	add.w	r8, r8, #1
 8006ce2:	68e3      	ldr	r3, [r4, #12]
 8006ce4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006ce6:	1a5b      	subs	r3, r3, r1
 8006ce8:	4543      	cmp	r3, r8
 8006cea:	dcf0      	bgt.n	8006cce <_printf_float+0x42a>
 8006cec:	e6fc      	b.n	8006ae8 <_printf_float+0x244>
 8006cee:	f04f 0800 	mov.w	r8, #0
 8006cf2:	f104 0919 	add.w	r9, r4, #25
 8006cf6:	e7f4      	b.n	8006ce2 <_printf_float+0x43e>

08006cf8 <_printf_common>:
 8006cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cfc:	4616      	mov	r6, r2
 8006cfe:	4698      	mov	r8, r3
 8006d00:	688a      	ldr	r2, [r1, #8]
 8006d02:	690b      	ldr	r3, [r1, #16]
 8006d04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	bfb8      	it	lt
 8006d0c:	4613      	movlt	r3, r2
 8006d0e:	6033      	str	r3, [r6, #0]
 8006d10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006d14:	4607      	mov	r7, r0
 8006d16:	460c      	mov	r4, r1
 8006d18:	b10a      	cbz	r2, 8006d1e <_printf_common+0x26>
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	6033      	str	r3, [r6, #0]
 8006d1e:	6823      	ldr	r3, [r4, #0]
 8006d20:	0699      	lsls	r1, r3, #26
 8006d22:	bf42      	ittt	mi
 8006d24:	6833      	ldrmi	r3, [r6, #0]
 8006d26:	3302      	addmi	r3, #2
 8006d28:	6033      	strmi	r3, [r6, #0]
 8006d2a:	6825      	ldr	r5, [r4, #0]
 8006d2c:	f015 0506 	ands.w	r5, r5, #6
 8006d30:	d106      	bne.n	8006d40 <_printf_common+0x48>
 8006d32:	f104 0a19 	add.w	sl, r4, #25
 8006d36:	68e3      	ldr	r3, [r4, #12]
 8006d38:	6832      	ldr	r2, [r6, #0]
 8006d3a:	1a9b      	subs	r3, r3, r2
 8006d3c:	42ab      	cmp	r3, r5
 8006d3e:	dc26      	bgt.n	8006d8e <_printf_common+0x96>
 8006d40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d44:	6822      	ldr	r2, [r4, #0]
 8006d46:	3b00      	subs	r3, #0
 8006d48:	bf18      	it	ne
 8006d4a:	2301      	movne	r3, #1
 8006d4c:	0692      	lsls	r2, r2, #26
 8006d4e:	d42b      	bmi.n	8006da8 <_printf_common+0xb0>
 8006d50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d54:	4641      	mov	r1, r8
 8006d56:	4638      	mov	r0, r7
 8006d58:	47c8      	blx	r9
 8006d5a:	3001      	adds	r0, #1
 8006d5c:	d01e      	beq.n	8006d9c <_printf_common+0xa4>
 8006d5e:	6823      	ldr	r3, [r4, #0]
 8006d60:	6922      	ldr	r2, [r4, #16]
 8006d62:	f003 0306 	and.w	r3, r3, #6
 8006d66:	2b04      	cmp	r3, #4
 8006d68:	bf02      	ittt	eq
 8006d6a:	68e5      	ldreq	r5, [r4, #12]
 8006d6c:	6833      	ldreq	r3, [r6, #0]
 8006d6e:	1aed      	subeq	r5, r5, r3
 8006d70:	68a3      	ldr	r3, [r4, #8]
 8006d72:	bf0c      	ite	eq
 8006d74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d78:	2500      	movne	r5, #0
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	bfc4      	itt	gt
 8006d7e:	1a9b      	subgt	r3, r3, r2
 8006d80:	18ed      	addgt	r5, r5, r3
 8006d82:	2600      	movs	r6, #0
 8006d84:	341a      	adds	r4, #26
 8006d86:	42b5      	cmp	r5, r6
 8006d88:	d11a      	bne.n	8006dc0 <_printf_common+0xc8>
 8006d8a:	2000      	movs	r0, #0
 8006d8c:	e008      	b.n	8006da0 <_printf_common+0xa8>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	4652      	mov	r2, sl
 8006d92:	4641      	mov	r1, r8
 8006d94:	4638      	mov	r0, r7
 8006d96:	47c8      	blx	r9
 8006d98:	3001      	adds	r0, #1
 8006d9a:	d103      	bne.n	8006da4 <_printf_common+0xac>
 8006d9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006da4:	3501      	adds	r5, #1
 8006da6:	e7c6      	b.n	8006d36 <_printf_common+0x3e>
 8006da8:	18e1      	adds	r1, r4, r3
 8006daa:	1c5a      	adds	r2, r3, #1
 8006dac:	2030      	movs	r0, #48	@ 0x30
 8006dae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006db2:	4422      	add	r2, r4
 8006db4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006db8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006dbc:	3302      	adds	r3, #2
 8006dbe:	e7c7      	b.n	8006d50 <_printf_common+0x58>
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	4622      	mov	r2, r4
 8006dc4:	4641      	mov	r1, r8
 8006dc6:	4638      	mov	r0, r7
 8006dc8:	47c8      	blx	r9
 8006dca:	3001      	adds	r0, #1
 8006dcc:	d0e6      	beq.n	8006d9c <_printf_common+0xa4>
 8006dce:	3601      	adds	r6, #1
 8006dd0:	e7d9      	b.n	8006d86 <_printf_common+0x8e>
	...

08006dd4 <_printf_i>:
 8006dd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006dd8:	7e0f      	ldrb	r7, [r1, #24]
 8006dda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006ddc:	2f78      	cmp	r7, #120	@ 0x78
 8006dde:	4691      	mov	r9, r2
 8006de0:	4680      	mov	r8, r0
 8006de2:	460c      	mov	r4, r1
 8006de4:	469a      	mov	sl, r3
 8006de6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006dea:	d807      	bhi.n	8006dfc <_printf_i+0x28>
 8006dec:	2f62      	cmp	r7, #98	@ 0x62
 8006dee:	d80a      	bhi.n	8006e06 <_printf_i+0x32>
 8006df0:	2f00      	cmp	r7, #0
 8006df2:	f000 80d2 	beq.w	8006f9a <_printf_i+0x1c6>
 8006df6:	2f58      	cmp	r7, #88	@ 0x58
 8006df8:	f000 80b9 	beq.w	8006f6e <_printf_i+0x19a>
 8006dfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006e04:	e03a      	b.n	8006e7c <_printf_i+0xa8>
 8006e06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006e0a:	2b15      	cmp	r3, #21
 8006e0c:	d8f6      	bhi.n	8006dfc <_printf_i+0x28>
 8006e0e:	a101      	add	r1, pc, #4	@ (adr r1, 8006e14 <_printf_i+0x40>)
 8006e10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e14:	08006e6d 	.word	0x08006e6d
 8006e18:	08006e81 	.word	0x08006e81
 8006e1c:	08006dfd 	.word	0x08006dfd
 8006e20:	08006dfd 	.word	0x08006dfd
 8006e24:	08006dfd 	.word	0x08006dfd
 8006e28:	08006dfd 	.word	0x08006dfd
 8006e2c:	08006e81 	.word	0x08006e81
 8006e30:	08006dfd 	.word	0x08006dfd
 8006e34:	08006dfd 	.word	0x08006dfd
 8006e38:	08006dfd 	.word	0x08006dfd
 8006e3c:	08006dfd 	.word	0x08006dfd
 8006e40:	08006f81 	.word	0x08006f81
 8006e44:	08006eab 	.word	0x08006eab
 8006e48:	08006f3b 	.word	0x08006f3b
 8006e4c:	08006dfd 	.word	0x08006dfd
 8006e50:	08006dfd 	.word	0x08006dfd
 8006e54:	08006fa3 	.word	0x08006fa3
 8006e58:	08006dfd 	.word	0x08006dfd
 8006e5c:	08006eab 	.word	0x08006eab
 8006e60:	08006dfd 	.word	0x08006dfd
 8006e64:	08006dfd 	.word	0x08006dfd
 8006e68:	08006f43 	.word	0x08006f43
 8006e6c:	6833      	ldr	r3, [r6, #0]
 8006e6e:	1d1a      	adds	r2, r3, #4
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	6032      	str	r2, [r6, #0]
 8006e74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e09d      	b.n	8006fbc <_printf_i+0x1e8>
 8006e80:	6833      	ldr	r3, [r6, #0]
 8006e82:	6820      	ldr	r0, [r4, #0]
 8006e84:	1d19      	adds	r1, r3, #4
 8006e86:	6031      	str	r1, [r6, #0]
 8006e88:	0606      	lsls	r6, r0, #24
 8006e8a:	d501      	bpl.n	8006e90 <_printf_i+0xbc>
 8006e8c:	681d      	ldr	r5, [r3, #0]
 8006e8e:	e003      	b.n	8006e98 <_printf_i+0xc4>
 8006e90:	0645      	lsls	r5, r0, #25
 8006e92:	d5fb      	bpl.n	8006e8c <_printf_i+0xb8>
 8006e94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006e98:	2d00      	cmp	r5, #0
 8006e9a:	da03      	bge.n	8006ea4 <_printf_i+0xd0>
 8006e9c:	232d      	movs	r3, #45	@ 0x2d
 8006e9e:	426d      	negs	r5, r5
 8006ea0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ea4:	4859      	ldr	r0, [pc, #356]	@ (800700c <_printf_i+0x238>)
 8006ea6:	230a      	movs	r3, #10
 8006ea8:	e011      	b.n	8006ece <_printf_i+0xfa>
 8006eaa:	6821      	ldr	r1, [r4, #0]
 8006eac:	6833      	ldr	r3, [r6, #0]
 8006eae:	0608      	lsls	r0, r1, #24
 8006eb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8006eb4:	d402      	bmi.n	8006ebc <_printf_i+0xe8>
 8006eb6:	0649      	lsls	r1, r1, #25
 8006eb8:	bf48      	it	mi
 8006eba:	b2ad      	uxthmi	r5, r5
 8006ebc:	2f6f      	cmp	r7, #111	@ 0x6f
 8006ebe:	4853      	ldr	r0, [pc, #332]	@ (800700c <_printf_i+0x238>)
 8006ec0:	6033      	str	r3, [r6, #0]
 8006ec2:	bf14      	ite	ne
 8006ec4:	230a      	movne	r3, #10
 8006ec6:	2308      	moveq	r3, #8
 8006ec8:	2100      	movs	r1, #0
 8006eca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006ece:	6866      	ldr	r6, [r4, #4]
 8006ed0:	60a6      	str	r6, [r4, #8]
 8006ed2:	2e00      	cmp	r6, #0
 8006ed4:	bfa2      	ittt	ge
 8006ed6:	6821      	ldrge	r1, [r4, #0]
 8006ed8:	f021 0104 	bicge.w	r1, r1, #4
 8006edc:	6021      	strge	r1, [r4, #0]
 8006ede:	b90d      	cbnz	r5, 8006ee4 <_printf_i+0x110>
 8006ee0:	2e00      	cmp	r6, #0
 8006ee2:	d04b      	beq.n	8006f7c <_printf_i+0x1a8>
 8006ee4:	4616      	mov	r6, r2
 8006ee6:	fbb5 f1f3 	udiv	r1, r5, r3
 8006eea:	fb03 5711 	mls	r7, r3, r1, r5
 8006eee:	5dc7      	ldrb	r7, [r0, r7]
 8006ef0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ef4:	462f      	mov	r7, r5
 8006ef6:	42bb      	cmp	r3, r7
 8006ef8:	460d      	mov	r5, r1
 8006efa:	d9f4      	bls.n	8006ee6 <_printf_i+0x112>
 8006efc:	2b08      	cmp	r3, #8
 8006efe:	d10b      	bne.n	8006f18 <_printf_i+0x144>
 8006f00:	6823      	ldr	r3, [r4, #0]
 8006f02:	07df      	lsls	r7, r3, #31
 8006f04:	d508      	bpl.n	8006f18 <_printf_i+0x144>
 8006f06:	6923      	ldr	r3, [r4, #16]
 8006f08:	6861      	ldr	r1, [r4, #4]
 8006f0a:	4299      	cmp	r1, r3
 8006f0c:	bfde      	ittt	le
 8006f0e:	2330      	movle	r3, #48	@ 0x30
 8006f10:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f14:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006f18:	1b92      	subs	r2, r2, r6
 8006f1a:	6122      	str	r2, [r4, #16]
 8006f1c:	f8cd a000 	str.w	sl, [sp]
 8006f20:	464b      	mov	r3, r9
 8006f22:	aa03      	add	r2, sp, #12
 8006f24:	4621      	mov	r1, r4
 8006f26:	4640      	mov	r0, r8
 8006f28:	f7ff fee6 	bl	8006cf8 <_printf_common>
 8006f2c:	3001      	adds	r0, #1
 8006f2e:	d14a      	bne.n	8006fc6 <_printf_i+0x1f2>
 8006f30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f34:	b004      	add	sp, #16
 8006f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f3a:	6823      	ldr	r3, [r4, #0]
 8006f3c:	f043 0320 	orr.w	r3, r3, #32
 8006f40:	6023      	str	r3, [r4, #0]
 8006f42:	4833      	ldr	r0, [pc, #204]	@ (8007010 <_printf_i+0x23c>)
 8006f44:	2778      	movs	r7, #120	@ 0x78
 8006f46:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f4a:	6823      	ldr	r3, [r4, #0]
 8006f4c:	6831      	ldr	r1, [r6, #0]
 8006f4e:	061f      	lsls	r7, r3, #24
 8006f50:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f54:	d402      	bmi.n	8006f5c <_printf_i+0x188>
 8006f56:	065f      	lsls	r7, r3, #25
 8006f58:	bf48      	it	mi
 8006f5a:	b2ad      	uxthmi	r5, r5
 8006f5c:	6031      	str	r1, [r6, #0]
 8006f5e:	07d9      	lsls	r1, r3, #31
 8006f60:	bf44      	itt	mi
 8006f62:	f043 0320 	orrmi.w	r3, r3, #32
 8006f66:	6023      	strmi	r3, [r4, #0]
 8006f68:	b11d      	cbz	r5, 8006f72 <_printf_i+0x19e>
 8006f6a:	2310      	movs	r3, #16
 8006f6c:	e7ac      	b.n	8006ec8 <_printf_i+0xf4>
 8006f6e:	4827      	ldr	r0, [pc, #156]	@ (800700c <_printf_i+0x238>)
 8006f70:	e7e9      	b.n	8006f46 <_printf_i+0x172>
 8006f72:	6823      	ldr	r3, [r4, #0]
 8006f74:	f023 0320 	bic.w	r3, r3, #32
 8006f78:	6023      	str	r3, [r4, #0]
 8006f7a:	e7f6      	b.n	8006f6a <_printf_i+0x196>
 8006f7c:	4616      	mov	r6, r2
 8006f7e:	e7bd      	b.n	8006efc <_printf_i+0x128>
 8006f80:	6833      	ldr	r3, [r6, #0]
 8006f82:	6825      	ldr	r5, [r4, #0]
 8006f84:	6961      	ldr	r1, [r4, #20]
 8006f86:	1d18      	adds	r0, r3, #4
 8006f88:	6030      	str	r0, [r6, #0]
 8006f8a:	062e      	lsls	r6, r5, #24
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	d501      	bpl.n	8006f94 <_printf_i+0x1c0>
 8006f90:	6019      	str	r1, [r3, #0]
 8006f92:	e002      	b.n	8006f9a <_printf_i+0x1c6>
 8006f94:	0668      	lsls	r0, r5, #25
 8006f96:	d5fb      	bpl.n	8006f90 <_printf_i+0x1bc>
 8006f98:	8019      	strh	r1, [r3, #0]
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	6123      	str	r3, [r4, #16]
 8006f9e:	4616      	mov	r6, r2
 8006fa0:	e7bc      	b.n	8006f1c <_printf_i+0x148>
 8006fa2:	6833      	ldr	r3, [r6, #0]
 8006fa4:	1d1a      	adds	r2, r3, #4
 8006fa6:	6032      	str	r2, [r6, #0]
 8006fa8:	681e      	ldr	r6, [r3, #0]
 8006faa:	6862      	ldr	r2, [r4, #4]
 8006fac:	2100      	movs	r1, #0
 8006fae:	4630      	mov	r0, r6
 8006fb0:	f7f9 f90e 	bl	80001d0 <memchr>
 8006fb4:	b108      	cbz	r0, 8006fba <_printf_i+0x1e6>
 8006fb6:	1b80      	subs	r0, r0, r6
 8006fb8:	6060      	str	r0, [r4, #4]
 8006fba:	6863      	ldr	r3, [r4, #4]
 8006fbc:	6123      	str	r3, [r4, #16]
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fc4:	e7aa      	b.n	8006f1c <_printf_i+0x148>
 8006fc6:	6923      	ldr	r3, [r4, #16]
 8006fc8:	4632      	mov	r2, r6
 8006fca:	4649      	mov	r1, r9
 8006fcc:	4640      	mov	r0, r8
 8006fce:	47d0      	blx	sl
 8006fd0:	3001      	adds	r0, #1
 8006fd2:	d0ad      	beq.n	8006f30 <_printf_i+0x15c>
 8006fd4:	6823      	ldr	r3, [r4, #0]
 8006fd6:	079b      	lsls	r3, r3, #30
 8006fd8:	d413      	bmi.n	8007002 <_printf_i+0x22e>
 8006fda:	68e0      	ldr	r0, [r4, #12]
 8006fdc:	9b03      	ldr	r3, [sp, #12]
 8006fde:	4298      	cmp	r0, r3
 8006fe0:	bfb8      	it	lt
 8006fe2:	4618      	movlt	r0, r3
 8006fe4:	e7a6      	b.n	8006f34 <_printf_i+0x160>
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	4632      	mov	r2, r6
 8006fea:	4649      	mov	r1, r9
 8006fec:	4640      	mov	r0, r8
 8006fee:	47d0      	blx	sl
 8006ff0:	3001      	adds	r0, #1
 8006ff2:	d09d      	beq.n	8006f30 <_printf_i+0x15c>
 8006ff4:	3501      	adds	r5, #1
 8006ff6:	68e3      	ldr	r3, [r4, #12]
 8006ff8:	9903      	ldr	r1, [sp, #12]
 8006ffa:	1a5b      	subs	r3, r3, r1
 8006ffc:	42ab      	cmp	r3, r5
 8006ffe:	dcf2      	bgt.n	8006fe6 <_printf_i+0x212>
 8007000:	e7eb      	b.n	8006fda <_printf_i+0x206>
 8007002:	2500      	movs	r5, #0
 8007004:	f104 0619 	add.w	r6, r4, #25
 8007008:	e7f5      	b.n	8006ff6 <_printf_i+0x222>
 800700a:	bf00      	nop
 800700c:	0800b09a 	.word	0x0800b09a
 8007010:	0800b0ab 	.word	0x0800b0ab

08007014 <_scanf_float>:
 8007014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007018:	b087      	sub	sp, #28
 800701a:	4617      	mov	r7, r2
 800701c:	9303      	str	r3, [sp, #12]
 800701e:	688b      	ldr	r3, [r1, #8]
 8007020:	1e5a      	subs	r2, r3, #1
 8007022:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007026:	bf81      	itttt	hi
 8007028:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800702c:	eb03 0b05 	addhi.w	fp, r3, r5
 8007030:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007034:	608b      	strhi	r3, [r1, #8]
 8007036:	680b      	ldr	r3, [r1, #0]
 8007038:	460a      	mov	r2, r1
 800703a:	f04f 0500 	mov.w	r5, #0
 800703e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007042:	f842 3b1c 	str.w	r3, [r2], #28
 8007046:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800704a:	4680      	mov	r8, r0
 800704c:	460c      	mov	r4, r1
 800704e:	bf98      	it	ls
 8007050:	f04f 0b00 	movls.w	fp, #0
 8007054:	9201      	str	r2, [sp, #4]
 8007056:	4616      	mov	r6, r2
 8007058:	46aa      	mov	sl, r5
 800705a:	46a9      	mov	r9, r5
 800705c:	9502      	str	r5, [sp, #8]
 800705e:	68a2      	ldr	r2, [r4, #8]
 8007060:	b152      	cbz	r2, 8007078 <_scanf_float+0x64>
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	2b4e      	cmp	r3, #78	@ 0x4e
 8007068:	d864      	bhi.n	8007134 <_scanf_float+0x120>
 800706a:	2b40      	cmp	r3, #64	@ 0x40
 800706c:	d83c      	bhi.n	80070e8 <_scanf_float+0xd4>
 800706e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007072:	b2c8      	uxtb	r0, r1
 8007074:	280e      	cmp	r0, #14
 8007076:	d93a      	bls.n	80070ee <_scanf_float+0xda>
 8007078:	f1b9 0f00 	cmp.w	r9, #0
 800707c:	d003      	beq.n	8007086 <_scanf_float+0x72>
 800707e:	6823      	ldr	r3, [r4, #0]
 8007080:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007084:	6023      	str	r3, [r4, #0]
 8007086:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800708a:	f1ba 0f01 	cmp.w	sl, #1
 800708e:	f200 8117 	bhi.w	80072c0 <_scanf_float+0x2ac>
 8007092:	9b01      	ldr	r3, [sp, #4]
 8007094:	429e      	cmp	r6, r3
 8007096:	f200 8108 	bhi.w	80072aa <_scanf_float+0x296>
 800709a:	2001      	movs	r0, #1
 800709c:	b007      	add	sp, #28
 800709e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070a2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80070a6:	2a0d      	cmp	r2, #13
 80070a8:	d8e6      	bhi.n	8007078 <_scanf_float+0x64>
 80070aa:	a101      	add	r1, pc, #4	@ (adr r1, 80070b0 <_scanf_float+0x9c>)
 80070ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80070b0:	080071f7 	.word	0x080071f7
 80070b4:	08007079 	.word	0x08007079
 80070b8:	08007079 	.word	0x08007079
 80070bc:	08007079 	.word	0x08007079
 80070c0:	08007257 	.word	0x08007257
 80070c4:	0800722f 	.word	0x0800722f
 80070c8:	08007079 	.word	0x08007079
 80070cc:	08007079 	.word	0x08007079
 80070d0:	08007205 	.word	0x08007205
 80070d4:	08007079 	.word	0x08007079
 80070d8:	08007079 	.word	0x08007079
 80070dc:	08007079 	.word	0x08007079
 80070e0:	08007079 	.word	0x08007079
 80070e4:	080071bd 	.word	0x080071bd
 80070e8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80070ec:	e7db      	b.n	80070a6 <_scanf_float+0x92>
 80070ee:	290e      	cmp	r1, #14
 80070f0:	d8c2      	bhi.n	8007078 <_scanf_float+0x64>
 80070f2:	a001      	add	r0, pc, #4	@ (adr r0, 80070f8 <_scanf_float+0xe4>)
 80070f4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80070f8:	080071ad 	.word	0x080071ad
 80070fc:	08007079 	.word	0x08007079
 8007100:	080071ad 	.word	0x080071ad
 8007104:	08007243 	.word	0x08007243
 8007108:	08007079 	.word	0x08007079
 800710c:	08007155 	.word	0x08007155
 8007110:	08007193 	.word	0x08007193
 8007114:	08007193 	.word	0x08007193
 8007118:	08007193 	.word	0x08007193
 800711c:	08007193 	.word	0x08007193
 8007120:	08007193 	.word	0x08007193
 8007124:	08007193 	.word	0x08007193
 8007128:	08007193 	.word	0x08007193
 800712c:	08007193 	.word	0x08007193
 8007130:	08007193 	.word	0x08007193
 8007134:	2b6e      	cmp	r3, #110	@ 0x6e
 8007136:	d809      	bhi.n	800714c <_scanf_float+0x138>
 8007138:	2b60      	cmp	r3, #96	@ 0x60
 800713a:	d8b2      	bhi.n	80070a2 <_scanf_float+0x8e>
 800713c:	2b54      	cmp	r3, #84	@ 0x54
 800713e:	d07b      	beq.n	8007238 <_scanf_float+0x224>
 8007140:	2b59      	cmp	r3, #89	@ 0x59
 8007142:	d199      	bne.n	8007078 <_scanf_float+0x64>
 8007144:	2d07      	cmp	r5, #7
 8007146:	d197      	bne.n	8007078 <_scanf_float+0x64>
 8007148:	2508      	movs	r5, #8
 800714a:	e02c      	b.n	80071a6 <_scanf_float+0x192>
 800714c:	2b74      	cmp	r3, #116	@ 0x74
 800714e:	d073      	beq.n	8007238 <_scanf_float+0x224>
 8007150:	2b79      	cmp	r3, #121	@ 0x79
 8007152:	e7f6      	b.n	8007142 <_scanf_float+0x12e>
 8007154:	6821      	ldr	r1, [r4, #0]
 8007156:	05c8      	lsls	r0, r1, #23
 8007158:	d51b      	bpl.n	8007192 <_scanf_float+0x17e>
 800715a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800715e:	6021      	str	r1, [r4, #0]
 8007160:	f109 0901 	add.w	r9, r9, #1
 8007164:	f1bb 0f00 	cmp.w	fp, #0
 8007168:	d003      	beq.n	8007172 <_scanf_float+0x15e>
 800716a:	3201      	adds	r2, #1
 800716c:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8007170:	60a2      	str	r2, [r4, #8]
 8007172:	68a3      	ldr	r3, [r4, #8]
 8007174:	3b01      	subs	r3, #1
 8007176:	60a3      	str	r3, [r4, #8]
 8007178:	6923      	ldr	r3, [r4, #16]
 800717a:	3301      	adds	r3, #1
 800717c:	6123      	str	r3, [r4, #16]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	3b01      	subs	r3, #1
 8007182:	2b00      	cmp	r3, #0
 8007184:	607b      	str	r3, [r7, #4]
 8007186:	f340 8087 	ble.w	8007298 <_scanf_float+0x284>
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	3301      	adds	r3, #1
 800718e:	603b      	str	r3, [r7, #0]
 8007190:	e765      	b.n	800705e <_scanf_float+0x4a>
 8007192:	eb1a 0105 	adds.w	r1, sl, r5
 8007196:	f47f af6f 	bne.w	8007078 <_scanf_float+0x64>
 800719a:	6822      	ldr	r2, [r4, #0]
 800719c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80071a0:	6022      	str	r2, [r4, #0]
 80071a2:	460d      	mov	r5, r1
 80071a4:	468a      	mov	sl, r1
 80071a6:	f806 3b01 	strb.w	r3, [r6], #1
 80071aa:	e7e2      	b.n	8007172 <_scanf_float+0x15e>
 80071ac:	6822      	ldr	r2, [r4, #0]
 80071ae:	0610      	lsls	r0, r2, #24
 80071b0:	f57f af62 	bpl.w	8007078 <_scanf_float+0x64>
 80071b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80071b8:	6022      	str	r2, [r4, #0]
 80071ba:	e7f4      	b.n	80071a6 <_scanf_float+0x192>
 80071bc:	f1ba 0f00 	cmp.w	sl, #0
 80071c0:	d10e      	bne.n	80071e0 <_scanf_float+0x1cc>
 80071c2:	f1b9 0f00 	cmp.w	r9, #0
 80071c6:	d10e      	bne.n	80071e6 <_scanf_float+0x1d2>
 80071c8:	6822      	ldr	r2, [r4, #0]
 80071ca:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80071ce:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80071d2:	d108      	bne.n	80071e6 <_scanf_float+0x1d2>
 80071d4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80071d8:	6022      	str	r2, [r4, #0]
 80071da:	f04f 0a01 	mov.w	sl, #1
 80071de:	e7e2      	b.n	80071a6 <_scanf_float+0x192>
 80071e0:	f1ba 0f02 	cmp.w	sl, #2
 80071e4:	d055      	beq.n	8007292 <_scanf_float+0x27e>
 80071e6:	2d01      	cmp	r5, #1
 80071e8:	d002      	beq.n	80071f0 <_scanf_float+0x1dc>
 80071ea:	2d04      	cmp	r5, #4
 80071ec:	f47f af44 	bne.w	8007078 <_scanf_float+0x64>
 80071f0:	3501      	adds	r5, #1
 80071f2:	b2ed      	uxtb	r5, r5
 80071f4:	e7d7      	b.n	80071a6 <_scanf_float+0x192>
 80071f6:	f1ba 0f01 	cmp.w	sl, #1
 80071fa:	f47f af3d 	bne.w	8007078 <_scanf_float+0x64>
 80071fe:	f04f 0a02 	mov.w	sl, #2
 8007202:	e7d0      	b.n	80071a6 <_scanf_float+0x192>
 8007204:	b97d      	cbnz	r5, 8007226 <_scanf_float+0x212>
 8007206:	f1b9 0f00 	cmp.w	r9, #0
 800720a:	f47f af38 	bne.w	800707e <_scanf_float+0x6a>
 800720e:	6822      	ldr	r2, [r4, #0]
 8007210:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007214:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007218:	f040 8108 	bne.w	800742c <_scanf_float+0x418>
 800721c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007220:	6022      	str	r2, [r4, #0]
 8007222:	2501      	movs	r5, #1
 8007224:	e7bf      	b.n	80071a6 <_scanf_float+0x192>
 8007226:	2d03      	cmp	r5, #3
 8007228:	d0e2      	beq.n	80071f0 <_scanf_float+0x1dc>
 800722a:	2d05      	cmp	r5, #5
 800722c:	e7de      	b.n	80071ec <_scanf_float+0x1d8>
 800722e:	2d02      	cmp	r5, #2
 8007230:	f47f af22 	bne.w	8007078 <_scanf_float+0x64>
 8007234:	2503      	movs	r5, #3
 8007236:	e7b6      	b.n	80071a6 <_scanf_float+0x192>
 8007238:	2d06      	cmp	r5, #6
 800723a:	f47f af1d 	bne.w	8007078 <_scanf_float+0x64>
 800723e:	2507      	movs	r5, #7
 8007240:	e7b1      	b.n	80071a6 <_scanf_float+0x192>
 8007242:	6822      	ldr	r2, [r4, #0]
 8007244:	0591      	lsls	r1, r2, #22
 8007246:	f57f af17 	bpl.w	8007078 <_scanf_float+0x64>
 800724a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800724e:	6022      	str	r2, [r4, #0]
 8007250:	f8cd 9008 	str.w	r9, [sp, #8]
 8007254:	e7a7      	b.n	80071a6 <_scanf_float+0x192>
 8007256:	6822      	ldr	r2, [r4, #0]
 8007258:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800725c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007260:	d006      	beq.n	8007270 <_scanf_float+0x25c>
 8007262:	0550      	lsls	r0, r2, #21
 8007264:	f57f af08 	bpl.w	8007078 <_scanf_float+0x64>
 8007268:	f1b9 0f00 	cmp.w	r9, #0
 800726c:	f000 80de 	beq.w	800742c <_scanf_float+0x418>
 8007270:	0591      	lsls	r1, r2, #22
 8007272:	bf58      	it	pl
 8007274:	9902      	ldrpl	r1, [sp, #8]
 8007276:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800727a:	bf58      	it	pl
 800727c:	eba9 0101 	subpl.w	r1, r9, r1
 8007280:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007284:	bf58      	it	pl
 8007286:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800728a:	6022      	str	r2, [r4, #0]
 800728c:	f04f 0900 	mov.w	r9, #0
 8007290:	e789      	b.n	80071a6 <_scanf_float+0x192>
 8007292:	f04f 0a03 	mov.w	sl, #3
 8007296:	e786      	b.n	80071a6 <_scanf_float+0x192>
 8007298:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800729c:	4639      	mov	r1, r7
 800729e:	4640      	mov	r0, r8
 80072a0:	4798      	blx	r3
 80072a2:	2800      	cmp	r0, #0
 80072a4:	f43f aedb 	beq.w	800705e <_scanf_float+0x4a>
 80072a8:	e6e6      	b.n	8007078 <_scanf_float+0x64>
 80072aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80072ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80072b2:	463a      	mov	r2, r7
 80072b4:	4640      	mov	r0, r8
 80072b6:	4798      	blx	r3
 80072b8:	6923      	ldr	r3, [r4, #16]
 80072ba:	3b01      	subs	r3, #1
 80072bc:	6123      	str	r3, [r4, #16]
 80072be:	e6e8      	b.n	8007092 <_scanf_float+0x7e>
 80072c0:	1e6b      	subs	r3, r5, #1
 80072c2:	2b06      	cmp	r3, #6
 80072c4:	d824      	bhi.n	8007310 <_scanf_float+0x2fc>
 80072c6:	2d02      	cmp	r5, #2
 80072c8:	d836      	bhi.n	8007338 <_scanf_float+0x324>
 80072ca:	9b01      	ldr	r3, [sp, #4]
 80072cc:	429e      	cmp	r6, r3
 80072ce:	f67f aee4 	bls.w	800709a <_scanf_float+0x86>
 80072d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80072d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80072da:	463a      	mov	r2, r7
 80072dc:	4640      	mov	r0, r8
 80072de:	4798      	blx	r3
 80072e0:	6923      	ldr	r3, [r4, #16]
 80072e2:	3b01      	subs	r3, #1
 80072e4:	6123      	str	r3, [r4, #16]
 80072e6:	e7f0      	b.n	80072ca <_scanf_float+0x2b6>
 80072e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80072ec:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80072f0:	463a      	mov	r2, r7
 80072f2:	4640      	mov	r0, r8
 80072f4:	4798      	blx	r3
 80072f6:	6923      	ldr	r3, [r4, #16]
 80072f8:	3b01      	subs	r3, #1
 80072fa:	6123      	str	r3, [r4, #16]
 80072fc:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007300:	fa5f fa8a 	uxtb.w	sl, sl
 8007304:	f1ba 0f02 	cmp.w	sl, #2
 8007308:	d1ee      	bne.n	80072e8 <_scanf_float+0x2d4>
 800730a:	3d03      	subs	r5, #3
 800730c:	b2ed      	uxtb	r5, r5
 800730e:	1b76      	subs	r6, r6, r5
 8007310:	6823      	ldr	r3, [r4, #0]
 8007312:	05da      	lsls	r2, r3, #23
 8007314:	d530      	bpl.n	8007378 <_scanf_float+0x364>
 8007316:	055b      	lsls	r3, r3, #21
 8007318:	d511      	bpl.n	800733e <_scanf_float+0x32a>
 800731a:	9b01      	ldr	r3, [sp, #4]
 800731c:	429e      	cmp	r6, r3
 800731e:	f67f aebc 	bls.w	800709a <_scanf_float+0x86>
 8007322:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007326:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800732a:	463a      	mov	r2, r7
 800732c:	4640      	mov	r0, r8
 800732e:	4798      	blx	r3
 8007330:	6923      	ldr	r3, [r4, #16]
 8007332:	3b01      	subs	r3, #1
 8007334:	6123      	str	r3, [r4, #16]
 8007336:	e7f0      	b.n	800731a <_scanf_float+0x306>
 8007338:	46aa      	mov	sl, r5
 800733a:	46b3      	mov	fp, r6
 800733c:	e7de      	b.n	80072fc <_scanf_float+0x2e8>
 800733e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007342:	6923      	ldr	r3, [r4, #16]
 8007344:	2965      	cmp	r1, #101	@ 0x65
 8007346:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800734a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800734e:	6123      	str	r3, [r4, #16]
 8007350:	d00c      	beq.n	800736c <_scanf_float+0x358>
 8007352:	2945      	cmp	r1, #69	@ 0x45
 8007354:	d00a      	beq.n	800736c <_scanf_float+0x358>
 8007356:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800735a:	463a      	mov	r2, r7
 800735c:	4640      	mov	r0, r8
 800735e:	4798      	blx	r3
 8007360:	6923      	ldr	r3, [r4, #16]
 8007362:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007366:	3b01      	subs	r3, #1
 8007368:	1eb5      	subs	r5, r6, #2
 800736a:	6123      	str	r3, [r4, #16]
 800736c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007370:	463a      	mov	r2, r7
 8007372:	4640      	mov	r0, r8
 8007374:	4798      	blx	r3
 8007376:	462e      	mov	r6, r5
 8007378:	6822      	ldr	r2, [r4, #0]
 800737a:	f012 0210 	ands.w	r2, r2, #16
 800737e:	d001      	beq.n	8007384 <_scanf_float+0x370>
 8007380:	2000      	movs	r0, #0
 8007382:	e68b      	b.n	800709c <_scanf_float+0x88>
 8007384:	7032      	strb	r2, [r6, #0]
 8007386:	6823      	ldr	r3, [r4, #0]
 8007388:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800738c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007390:	d11c      	bne.n	80073cc <_scanf_float+0x3b8>
 8007392:	9b02      	ldr	r3, [sp, #8]
 8007394:	454b      	cmp	r3, r9
 8007396:	eba3 0209 	sub.w	r2, r3, r9
 800739a:	d123      	bne.n	80073e4 <_scanf_float+0x3d0>
 800739c:	9901      	ldr	r1, [sp, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	4640      	mov	r0, r8
 80073a2:	f000 ff11 	bl	80081c8 <_strtod_r>
 80073a6:	9b03      	ldr	r3, [sp, #12]
 80073a8:	6821      	ldr	r1, [r4, #0]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f011 0f02 	tst.w	r1, #2
 80073b0:	ec57 6b10 	vmov	r6, r7, d0
 80073b4:	f103 0204 	add.w	r2, r3, #4
 80073b8:	d01f      	beq.n	80073fa <_scanf_float+0x3e6>
 80073ba:	9903      	ldr	r1, [sp, #12]
 80073bc:	600a      	str	r2, [r1, #0]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	e9c3 6700 	strd	r6, r7, [r3]
 80073c4:	68e3      	ldr	r3, [r4, #12]
 80073c6:	3301      	adds	r3, #1
 80073c8:	60e3      	str	r3, [r4, #12]
 80073ca:	e7d9      	b.n	8007380 <_scanf_float+0x36c>
 80073cc:	9b04      	ldr	r3, [sp, #16]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d0e4      	beq.n	800739c <_scanf_float+0x388>
 80073d2:	9905      	ldr	r1, [sp, #20]
 80073d4:	230a      	movs	r3, #10
 80073d6:	3101      	adds	r1, #1
 80073d8:	4640      	mov	r0, r8
 80073da:	f000 ff75 	bl	80082c8 <_strtol_r>
 80073de:	9b04      	ldr	r3, [sp, #16]
 80073e0:	9e05      	ldr	r6, [sp, #20]
 80073e2:	1ac2      	subs	r2, r0, r3
 80073e4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80073e8:	429e      	cmp	r6, r3
 80073ea:	bf28      	it	cs
 80073ec:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80073f0:	4910      	ldr	r1, [pc, #64]	@ (8007434 <_scanf_float+0x420>)
 80073f2:	4630      	mov	r0, r6
 80073f4:	f000 f822 	bl	800743c <siprintf>
 80073f8:	e7d0      	b.n	800739c <_scanf_float+0x388>
 80073fa:	f011 0f04 	tst.w	r1, #4
 80073fe:	9903      	ldr	r1, [sp, #12]
 8007400:	600a      	str	r2, [r1, #0]
 8007402:	d1dc      	bne.n	80073be <_scanf_float+0x3aa>
 8007404:	681d      	ldr	r5, [r3, #0]
 8007406:	4632      	mov	r2, r6
 8007408:	463b      	mov	r3, r7
 800740a:	4630      	mov	r0, r6
 800740c:	4639      	mov	r1, r7
 800740e:	f7f9 fb8d 	bl	8000b2c <__aeabi_dcmpun>
 8007412:	b128      	cbz	r0, 8007420 <_scanf_float+0x40c>
 8007414:	4808      	ldr	r0, [pc, #32]	@ (8007438 <_scanf_float+0x424>)
 8007416:	f001 f84b 	bl	80084b0 <nanf>
 800741a:	ed85 0a00 	vstr	s0, [r5]
 800741e:	e7d1      	b.n	80073c4 <_scanf_float+0x3b0>
 8007420:	4630      	mov	r0, r6
 8007422:	4639      	mov	r1, r7
 8007424:	f7f9 fbe0 	bl	8000be8 <__aeabi_d2f>
 8007428:	6028      	str	r0, [r5, #0]
 800742a:	e7cb      	b.n	80073c4 <_scanf_float+0x3b0>
 800742c:	f04f 0900 	mov.w	r9, #0
 8007430:	e629      	b.n	8007086 <_scanf_float+0x72>
 8007432:	bf00      	nop
 8007434:	0800b0bc 	.word	0x0800b0bc
 8007438:	0800b4b3 	.word	0x0800b4b3

0800743c <siprintf>:
 800743c:	b40e      	push	{r1, r2, r3}
 800743e:	b500      	push	{lr}
 8007440:	b09c      	sub	sp, #112	@ 0x70
 8007442:	ab1d      	add	r3, sp, #116	@ 0x74
 8007444:	9002      	str	r0, [sp, #8]
 8007446:	9006      	str	r0, [sp, #24]
 8007448:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800744c:	4809      	ldr	r0, [pc, #36]	@ (8007474 <siprintf+0x38>)
 800744e:	9107      	str	r1, [sp, #28]
 8007450:	9104      	str	r1, [sp, #16]
 8007452:	4909      	ldr	r1, [pc, #36]	@ (8007478 <siprintf+0x3c>)
 8007454:	f853 2b04 	ldr.w	r2, [r3], #4
 8007458:	9105      	str	r1, [sp, #20]
 800745a:	6800      	ldr	r0, [r0, #0]
 800745c:	9301      	str	r3, [sp, #4]
 800745e:	a902      	add	r1, sp, #8
 8007460:	f002 fa0e 	bl	8009880 <_svfiprintf_r>
 8007464:	9b02      	ldr	r3, [sp, #8]
 8007466:	2200      	movs	r2, #0
 8007468:	701a      	strb	r2, [r3, #0]
 800746a:	b01c      	add	sp, #112	@ 0x70
 800746c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007470:	b003      	add	sp, #12
 8007472:	4770      	bx	lr
 8007474:	20000184 	.word	0x20000184
 8007478:	ffff0208 	.word	0xffff0208

0800747c <std>:
 800747c:	2300      	movs	r3, #0
 800747e:	b510      	push	{r4, lr}
 8007480:	4604      	mov	r4, r0
 8007482:	e9c0 3300 	strd	r3, r3, [r0]
 8007486:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800748a:	6083      	str	r3, [r0, #8]
 800748c:	8181      	strh	r1, [r0, #12]
 800748e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007490:	81c2      	strh	r2, [r0, #14]
 8007492:	6183      	str	r3, [r0, #24]
 8007494:	4619      	mov	r1, r3
 8007496:	2208      	movs	r2, #8
 8007498:	305c      	adds	r0, #92	@ 0x5c
 800749a:	f000 ffb7 	bl	800840c <memset>
 800749e:	4b0d      	ldr	r3, [pc, #52]	@ (80074d4 <std+0x58>)
 80074a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80074a2:	4b0d      	ldr	r3, [pc, #52]	@ (80074d8 <std+0x5c>)
 80074a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80074a6:	4b0d      	ldr	r3, [pc, #52]	@ (80074dc <std+0x60>)
 80074a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80074aa:	4b0d      	ldr	r3, [pc, #52]	@ (80074e0 <std+0x64>)
 80074ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80074ae:	4b0d      	ldr	r3, [pc, #52]	@ (80074e4 <std+0x68>)
 80074b0:	6224      	str	r4, [r4, #32]
 80074b2:	429c      	cmp	r4, r3
 80074b4:	d006      	beq.n	80074c4 <std+0x48>
 80074b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80074ba:	4294      	cmp	r4, r2
 80074bc:	d002      	beq.n	80074c4 <std+0x48>
 80074be:	33d0      	adds	r3, #208	@ 0xd0
 80074c0:	429c      	cmp	r4, r3
 80074c2:	d105      	bne.n	80074d0 <std+0x54>
 80074c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80074c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074cc:	f000 bfd4 	b.w	8008478 <__retarget_lock_init_recursive>
 80074d0:	bd10      	pop	{r4, pc}
 80074d2:	bf00      	nop
 80074d4:	0800a949 	.word	0x0800a949
 80074d8:	0800a96b 	.word	0x0800a96b
 80074dc:	0800a9a3 	.word	0x0800a9a3
 80074e0:	0800a9c7 	.word	0x0800a9c7
 80074e4:	20000320 	.word	0x20000320

080074e8 <stdio_exit_handler>:
 80074e8:	4a02      	ldr	r2, [pc, #8]	@ (80074f4 <stdio_exit_handler+0xc>)
 80074ea:	4903      	ldr	r1, [pc, #12]	@ (80074f8 <stdio_exit_handler+0x10>)
 80074ec:	4803      	ldr	r0, [pc, #12]	@ (80074fc <stdio_exit_handler+0x14>)
 80074ee:	f000 beed 	b.w	80082cc <_fwalk_sglue>
 80074f2:	bf00      	nop
 80074f4:	2000000c 	.word	0x2000000c
 80074f8:	08009f7d 	.word	0x08009f7d
 80074fc:	20000188 	.word	0x20000188

08007500 <cleanup_stdio>:
 8007500:	6841      	ldr	r1, [r0, #4]
 8007502:	4b0c      	ldr	r3, [pc, #48]	@ (8007534 <cleanup_stdio+0x34>)
 8007504:	4299      	cmp	r1, r3
 8007506:	b510      	push	{r4, lr}
 8007508:	4604      	mov	r4, r0
 800750a:	d001      	beq.n	8007510 <cleanup_stdio+0x10>
 800750c:	f002 fd36 	bl	8009f7c <_fflush_r>
 8007510:	68a1      	ldr	r1, [r4, #8]
 8007512:	4b09      	ldr	r3, [pc, #36]	@ (8007538 <cleanup_stdio+0x38>)
 8007514:	4299      	cmp	r1, r3
 8007516:	d002      	beq.n	800751e <cleanup_stdio+0x1e>
 8007518:	4620      	mov	r0, r4
 800751a:	f002 fd2f 	bl	8009f7c <_fflush_r>
 800751e:	68e1      	ldr	r1, [r4, #12]
 8007520:	4b06      	ldr	r3, [pc, #24]	@ (800753c <cleanup_stdio+0x3c>)
 8007522:	4299      	cmp	r1, r3
 8007524:	d004      	beq.n	8007530 <cleanup_stdio+0x30>
 8007526:	4620      	mov	r0, r4
 8007528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800752c:	f002 bd26 	b.w	8009f7c <_fflush_r>
 8007530:	bd10      	pop	{r4, pc}
 8007532:	bf00      	nop
 8007534:	20000320 	.word	0x20000320
 8007538:	20000388 	.word	0x20000388
 800753c:	200003f0 	.word	0x200003f0

08007540 <global_stdio_init.part.0>:
 8007540:	b510      	push	{r4, lr}
 8007542:	4b0b      	ldr	r3, [pc, #44]	@ (8007570 <global_stdio_init.part.0+0x30>)
 8007544:	4c0b      	ldr	r4, [pc, #44]	@ (8007574 <global_stdio_init.part.0+0x34>)
 8007546:	4a0c      	ldr	r2, [pc, #48]	@ (8007578 <global_stdio_init.part.0+0x38>)
 8007548:	601a      	str	r2, [r3, #0]
 800754a:	4620      	mov	r0, r4
 800754c:	2200      	movs	r2, #0
 800754e:	2104      	movs	r1, #4
 8007550:	f7ff ff94 	bl	800747c <std>
 8007554:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007558:	2201      	movs	r2, #1
 800755a:	2109      	movs	r1, #9
 800755c:	f7ff ff8e 	bl	800747c <std>
 8007560:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007564:	2202      	movs	r2, #2
 8007566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800756a:	2112      	movs	r1, #18
 800756c:	f7ff bf86 	b.w	800747c <std>
 8007570:	20000458 	.word	0x20000458
 8007574:	20000320 	.word	0x20000320
 8007578:	080074e9 	.word	0x080074e9

0800757c <__sfp_lock_acquire>:
 800757c:	4801      	ldr	r0, [pc, #4]	@ (8007584 <__sfp_lock_acquire+0x8>)
 800757e:	f000 bf7c 	b.w	800847a <__retarget_lock_acquire_recursive>
 8007582:	bf00      	nop
 8007584:	2000045d 	.word	0x2000045d

08007588 <__sfp_lock_release>:
 8007588:	4801      	ldr	r0, [pc, #4]	@ (8007590 <__sfp_lock_release+0x8>)
 800758a:	f000 bf77 	b.w	800847c <__retarget_lock_release_recursive>
 800758e:	bf00      	nop
 8007590:	2000045d 	.word	0x2000045d

08007594 <__sinit>:
 8007594:	b510      	push	{r4, lr}
 8007596:	4604      	mov	r4, r0
 8007598:	f7ff fff0 	bl	800757c <__sfp_lock_acquire>
 800759c:	6a23      	ldr	r3, [r4, #32]
 800759e:	b11b      	cbz	r3, 80075a8 <__sinit+0x14>
 80075a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075a4:	f7ff bff0 	b.w	8007588 <__sfp_lock_release>
 80075a8:	4b04      	ldr	r3, [pc, #16]	@ (80075bc <__sinit+0x28>)
 80075aa:	6223      	str	r3, [r4, #32]
 80075ac:	4b04      	ldr	r3, [pc, #16]	@ (80075c0 <__sinit+0x2c>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1f5      	bne.n	80075a0 <__sinit+0xc>
 80075b4:	f7ff ffc4 	bl	8007540 <global_stdio_init.part.0>
 80075b8:	e7f2      	b.n	80075a0 <__sinit+0xc>
 80075ba:	bf00      	nop
 80075bc:	08007501 	.word	0x08007501
 80075c0:	20000458 	.word	0x20000458

080075c4 <sulp>:
 80075c4:	b570      	push	{r4, r5, r6, lr}
 80075c6:	4604      	mov	r4, r0
 80075c8:	460d      	mov	r5, r1
 80075ca:	ec45 4b10 	vmov	d0, r4, r5
 80075ce:	4616      	mov	r6, r2
 80075d0:	f003 f87c 	bl	800a6cc <__ulp>
 80075d4:	ec51 0b10 	vmov	r0, r1, d0
 80075d8:	b17e      	cbz	r6, 80075fa <sulp+0x36>
 80075da:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80075de:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	dd09      	ble.n	80075fa <sulp+0x36>
 80075e6:	051b      	lsls	r3, r3, #20
 80075e8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80075ec:	2400      	movs	r4, #0
 80075ee:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80075f2:	4622      	mov	r2, r4
 80075f4:	462b      	mov	r3, r5
 80075f6:	f7f8 ffff 	bl	80005f8 <__aeabi_dmul>
 80075fa:	ec41 0b10 	vmov	d0, r0, r1
 80075fe:	bd70      	pop	{r4, r5, r6, pc}

08007600 <_strtod_l>:
 8007600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007604:	b09f      	sub	sp, #124	@ 0x7c
 8007606:	460c      	mov	r4, r1
 8007608:	9217      	str	r2, [sp, #92]	@ 0x5c
 800760a:	2200      	movs	r2, #0
 800760c:	921a      	str	r2, [sp, #104]	@ 0x68
 800760e:	9005      	str	r0, [sp, #20]
 8007610:	f04f 0a00 	mov.w	sl, #0
 8007614:	f04f 0b00 	mov.w	fp, #0
 8007618:	460a      	mov	r2, r1
 800761a:	9219      	str	r2, [sp, #100]	@ 0x64
 800761c:	7811      	ldrb	r1, [r2, #0]
 800761e:	292b      	cmp	r1, #43	@ 0x2b
 8007620:	d04a      	beq.n	80076b8 <_strtod_l+0xb8>
 8007622:	d838      	bhi.n	8007696 <_strtod_l+0x96>
 8007624:	290d      	cmp	r1, #13
 8007626:	d832      	bhi.n	800768e <_strtod_l+0x8e>
 8007628:	2908      	cmp	r1, #8
 800762a:	d832      	bhi.n	8007692 <_strtod_l+0x92>
 800762c:	2900      	cmp	r1, #0
 800762e:	d03b      	beq.n	80076a8 <_strtod_l+0xa8>
 8007630:	2200      	movs	r2, #0
 8007632:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007634:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007636:	782a      	ldrb	r2, [r5, #0]
 8007638:	2a30      	cmp	r2, #48	@ 0x30
 800763a:	f040 80b3 	bne.w	80077a4 <_strtod_l+0x1a4>
 800763e:	786a      	ldrb	r2, [r5, #1]
 8007640:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007644:	2a58      	cmp	r2, #88	@ 0x58
 8007646:	d16e      	bne.n	8007726 <_strtod_l+0x126>
 8007648:	9302      	str	r3, [sp, #8]
 800764a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800764c:	9301      	str	r3, [sp, #4]
 800764e:	ab1a      	add	r3, sp, #104	@ 0x68
 8007650:	9300      	str	r3, [sp, #0]
 8007652:	4a8e      	ldr	r2, [pc, #568]	@ (800788c <_strtod_l+0x28c>)
 8007654:	9805      	ldr	r0, [sp, #20]
 8007656:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007658:	a919      	add	r1, sp, #100	@ 0x64
 800765a:	f001 fde5 	bl	8009228 <__gethex>
 800765e:	f010 060f 	ands.w	r6, r0, #15
 8007662:	4604      	mov	r4, r0
 8007664:	d005      	beq.n	8007672 <_strtod_l+0x72>
 8007666:	2e06      	cmp	r6, #6
 8007668:	d128      	bne.n	80076bc <_strtod_l+0xbc>
 800766a:	3501      	adds	r5, #1
 800766c:	2300      	movs	r3, #0
 800766e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007670:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007672:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007674:	2b00      	cmp	r3, #0
 8007676:	f040 858e 	bne.w	8008196 <_strtod_l+0xb96>
 800767a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800767c:	b1cb      	cbz	r3, 80076b2 <_strtod_l+0xb2>
 800767e:	4652      	mov	r2, sl
 8007680:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007684:	ec43 2b10 	vmov	d0, r2, r3
 8007688:	b01f      	add	sp, #124	@ 0x7c
 800768a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800768e:	2920      	cmp	r1, #32
 8007690:	d1ce      	bne.n	8007630 <_strtod_l+0x30>
 8007692:	3201      	adds	r2, #1
 8007694:	e7c1      	b.n	800761a <_strtod_l+0x1a>
 8007696:	292d      	cmp	r1, #45	@ 0x2d
 8007698:	d1ca      	bne.n	8007630 <_strtod_l+0x30>
 800769a:	2101      	movs	r1, #1
 800769c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800769e:	1c51      	adds	r1, r2, #1
 80076a0:	9119      	str	r1, [sp, #100]	@ 0x64
 80076a2:	7852      	ldrb	r2, [r2, #1]
 80076a4:	2a00      	cmp	r2, #0
 80076a6:	d1c5      	bne.n	8007634 <_strtod_l+0x34>
 80076a8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80076aa:	9419      	str	r4, [sp, #100]	@ 0x64
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	f040 8570 	bne.w	8008192 <_strtod_l+0xb92>
 80076b2:	4652      	mov	r2, sl
 80076b4:	465b      	mov	r3, fp
 80076b6:	e7e5      	b.n	8007684 <_strtod_l+0x84>
 80076b8:	2100      	movs	r1, #0
 80076ba:	e7ef      	b.n	800769c <_strtod_l+0x9c>
 80076bc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80076be:	b13a      	cbz	r2, 80076d0 <_strtod_l+0xd0>
 80076c0:	2135      	movs	r1, #53	@ 0x35
 80076c2:	a81c      	add	r0, sp, #112	@ 0x70
 80076c4:	f003 f8fc 	bl	800a8c0 <__copybits>
 80076c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80076ca:	9805      	ldr	r0, [sp, #20]
 80076cc:	f002 fcca 	bl	800a064 <_Bfree>
 80076d0:	3e01      	subs	r6, #1
 80076d2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80076d4:	2e04      	cmp	r6, #4
 80076d6:	d806      	bhi.n	80076e6 <_strtod_l+0xe6>
 80076d8:	e8df f006 	tbb	[pc, r6]
 80076dc:	201d0314 	.word	0x201d0314
 80076e0:	14          	.byte	0x14
 80076e1:	00          	.byte	0x00
 80076e2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80076e6:	05e1      	lsls	r1, r4, #23
 80076e8:	bf48      	it	mi
 80076ea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80076ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80076f2:	0d1b      	lsrs	r3, r3, #20
 80076f4:	051b      	lsls	r3, r3, #20
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d1bb      	bne.n	8007672 <_strtod_l+0x72>
 80076fa:	f000 fe93 	bl	8008424 <__errno>
 80076fe:	2322      	movs	r3, #34	@ 0x22
 8007700:	6003      	str	r3, [r0, #0]
 8007702:	e7b6      	b.n	8007672 <_strtod_l+0x72>
 8007704:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007708:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800770c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007710:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007714:	e7e7      	b.n	80076e6 <_strtod_l+0xe6>
 8007716:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007894 <_strtod_l+0x294>
 800771a:	e7e4      	b.n	80076e6 <_strtod_l+0xe6>
 800771c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007720:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007724:	e7df      	b.n	80076e6 <_strtod_l+0xe6>
 8007726:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007728:	1c5a      	adds	r2, r3, #1
 800772a:	9219      	str	r2, [sp, #100]	@ 0x64
 800772c:	785b      	ldrb	r3, [r3, #1]
 800772e:	2b30      	cmp	r3, #48	@ 0x30
 8007730:	d0f9      	beq.n	8007726 <_strtod_l+0x126>
 8007732:	2b00      	cmp	r3, #0
 8007734:	d09d      	beq.n	8007672 <_strtod_l+0x72>
 8007736:	2301      	movs	r3, #1
 8007738:	9309      	str	r3, [sp, #36]	@ 0x24
 800773a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800773c:	930c      	str	r3, [sp, #48]	@ 0x30
 800773e:	2300      	movs	r3, #0
 8007740:	9308      	str	r3, [sp, #32]
 8007742:	930a      	str	r3, [sp, #40]	@ 0x28
 8007744:	461f      	mov	r7, r3
 8007746:	220a      	movs	r2, #10
 8007748:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800774a:	7805      	ldrb	r5, [r0, #0]
 800774c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007750:	b2d9      	uxtb	r1, r3
 8007752:	2909      	cmp	r1, #9
 8007754:	d928      	bls.n	80077a8 <_strtod_l+0x1a8>
 8007756:	494e      	ldr	r1, [pc, #312]	@ (8007890 <_strtod_l+0x290>)
 8007758:	2201      	movs	r2, #1
 800775a:	f000 fe45 	bl	80083e8 <strncmp>
 800775e:	2800      	cmp	r0, #0
 8007760:	d032      	beq.n	80077c8 <_strtod_l+0x1c8>
 8007762:	2000      	movs	r0, #0
 8007764:	462a      	mov	r2, r5
 8007766:	4681      	mov	r9, r0
 8007768:	463d      	mov	r5, r7
 800776a:	4603      	mov	r3, r0
 800776c:	2a65      	cmp	r2, #101	@ 0x65
 800776e:	d001      	beq.n	8007774 <_strtod_l+0x174>
 8007770:	2a45      	cmp	r2, #69	@ 0x45
 8007772:	d114      	bne.n	800779e <_strtod_l+0x19e>
 8007774:	b91d      	cbnz	r5, 800777e <_strtod_l+0x17e>
 8007776:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007778:	4302      	orrs	r2, r0
 800777a:	d095      	beq.n	80076a8 <_strtod_l+0xa8>
 800777c:	2500      	movs	r5, #0
 800777e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007780:	1c62      	adds	r2, r4, #1
 8007782:	9219      	str	r2, [sp, #100]	@ 0x64
 8007784:	7862      	ldrb	r2, [r4, #1]
 8007786:	2a2b      	cmp	r2, #43	@ 0x2b
 8007788:	d077      	beq.n	800787a <_strtod_l+0x27a>
 800778a:	2a2d      	cmp	r2, #45	@ 0x2d
 800778c:	d07b      	beq.n	8007886 <_strtod_l+0x286>
 800778e:	f04f 0c00 	mov.w	ip, #0
 8007792:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007796:	2909      	cmp	r1, #9
 8007798:	f240 8082 	bls.w	80078a0 <_strtod_l+0x2a0>
 800779c:	9419      	str	r4, [sp, #100]	@ 0x64
 800779e:	f04f 0800 	mov.w	r8, #0
 80077a2:	e0a2      	b.n	80078ea <_strtod_l+0x2ea>
 80077a4:	2300      	movs	r3, #0
 80077a6:	e7c7      	b.n	8007738 <_strtod_l+0x138>
 80077a8:	2f08      	cmp	r7, #8
 80077aa:	bfd5      	itete	le
 80077ac:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80077ae:	9908      	ldrgt	r1, [sp, #32]
 80077b0:	fb02 3301 	mlale	r3, r2, r1, r3
 80077b4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80077b8:	f100 0001 	add.w	r0, r0, #1
 80077bc:	bfd4      	ite	le
 80077be:	930a      	strle	r3, [sp, #40]	@ 0x28
 80077c0:	9308      	strgt	r3, [sp, #32]
 80077c2:	3701      	adds	r7, #1
 80077c4:	9019      	str	r0, [sp, #100]	@ 0x64
 80077c6:	e7bf      	b.n	8007748 <_strtod_l+0x148>
 80077c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80077ca:	1c5a      	adds	r2, r3, #1
 80077cc:	9219      	str	r2, [sp, #100]	@ 0x64
 80077ce:	785a      	ldrb	r2, [r3, #1]
 80077d0:	b37f      	cbz	r7, 8007832 <_strtod_l+0x232>
 80077d2:	4681      	mov	r9, r0
 80077d4:	463d      	mov	r5, r7
 80077d6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80077da:	2b09      	cmp	r3, #9
 80077dc:	d912      	bls.n	8007804 <_strtod_l+0x204>
 80077de:	2301      	movs	r3, #1
 80077e0:	e7c4      	b.n	800776c <_strtod_l+0x16c>
 80077e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80077e4:	1c5a      	adds	r2, r3, #1
 80077e6:	9219      	str	r2, [sp, #100]	@ 0x64
 80077e8:	785a      	ldrb	r2, [r3, #1]
 80077ea:	3001      	adds	r0, #1
 80077ec:	2a30      	cmp	r2, #48	@ 0x30
 80077ee:	d0f8      	beq.n	80077e2 <_strtod_l+0x1e2>
 80077f0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80077f4:	2b08      	cmp	r3, #8
 80077f6:	f200 84d3 	bhi.w	80081a0 <_strtod_l+0xba0>
 80077fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80077fc:	930c      	str	r3, [sp, #48]	@ 0x30
 80077fe:	4681      	mov	r9, r0
 8007800:	2000      	movs	r0, #0
 8007802:	4605      	mov	r5, r0
 8007804:	3a30      	subs	r2, #48	@ 0x30
 8007806:	f100 0301 	add.w	r3, r0, #1
 800780a:	d02a      	beq.n	8007862 <_strtod_l+0x262>
 800780c:	4499      	add	r9, r3
 800780e:	eb00 0c05 	add.w	ip, r0, r5
 8007812:	462b      	mov	r3, r5
 8007814:	210a      	movs	r1, #10
 8007816:	4563      	cmp	r3, ip
 8007818:	d10d      	bne.n	8007836 <_strtod_l+0x236>
 800781a:	1c69      	adds	r1, r5, #1
 800781c:	4401      	add	r1, r0
 800781e:	4428      	add	r0, r5
 8007820:	2808      	cmp	r0, #8
 8007822:	dc16      	bgt.n	8007852 <_strtod_l+0x252>
 8007824:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007826:	230a      	movs	r3, #10
 8007828:	fb03 2300 	mla	r3, r3, r0, r2
 800782c:	930a      	str	r3, [sp, #40]	@ 0x28
 800782e:	2300      	movs	r3, #0
 8007830:	e018      	b.n	8007864 <_strtod_l+0x264>
 8007832:	4638      	mov	r0, r7
 8007834:	e7da      	b.n	80077ec <_strtod_l+0x1ec>
 8007836:	2b08      	cmp	r3, #8
 8007838:	f103 0301 	add.w	r3, r3, #1
 800783c:	dc03      	bgt.n	8007846 <_strtod_l+0x246>
 800783e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007840:	434e      	muls	r6, r1
 8007842:	960a      	str	r6, [sp, #40]	@ 0x28
 8007844:	e7e7      	b.n	8007816 <_strtod_l+0x216>
 8007846:	2b10      	cmp	r3, #16
 8007848:	bfde      	ittt	le
 800784a:	9e08      	ldrle	r6, [sp, #32]
 800784c:	434e      	mulle	r6, r1
 800784e:	9608      	strle	r6, [sp, #32]
 8007850:	e7e1      	b.n	8007816 <_strtod_l+0x216>
 8007852:	280f      	cmp	r0, #15
 8007854:	dceb      	bgt.n	800782e <_strtod_l+0x22e>
 8007856:	9808      	ldr	r0, [sp, #32]
 8007858:	230a      	movs	r3, #10
 800785a:	fb03 2300 	mla	r3, r3, r0, r2
 800785e:	9308      	str	r3, [sp, #32]
 8007860:	e7e5      	b.n	800782e <_strtod_l+0x22e>
 8007862:	4629      	mov	r1, r5
 8007864:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007866:	1c50      	adds	r0, r2, #1
 8007868:	9019      	str	r0, [sp, #100]	@ 0x64
 800786a:	7852      	ldrb	r2, [r2, #1]
 800786c:	4618      	mov	r0, r3
 800786e:	460d      	mov	r5, r1
 8007870:	e7b1      	b.n	80077d6 <_strtod_l+0x1d6>
 8007872:	f04f 0900 	mov.w	r9, #0
 8007876:	2301      	movs	r3, #1
 8007878:	e77d      	b.n	8007776 <_strtod_l+0x176>
 800787a:	f04f 0c00 	mov.w	ip, #0
 800787e:	1ca2      	adds	r2, r4, #2
 8007880:	9219      	str	r2, [sp, #100]	@ 0x64
 8007882:	78a2      	ldrb	r2, [r4, #2]
 8007884:	e785      	b.n	8007792 <_strtod_l+0x192>
 8007886:	f04f 0c01 	mov.w	ip, #1
 800788a:	e7f8      	b.n	800787e <_strtod_l+0x27e>
 800788c:	0800b0d8 	.word	0x0800b0d8
 8007890:	0800b0c1 	.word	0x0800b0c1
 8007894:	7ff00000 	.word	0x7ff00000
 8007898:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800789a:	1c51      	adds	r1, r2, #1
 800789c:	9119      	str	r1, [sp, #100]	@ 0x64
 800789e:	7852      	ldrb	r2, [r2, #1]
 80078a0:	2a30      	cmp	r2, #48	@ 0x30
 80078a2:	d0f9      	beq.n	8007898 <_strtod_l+0x298>
 80078a4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80078a8:	2908      	cmp	r1, #8
 80078aa:	f63f af78 	bhi.w	800779e <_strtod_l+0x19e>
 80078ae:	3a30      	subs	r2, #48	@ 0x30
 80078b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80078b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80078b4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80078b6:	f04f 080a 	mov.w	r8, #10
 80078ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80078bc:	1c56      	adds	r6, r2, #1
 80078be:	9619      	str	r6, [sp, #100]	@ 0x64
 80078c0:	7852      	ldrb	r2, [r2, #1]
 80078c2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80078c6:	f1be 0f09 	cmp.w	lr, #9
 80078ca:	d939      	bls.n	8007940 <_strtod_l+0x340>
 80078cc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80078ce:	1a76      	subs	r6, r6, r1
 80078d0:	2e08      	cmp	r6, #8
 80078d2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80078d6:	dc03      	bgt.n	80078e0 <_strtod_l+0x2e0>
 80078d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80078da:	4588      	cmp	r8, r1
 80078dc:	bfa8      	it	ge
 80078de:	4688      	movge	r8, r1
 80078e0:	f1bc 0f00 	cmp.w	ip, #0
 80078e4:	d001      	beq.n	80078ea <_strtod_l+0x2ea>
 80078e6:	f1c8 0800 	rsb	r8, r8, #0
 80078ea:	2d00      	cmp	r5, #0
 80078ec:	d14e      	bne.n	800798c <_strtod_l+0x38c>
 80078ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80078f0:	4308      	orrs	r0, r1
 80078f2:	f47f aebe 	bne.w	8007672 <_strtod_l+0x72>
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	f47f aed6 	bne.w	80076a8 <_strtod_l+0xa8>
 80078fc:	2a69      	cmp	r2, #105	@ 0x69
 80078fe:	d028      	beq.n	8007952 <_strtod_l+0x352>
 8007900:	dc25      	bgt.n	800794e <_strtod_l+0x34e>
 8007902:	2a49      	cmp	r2, #73	@ 0x49
 8007904:	d025      	beq.n	8007952 <_strtod_l+0x352>
 8007906:	2a4e      	cmp	r2, #78	@ 0x4e
 8007908:	f47f aece 	bne.w	80076a8 <_strtod_l+0xa8>
 800790c:	499b      	ldr	r1, [pc, #620]	@ (8007b7c <_strtod_l+0x57c>)
 800790e:	a819      	add	r0, sp, #100	@ 0x64
 8007910:	f001 feac 	bl	800966c <__match>
 8007914:	2800      	cmp	r0, #0
 8007916:	f43f aec7 	beq.w	80076a8 <_strtod_l+0xa8>
 800791a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	2b28      	cmp	r3, #40	@ 0x28
 8007920:	d12e      	bne.n	8007980 <_strtod_l+0x380>
 8007922:	4997      	ldr	r1, [pc, #604]	@ (8007b80 <_strtod_l+0x580>)
 8007924:	aa1c      	add	r2, sp, #112	@ 0x70
 8007926:	a819      	add	r0, sp, #100	@ 0x64
 8007928:	f001 feb4 	bl	8009694 <__hexnan>
 800792c:	2805      	cmp	r0, #5
 800792e:	d127      	bne.n	8007980 <_strtod_l+0x380>
 8007930:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007932:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007936:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800793a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800793e:	e698      	b.n	8007672 <_strtod_l+0x72>
 8007940:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007942:	fb08 2101 	mla	r1, r8, r1, r2
 8007946:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800794a:	920e      	str	r2, [sp, #56]	@ 0x38
 800794c:	e7b5      	b.n	80078ba <_strtod_l+0x2ba>
 800794e:	2a6e      	cmp	r2, #110	@ 0x6e
 8007950:	e7da      	b.n	8007908 <_strtod_l+0x308>
 8007952:	498c      	ldr	r1, [pc, #560]	@ (8007b84 <_strtod_l+0x584>)
 8007954:	a819      	add	r0, sp, #100	@ 0x64
 8007956:	f001 fe89 	bl	800966c <__match>
 800795a:	2800      	cmp	r0, #0
 800795c:	f43f aea4 	beq.w	80076a8 <_strtod_l+0xa8>
 8007960:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007962:	4989      	ldr	r1, [pc, #548]	@ (8007b88 <_strtod_l+0x588>)
 8007964:	3b01      	subs	r3, #1
 8007966:	a819      	add	r0, sp, #100	@ 0x64
 8007968:	9319      	str	r3, [sp, #100]	@ 0x64
 800796a:	f001 fe7f 	bl	800966c <__match>
 800796e:	b910      	cbnz	r0, 8007976 <_strtod_l+0x376>
 8007970:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007972:	3301      	adds	r3, #1
 8007974:	9319      	str	r3, [sp, #100]	@ 0x64
 8007976:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007b98 <_strtod_l+0x598>
 800797a:	f04f 0a00 	mov.w	sl, #0
 800797e:	e678      	b.n	8007672 <_strtod_l+0x72>
 8007980:	4882      	ldr	r0, [pc, #520]	@ (8007b8c <_strtod_l+0x58c>)
 8007982:	f000 fd8d 	bl	80084a0 <nan>
 8007986:	ec5b ab10 	vmov	sl, fp, d0
 800798a:	e672      	b.n	8007672 <_strtod_l+0x72>
 800798c:	eba8 0309 	sub.w	r3, r8, r9
 8007990:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007992:	9309      	str	r3, [sp, #36]	@ 0x24
 8007994:	2f00      	cmp	r7, #0
 8007996:	bf08      	it	eq
 8007998:	462f      	moveq	r7, r5
 800799a:	2d10      	cmp	r5, #16
 800799c:	462c      	mov	r4, r5
 800799e:	bfa8      	it	ge
 80079a0:	2410      	movge	r4, #16
 80079a2:	f7f8 fdaf 	bl	8000504 <__aeabi_ui2d>
 80079a6:	2d09      	cmp	r5, #9
 80079a8:	4682      	mov	sl, r0
 80079aa:	468b      	mov	fp, r1
 80079ac:	dc13      	bgt.n	80079d6 <_strtod_l+0x3d6>
 80079ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f43f ae5e 	beq.w	8007672 <_strtod_l+0x72>
 80079b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079b8:	dd78      	ble.n	8007aac <_strtod_l+0x4ac>
 80079ba:	2b16      	cmp	r3, #22
 80079bc:	dc5f      	bgt.n	8007a7e <_strtod_l+0x47e>
 80079be:	4974      	ldr	r1, [pc, #464]	@ (8007b90 <_strtod_l+0x590>)
 80079c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80079c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079c8:	4652      	mov	r2, sl
 80079ca:	465b      	mov	r3, fp
 80079cc:	f7f8 fe14 	bl	80005f8 <__aeabi_dmul>
 80079d0:	4682      	mov	sl, r0
 80079d2:	468b      	mov	fp, r1
 80079d4:	e64d      	b.n	8007672 <_strtod_l+0x72>
 80079d6:	4b6e      	ldr	r3, [pc, #440]	@ (8007b90 <_strtod_l+0x590>)
 80079d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80079dc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80079e0:	f7f8 fe0a 	bl	80005f8 <__aeabi_dmul>
 80079e4:	4682      	mov	sl, r0
 80079e6:	9808      	ldr	r0, [sp, #32]
 80079e8:	468b      	mov	fp, r1
 80079ea:	f7f8 fd8b 	bl	8000504 <__aeabi_ui2d>
 80079ee:	4602      	mov	r2, r0
 80079f0:	460b      	mov	r3, r1
 80079f2:	4650      	mov	r0, sl
 80079f4:	4659      	mov	r1, fp
 80079f6:	f7f8 fc49 	bl	800028c <__adddf3>
 80079fa:	2d0f      	cmp	r5, #15
 80079fc:	4682      	mov	sl, r0
 80079fe:	468b      	mov	fp, r1
 8007a00:	ddd5      	ble.n	80079ae <_strtod_l+0x3ae>
 8007a02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a04:	1b2c      	subs	r4, r5, r4
 8007a06:	441c      	add	r4, r3
 8007a08:	2c00      	cmp	r4, #0
 8007a0a:	f340 8096 	ble.w	8007b3a <_strtod_l+0x53a>
 8007a0e:	f014 030f 	ands.w	r3, r4, #15
 8007a12:	d00a      	beq.n	8007a2a <_strtod_l+0x42a>
 8007a14:	495e      	ldr	r1, [pc, #376]	@ (8007b90 <_strtod_l+0x590>)
 8007a16:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007a1a:	4652      	mov	r2, sl
 8007a1c:	465b      	mov	r3, fp
 8007a1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a22:	f7f8 fde9 	bl	80005f8 <__aeabi_dmul>
 8007a26:	4682      	mov	sl, r0
 8007a28:	468b      	mov	fp, r1
 8007a2a:	f034 040f 	bics.w	r4, r4, #15
 8007a2e:	d073      	beq.n	8007b18 <_strtod_l+0x518>
 8007a30:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007a34:	dd48      	ble.n	8007ac8 <_strtod_l+0x4c8>
 8007a36:	2400      	movs	r4, #0
 8007a38:	46a0      	mov	r8, r4
 8007a3a:	940a      	str	r4, [sp, #40]	@ 0x28
 8007a3c:	46a1      	mov	r9, r4
 8007a3e:	9a05      	ldr	r2, [sp, #20]
 8007a40:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007b98 <_strtod_l+0x598>
 8007a44:	2322      	movs	r3, #34	@ 0x22
 8007a46:	6013      	str	r3, [r2, #0]
 8007a48:	f04f 0a00 	mov.w	sl, #0
 8007a4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f43f ae0f 	beq.w	8007672 <_strtod_l+0x72>
 8007a54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007a56:	9805      	ldr	r0, [sp, #20]
 8007a58:	f002 fb04 	bl	800a064 <_Bfree>
 8007a5c:	9805      	ldr	r0, [sp, #20]
 8007a5e:	4649      	mov	r1, r9
 8007a60:	f002 fb00 	bl	800a064 <_Bfree>
 8007a64:	9805      	ldr	r0, [sp, #20]
 8007a66:	4641      	mov	r1, r8
 8007a68:	f002 fafc 	bl	800a064 <_Bfree>
 8007a6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007a6e:	9805      	ldr	r0, [sp, #20]
 8007a70:	f002 faf8 	bl	800a064 <_Bfree>
 8007a74:	9805      	ldr	r0, [sp, #20]
 8007a76:	4621      	mov	r1, r4
 8007a78:	f002 faf4 	bl	800a064 <_Bfree>
 8007a7c:	e5f9      	b.n	8007672 <_strtod_l+0x72>
 8007a7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a80:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007a84:	4293      	cmp	r3, r2
 8007a86:	dbbc      	blt.n	8007a02 <_strtod_l+0x402>
 8007a88:	4c41      	ldr	r4, [pc, #260]	@ (8007b90 <_strtod_l+0x590>)
 8007a8a:	f1c5 050f 	rsb	r5, r5, #15
 8007a8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007a92:	4652      	mov	r2, sl
 8007a94:	465b      	mov	r3, fp
 8007a96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a9a:	f7f8 fdad 	bl	80005f8 <__aeabi_dmul>
 8007a9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aa0:	1b5d      	subs	r5, r3, r5
 8007aa2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007aa6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007aaa:	e78f      	b.n	80079cc <_strtod_l+0x3cc>
 8007aac:	3316      	adds	r3, #22
 8007aae:	dba8      	blt.n	8007a02 <_strtod_l+0x402>
 8007ab0:	4b37      	ldr	r3, [pc, #220]	@ (8007b90 <_strtod_l+0x590>)
 8007ab2:	eba9 0808 	sub.w	r8, r9, r8
 8007ab6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007aba:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007abe:	4650      	mov	r0, sl
 8007ac0:	4659      	mov	r1, fp
 8007ac2:	f7f8 fec3 	bl	800084c <__aeabi_ddiv>
 8007ac6:	e783      	b.n	80079d0 <_strtod_l+0x3d0>
 8007ac8:	4b32      	ldr	r3, [pc, #200]	@ (8007b94 <_strtod_l+0x594>)
 8007aca:	9308      	str	r3, [sp, #32]
 8007acc:	2300      	movs	r3, #0
 8007ace:	1124      	asrs	r4, r4, #4
 8007ad0:	4650      	mov	r0, sl
 8007ad2:	4659      	mov	r1, fp
 8007ad4:	461e      	mov	r6, r3
 8007ad6:	2c01      	cmp	r4, #1
 8007ad8:	dc21      	bgt.n	8007b1e <_strtod_l+0x51e>
 8007ada:	b10b      	cbz	r3, 8007ae0 <_strtod_l+0x4e0>
 8007adc:	4682      	mov	sl, r0
 8007ade:	468b      	mov	fp, r1
 8007ae0:	492c      	ldr	r1, [pc, #176]	@ (8007b94 <_strtod_l+0x594>)
 8007ae2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007ae6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007aea:	4652      	mov	r2, sl
 8007aec:	465b      	mov	r3, fp
 8007aee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007af2:	f7f8 fd81 	bl	80005f8 <__aeabi_dmul>
 8007af6:	4b28      	ldr	r3, [pc, #160]	@ (8007b98 <_strtod_l+0x598>)
 8007af8:	460a      	mov	r2, r1
 8007afa:	400b      	ands	r3, r1
 8007afc:	4927      	ldr	r1, [pc, #156]	@ (8007b9c <_strtod_l+0x59c>)
 8007afe:	428b      	cmp	r3, r1
 8007b00:	4682      	mov	sl, r0
 8007b02:	d898      	bhi.n	8007a36 <_strtod_l+0x436>
 8007b04:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007b08:	428b      	cmp	r3, r1
 8007b0a:	bf86      	itte	hi
 8007b0c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007ba0 <_strtod_l+0x5a0>
 8007b10:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8007b14:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007b18:	2300      	movs	r3, #0
 8007b1a:	9308      	str	r3, [sp, #32]
 8007b1c:	e07a      	b.n	8007c14 <_strtod_l+0x614>
 8007b1e:	07e2      	lsls	r2, r4, #31
 8007b20:	d505      	bpl.n	8007b2e <_strtod_l+0x52e>
 8007b22:	9b08      	ldr	r3, [sp, #32]
 8007b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b28:	f7f8 fd66 	bl	80005f8 <__aeabi_dmul>
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	9a08      	ldr	r2, [sp, #32]
 8007b30:	3208      	adds	r2, #8
 8007b32:	3601      	adds	r6, #1
 8007b34:	1064      	asrs	r4, r4, #1
 8007b36:	9208      	str	r2, [sp, #32]
 8007b38:	e7cd      	b.n	8007ad6 <_strtod_l+0x4d6>
 8007b3a:	d0ed      	beq.n	8007b18 <_strtod_l+0x518>
 8007b3c:	4264      	negs	r4, r4
 8007b3e:	f014 020f 	ands.w	r2, r4, #15
 8007b42:	d00a      	beq.n	8007b5a <_strtod_l+0x55a>
 8007b44:	4b12      	ldr	r3, [pc, #72]	@ (8007b90 <_strtod_l+0x590>)
 8007b46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b4a:	4650      	mov	r0, sl
 8007b4c:	4659      	mov	r1, fp
 8007b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b52:	f7f8 fe7b 	bl	800084c <__aeabi_ddiv>
 8007b56:	4682      	mov	sl, r0
 8007b58:	468b      	mov	fp, r1
 8007b5a:	1124      	asrs	r4, r4, #4
 8007b5c:	d0dc      	beq.n	8007b18 <_strtod_l+0x518>
 8007b5e:	2c1f      	cmp	r4, #31
 8007b60:	dd20      	ble.n	8007ba4 <_strtod_l+0x5a4>
 8007b62:	2400      	movs	r4, #0
 8007b64:	46a0      	mov	r8, r4
 8007b66:	940a      	str	r4, [sp, #40]	@ 0x28
 8007b68:	46a1      	mov	r9, r4
 8007b6a:	9a05      	ldr	r2, [sp, #20]
 8007b6c:	2322      	movs	r3, #34	@ 0x22
 8007b6e:	f04f 0a00 	mov.w	sl, #0
 8007b72:	f04f 0b00 	mov.w	fp, #0
 8007b76:	6013      	str	r3, [r2, #0]
 8007b78:	e768      	b.n	8007a4c <_strtod_l+0x44c>
 8007b7a:	bf00      	nop
 8007b7c:	0800b095 	.word	0x0800b095
 8007b80:	0800b0c4 	.word	0x0800b0c4
 8007b84:	0800b08d 	.word	0x0800b08d
 8007b88:	0800b224 	.word	0x0800b224
 8007b8c:	0800b4b3 	.word	0x0800b4b3
 8007b90:	0800b3b0 	.word	0x0800b3b0
 8007b94:	0800b388 	.word	0x0800b388
 8007b98:	7ff00000 	.word	0x7ff00000
 8007b9c:	7ca00000 	.word	0x7ca00000
 8007ba0:	7fefffff 	.word	0x7fefffff
 8007ba4:	f014 0310 	ands.w	r3, r4, #16
 8007ba8:	bf18      	it	ne
 8007baa:	236a      	movne	r3, #106	@ 0x6a
 8007bac:	4ea9      	ldr	r6, [pc, #676]	@ (8007e54 <_strtod_l+0x854>)
 8007bae:	9308      	str	r3, [sp, #32]
 8007bb0:	4650      	mov	r0, sl
 8007bb2:	4659      	mov	r1, fp
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	07e2      	lsls	r2, r4, #31
 8007bb8:	d504      	bpl.n	8007bc4 <_strtod_l+0x5c4>
 8007bba:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007bbe:	f7f8 fd1b 	bl	80005f8 <__aeabi_dmul>
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	1064      	asrs	r4, r4, #1
 8007bc6:	f106 0608 	add.w	r6, r6, #8
 8007bca:	d1f4      	bne.n	8007bb6 <_strtod_l+0x5b6>
 8007bcc:	b10b      	cbz	r3, 8007bd2 <_strtod_l+0x5d2>
 8007bce:	4682      	mov	sl, r0
 8007bd0:	468b      	mov	fp, r1
 8007bd2:	9b08      	ldr	r3, [sp, #32]
 8007bd4:	b1b3      	cbz	r3, 8007c04 <_strtod_l+0x604>
 8007bd6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007bda:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	4659      	mov	r1, fp
 8007be2:	dd0f      	ble.n	8007c04 <_strtod_l+0x604>
 8007be4:	2b1f      	cmp	r3, #31
 8007be6:	dd55      	ble.n	8007c94 <_strtod_l+0x694>
 8007be8:	2b34      	cmp	r3, #52	@ 0x34
 8007bea:	bfde      	ittt	le
 8007bec:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8007bf0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007bf4:	4093      	lslle	r3, r2
 8007bf6:	f04f 0a00 	mov.w	sl, #0
 8007bfa:	bfcc      	ite	gt
 8007bfc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007c00:	ea03 0b01 	andle.w	fp, r3, r1
 8007c04:	2200      	movs	r2, #0
 8007c06:	2300      	movs	r3, #0
 8007c08:	4650      	mov	r0, sl
 8007c0a:	4659      	mov	r1, fp
 8007c0c:	f7f8 ff5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c10:	2800      	cmp	r0, #0
 8007c12:	d1a6      	bne.n	8007b62 <_strtod_l+0x562>
 8007c14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c16:	9300      	str	r3, [sp, #0]
 8007c18:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007c1a:	9805      	ldr	r0, [sp, #20]
 8007c1c:	462b      	mov	r3, r5
 8007c1e:	463a      	mov	r2, r7
 8007c20:	f002 fa88 	bl	800a134 <__s2b>
 8007c24:	900a      	str	r0, [sp, #40]	@ 0x28
 8007c26:	2800      	cmp	r0, #0
 8007c28:	f43f af05 	beq.w	8007a36 <_strtod_l+0x436>
 8007c2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c2e:	2a00      	cmp	r2, #0
 8007c30:	eba9 0308 	sub.w	r3, r9, r8
 8007c34:	bfa8      	it	ge
 8007c36:	2300      	movge	r3, #0
 8007c38:	9312      	str	r3, [sp, #72]	@ 0x48
 8007c3a:	2400      	movs	r4, #0
 8007c3c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007c40:	9316      	str	r3, [sp, #88]	@ 0x58
 8007c42:	46a0      	mov	r8, r4
 8007c44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c46:	9805      	ldr	r0, [sp, #20]
 8007c48:	6859      	ldr	r1, [r3, #4]
 8007c4a:	f002 f9cb 	bl	8009fe4 <_Balloc>
 8007c4e:	4681      	mov	r9, r0
 8007c50:	2800      	cmp	r0, #0
 8007c52:	f43f aef4 	beq.w	8007a3e <_strtod_l+0x43e>
 8007c56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c58:	691a      	ldr	r2, [r3, #16]
 8007c5a:	3202      	adds	r2, #2
 8007c5c:	f103 010c 	add.w	r1, r3, #12
 8007c60:	0092      	lsls	r2, r2, #2
 8007c62:	300c      	adds	r0, #12
 8007c64:	f000 fc0b 	bl	800847e <memcpy>
 8007c68:	ec4b ab10 	vmov	d0, sl, fp
 8007c6c:	9805      	ldr	r0, [sp, #20]
 8007c6e:	aa1c      	add	r2, sp, #112	@ 0x70
 8007c70:	a91b      	add	r1, sp, #108	@ 0x6c
 8007c72:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007c76:	f002 fd99 	bl	800a7ac <__d2b>
 8007c7a:	901a      	str	r0, [sp, #104]	@ 0x68
 8007c7c:	2800      	cmp	r0, #0
 8007c7e:	f43f aede 	beq.w	8007a3e <_strtod_l+0x43e>
 8007c82:	9805      	ldr	r0, [sp, #20]
 8007c84:	2101      	movs	r1, #1
 8007c86:	f002 faeb 	bl	800a260 <__i2b>
 8007c8a:	4680      	mov	r8, r0
 8007c8c:	b948      	cbnz	r0, 8007ca2 <_strtod_l+0x6a2>
 8007c8e:	f04f 0800 	mov.w	r8, #0
 8007c92:	e6d4      	b.n	8007a3e <_strtod_l+0x43e>
 8007c94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007c98:	fa02 f303 	lsl.w	r3, r2, r3
 8007c9c:	ea03 0a0a 	and.w	sl, r3, sl
 8007ca0:	e7b0      	b.n	8007c04 <_strtod_l+0x604>
 8007ca2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007ca4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007ca6:	2d00      	cmp	r5, #0
 8007ca8:	bfab      	itete	ge
 8007caa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007cac:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007cae:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007cb0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007cb2:	bfac      	ite	ge
 8007cb4:	18ef      	addge	r7, r5, r3
 8007cb6:	1b5e      	sublt	r6, r3, r5
 8007cb8:	9b08      	ldr	r3, [sp, #32]
 8007cba:	1aed      	subs	r5, r5, r3
 8007cbc:	4415      	add	r5, r2
 8007cbe:	4b66      	ldr	r3, [pc, #408]	@ (8007e58 <_strtod_l+0x858>)
 8007cc0:	3d01      	subs	r5, #1
 8007cc2:	429d      	cmp	r5, r3
 8007cc4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007cc8:	da50      	bge.n	8007d6c <_strtod_l+0x76c>
 8007cca:	1b5b      	subs	r3, r3, r5
 8007ccc:	2b1f      	cmp	r3, #31
 8007cce:	eba2 0203 	sub.w	r2, r2, r3
 8007cd2:	f04f 0101 	mov.w	r1, #1
 8007cd6:	dc3d      	bgt.n	8007d54 <_strtod_l+0x754>
 8007cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8007cdc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007cde:	2300      	movs	r3, #0
 8007ce0:	9310      	str	r3, [sp, #64]	@ 0x40
 8007ce2:	18bd      	adds	r5, r7, r2
 8007ce4:	9b08      	ldr	r3, [sp, #32]
 8007ce6:	42af      	cmp	r7, r5
 8007ce8:	4416      	add	r6, r2
 8007cea:	441e      	add	r6, r3
 8007cec:	463b      	mov	r3, r7
 8007cee:	bfa8      	it	ge
 8007cf0:	462b      	movge	r3, r5
 8007cf2:	42b3      	cmp	r3, r6
 8007cf4:	bfa8      	it	ge
 8007cf6:	4633      	movge	r3, r6
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	bfc2      	ittt	gt
 8007cfc:	1aed      	subgt	r5, r5, r3
 8007cfe:	1af6      	subgt	r6, r6, r3
 8007d00:	1aff      	subgt	r7, r7, r3
 8007d02:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	dd16      	ble.n	8007d36 <_strtod_l+0x736>
 8007d08:	4641      	mov	r1, r8
 8007d0a:	9805      	ldr	r0, [sp, #20]
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	f002 fb67 	bl	800a3e0 <__pow5mult>
 8007d12:	4680      	mov	r8, r0
 8007d14:	2800      	cmp	r0, #0
 8007d16:	d0ba      	beq.n	8007c8e <_strtod_l+0x68e>
 8007d18:	4601      	mov	r1, r0
 8007d1a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007d1c:	9805      	ldr	r0, [sp, #20]
 8007d1e:	f002 fab5 	bl	800a28c <__multiply>
 8007d22:	900e      	str	r0, [sp, #56]	@ 0x38
 8007d24:	2800      	cmp	r0, #0
 8007d26:	f43f ae8a 	beq.w	8007a3e <_strtod_l+0x43e>
 8007d2a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d2c:	9805      	ldr	r0, [sp, #20]
 8007d2e:	f002 f999 	bl	800a064 <_Bfree>
 8007d32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d34:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d36:	2d00      	cmp	r5, #0
 8007d38:	dc1d      	bgt.n	8007d76 <_strtod_l+0x776>
 8007d3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	dd23      	ble.n	8007d88 <_strtod_l+0x788>
 8007d40:	4649      	mov	r1, r9
 8007d42:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007d44:	9805      	ldr	r0, [sp, #20]
 8007d46:	f002 fb4b 	bl	800a3e0 <__pow5mult>
 8007d4a:	4681      	mov	r9, r0
 8007d4c:	b9e0      	cbnz	r0, 8007d88 <_strtod_l+0x788>
 8007d4e:	f04f 0900 	mov.w	r9, #0
 8007d52:	e674      	b.n	8007a3e <_strtod_l+0x43e>
 8007d54:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007d58:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007d5c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007d60:	35e2      	adds	r5, #226	@ 0xe2
 8007d62:	fa01 f305 	lsl.w	r3, r1, r5
 8007d66:	9310      	str	r3, [sp, #64]	@ 0x40
 8007d68:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007d6a:	e7ba      	b.n	8007ce2 <_strtod_l+0x6e2>
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007d70:	2301      	movs	r3, #1
 8007d72:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007d74:	e7b5      	b.n	8007ce2 <_strtod_l+0x6e2>
 8007d76:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d78:	9805      	ldr	r0, [sp, #20]
 8007d7a:	462a      	mov	r2, r5
 8007d7c:	f002 fb8a 	bl	800a494 <__lshift>
 8007d80:	901a      	str	r0, [sp, #104]	@ 0x68
 8007d82:	2800      	cmp	r0, #0
 8007d84:	d1d9      	bne.n	8007d3a <_strtod_l+0x73a>
 8007d86:	e65a      	b.n	8007a3e <_strtod_l+0x43e>
 8007d88:	2e00      	cmp	r6, #0
 8007d8a:	dd07      	ble.n	8007d9c <_strtod_l+0x79c>
 8007d8c:	4649      	mov	r1, r9
 8007d8e:	9805      	ldr	r0, [sp, #20]
 8007d90:	4632      	mov	r2, r6
 8007d92:	f002 fb7f 	bl	800a494 <__lshift>
 8007d96:	4681      	mov	r9, r0
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	d0d8      	beq.n	8007d4e <_strtod_l+0x74e>
 8007d9c:	2f00      	cmp	r7, #0
 8007d9e:	dd08      	ble.n	8007db2 <_strtod_l+0x7b2>
 8007da0:	4641      	mov	r1, r8
 8007da2:	9805      	ldr	r0, [sp, #20]
 8007da4:	463a      	mov	r2, r7
 8007da6:	f002 fb75 	bl	800a494 <__lshift>
 8007daa:	4680      	mov	r8, r0
 8007dac:	2800      	cmp	r0, #0
 8007dae:	f43f ae46 	beq.w	8007a3e <_strtod_l+0x43e>
 8007db2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007db4:	9805      	ldr	r0, [sp, #20]
 8007db6:	464a      	mov	r2, r9
 8007db8:	f002 fbf4 	bl	800a5a4 <__mdiff>
 8007dbc:	4604      	mov	r4, r0
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	f43f ae3d 	beq.w	8007a3e <_strtod_l+0x43e>
 8007dc4:	68c3      	ldr	r3, [r0, #12]
 8007dc6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007dc8:	2300      	movs	r3, #0
 8007dca:	60c3      	str	r3, [r0, #12]
 8007dcc:	4641      	mov	r1, r8
 8007dce:	f002 fbcd 	bl	800a56c <__mcmp>
 8007dd2:	2800      	cmp	r0, #0
 8007dd4:	da46      	bge.n	8007e64 <_strtod_l+0x864>
 8007dd6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007dd8:	ea53 030a 	orrs.w	r3, r3, sl
 8007ddc:	d16c      	bne.n	8007eb8 <_strtod_l+0x8b8>
 8007dde:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d168      	bne.n	8007eb8 <_strtod_l+0x8b8>
 8007de6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007dea:	0d1b      	lsrs	r3, r3, #20
 8007dec:	051b      	lsls	r3, r3, #20
 8007dee:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007df2:	d961      	bls.n	8007eb8 <_strtod_l+0x8b8>
 8007df4:	6963      	ldr	r3, [r4, #20]
 8007df6:	b913      	cbnz	r3, 8007dfe <_strtod_l+0x7fe>
 8007df8:	6923      	ldr	r3, [r4, #16]
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	dd5c      	ble.n	8007eb8 <_strtod_l+0x8b8>
 8007dfe:	4621      	mov	r1, r4
 8007e00:	2201      	movs	r2, #1
 8007e02:	9805      	ldr	r0, [sp, #20]
 8007e04:	f002 fb46 	bl	800a494 <__lshift>
 8007e08:	4641      	mov	r1, r8
 8007e0a:	4604      	mov	r4, r0
 8007e0c:	f002 fbae 	bl	800a56c <__mcmp>
 8007e10:	2800      	cmp	r0, #0
 8007e12:	dd51      	ble.n	8007eb8 <_strtod_l+0x8b8>
 8007e14:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007e18:	9a08      	ldr	r2, [sp, #32]
 8007e1a:	0d1b      	lsrs	r3, r3, #20
 8007e1c:	051b      	lsls	r3, r3, #20
 8007e1e:	2a00      	cmp	r2, #0
 8007e20:	d06b      	beq.n	8007efa <_strtod_l+0x8fa>
 8007e22:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007e26:	d868      	bhi.n	8007efa <_strtod_l+0x8fa>
 8007e28:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007e2c:	f67f ae9d 	bls.w	8007b6a <_strtod_l+0x56a>
 8007e30:	4b0a      	ldr	r3, [pc, #40]	@ (8007e5c <_strtod_l+0x85c>)
 8007e32:	4650      	mov	r0, sl
 8007e34:	4659      	mov	r1, fp
 8007e36:	2200      	movs	r2, #0
 8007e38:	f7f8 fbde 	bl	80005f8 <__aeabi_dmul>
 8007e3c:	4b08      	ldr	r3, [pc, #32]	@ (8007e60 <_strtod_l+0x860>)
 8007e3e:	400b      	ands	r3, r1
 8007e40:	4682      	mov	sl, r0
 8007e42:	468b      	mov	fp, r1
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	f47f ae05 	bne.w	8007a54 <_strtod_l+0x454>
 8007e4a:	9a05      	ldr	r2, [sp, #20]
 8007e4c:	2322      	movs	r3, #34	@ 0x22
 8007e4e:	6013      	str	r3, [r2, #0]
 8007e50:	e600      	b.n	8007a54 <_strtod_l+0x454>
 8007e52:	bf00      	nop
 8007e54:	0800b0f0 	.word	0x0800b0f0
 8007e58:	fffffc02 	.word	0xfffffc02
 8007e5c:	39500000 	.word	0x39500000
 8007e60:	7ff00000 	.word	0x7ff00000
 8007e64:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007e68:	d165      	bne.n	8007f36 <_strtod_l+0x936>
 8007e6a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007e6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e70:	b35a      	cbz	r2, 8007eca <_strtod_l+0x8ca>
 8007e72:	4a9f      	ldr	r2, [pc, #636]	@ (80080f0 <_strtod_l+0xaf0>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d12b      	bne.n	8007ed0 <_strtod_l+0x8d0>
 8007e78:	9b08      	ldr	r3, [sp, #32]
 8007e7a:	4651      	mov	r1, sl
 8007e7c:	b303      	cbz	r3, 8007ec0 <_strtod_l+0x8c0>
 8007e7e:	4b9d      	ldr	r3, [pc, #628]	@ (80080f4 <_strtod_l+0xaf4>)
 8007e80:	465a      	mov	r2, fp
 8007e82:	4013      	ands	r3, r2
 8007e84:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007e88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007e8c:	d81b      	bhi.n	8007ec6 <_strtod_l+0x8c6>
 8007e8e:	0d1b      	lsrs	r3, r3, #20
 8007e90:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007e94:	fa02 f303 	lsl.w	r3, r2, r3
 8007e98:	4299      	cmp	r1, r3
 8007e9a:	d119      	bne.n	8007ed0 <_strtod_l+0x8d0>
 8007e9c:	4b96      	ldr	r3, [pc, #600]	@ (80080f8 <_strtod_l+0xaf8>)
 8007e9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d102      	bne.n	8007eaa <_strtod_l+0x8aa>
 8007ea4:	3101      	adds	r1, #1
 8007ea6:	f43f adca 	beq.w	8007a3e <_strtod_l+0x43e>
 8007eaa:	4b92      	ldr	r3, [pc, #584]	@ (80080f4 <_strtod_l+0xaf4>)
 8007eac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007eae:	401a      	ands	r2, r3
 8007eb0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007eb4:	f04f 0a00 	mov.w	sl, #0
 8007eb8:	9b08      	ldr	r3, [sp, #32]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d1b8      	bne.n	8007e30 <_strtod_l+0x830>
 8007ebe:	e5c9      	b.n	8007a54 <_strtod_l+0x454>
 8007ec0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007ec4:	e7e8      	b.n	8007e98 <_strtod_l+0x898>
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	e7e6      	b.n	8007e98 <_strtod_l+0x898>
 8007eca:	ea53 030a 	orrs.w	r3, r3, sl
 8007ece:	d0a1      	beq.n	8007e14 <_strtod_l+0x814>
 8007ed0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007ed2:	b1db      	cbz	r3, 8007f0c <_strtod_l+0x90c>
 8007ed4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ed6:	4213      	tst	r3, r2
 8007ed8:	d0ee      	beq.n	8007eb8 <_strtod_l+0x8b8>
 8007eda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007edc:	9a08      	ldr	r2, [sp, #32]
 8007ede:	4650      	mov	r0, sl
 8007ee0:	4659      	mov	r1, fp
 8007ee2:	b1bb      	cbz	r3, 8007f14 <_strtod_l+0x914>
 8007ee4:	f7ff fb6e 	bl	80075c4 <sulp>
 8007ee8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007eec:	ec53 2b10 	vmov	r2, r3, d0
 8007ef0:	f7f8 f9cc 	bl	800028c <__adddf3>
 8007ef4:	4682      	mov	sl, r0
 8007ef6:	468b      	mov	fp, r1
 8007ef8:	e7de      	b.n	8007eb8 <_strtod_l+0x8b8>
 8007efa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007efe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007f02:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007f06:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007f0a:	e7d5      	b.n	8007eb8 <_strtod_l+0x8b8>
 8007f0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007f0e:	ea13 0f0a 	tst.w	r3, sl
 8007f12:	e7e1      	b.n	8007ed8 <_strtod_l+0x8d8>
 8007f14:	f7ff fb56 	bl	80075c4 <sulp>
 8007f18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f1c:	ec53 2b10 	vmov	r2, r3, d0
 8007f20:	f7f8 f9b2 	bl	8000288 <__aeabi_dsub>
 8007f24:	2200      	movs	r2, #0
 8007f26:	2300      	movs	r3, #0
 8007f28:	4682      	mov	sl, r0
 8007f2a:	468b      	mov	fp, r1
 8007f2c:	f7f8 fdcc 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f30:	2800      	cmp	r0, #0
 8007f32:	d0c1      	beq.n	8007eb8 <_strtod_l+0x8b8>
 8007f34:	e619      	b.n	8007b6a <_strtod_l+0x56a>
 8007f36:	4641      	mov	r1, r8
 8007f38:	4620      	mov	r0, r4
 8007f3a:	f002 fc8f 	bl	800a85c <__ratio>
 8007f3e:	ec57 6b10 	vmov	r6, r7, d0
 8007f42:	2200      	movs	r2, #0
 8007f44:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007f48:	4630      	mov	r0, r6
 8007f4a:	4639      	mov	r1, r7
 8007f4c:	f7f8 fdd0 	bl	8000af0 <__aeabi_dcmple>
 8007f50:	2800      	cmp	r0, #0
 8007f52:	d06f      	beq.n	8008034 <_strtod_l+0xa34>
 8007f54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d17a      	bne.n	8008050 <_strtod_l+0xa50>
 8007f5a:	f1ba 0f00 	cmp.w	sl, #0
 8007f5e:	d158      	bne.n	8008012 <_strtod_l+0xa12>
 8007f60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d15a      	bne.n	8008020 <_strtod_l+0xa20>
 8007f6a:	4b64      	ldr	r3, [pc, #400]	@ (80080fc <_strtod_l+0xafc>)
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	4630      	mov	r0, r6
 8007f70:	4639      	mov	r1, r7
 8007f72:	f7f8 fdb3 	bl	8000adc <__aeabi_dcmplt>
 8007f76:	2800      	cmp	r0, #0
 8007f78:	d159      	bne.n	800802e <_strtod_l+0xa2e>
 8007f7a:	4630      	mov	r0, r6
 8007f7c:	4639      	mov	r1, r7
 8007f7e:	4b60      	ldr	r3, [pc, #384]	@ (8008100 <_strtod_l+0xb00>)
 8007f80:	2200      	movs	r2, #0
 8007f82:	f7f8 fb39 	bl	80005f8 <__aeabi_dmul>
 8007f86:	4606      	mov	r6, r0
 8007f88:	460f      	mov	r7, r1
 8007f8a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007f8e:	9606      	str	r6, [sp, #24]
 8007f90:	9307      	str	r3, [sp, #28]
 8007f92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f96:	4d57      	ldr	r5, [pc, #348]	@ (80080f4 <_strtod_l+0xaf4>)
 8007f98:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007f9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f9e:	401d      	ands	r5, r3
 8007fa0:	4b58      	ldr	r3, [pc, #352]	@ (8008104 <_strtod_l+0xb04>)
 8007fa2:	429d      	cmp	r5, r3
 8007fa4:	f040 80b2 	bne.w	800810c <_strtod_l+0xb0c>
 8007fa8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007faa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007fae:	ec4b ab10 	vmov	d0, sl, fp
 8007fb2:	f002 fb8b 	bl	800a6cc <__ulp>
 8007fb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007fba:	ec51 0b10 	vmov	r0, r1, d0
 8007fbe:	f7f8 fb1b 	bl	80005f8 <__aeabi_dmul>
 8007fc2:	4652      	mov	r2, sl
 8007fc4:	465b      	mov	r3, fp
 8007fc6:	f7f8 f961 	bl	800028c <__adddf3>
 8007fca:	460b      	mov	r3, r1
 8007fcc:	4949      	ldr	r1, [pc, #292]	@ (80080f4 <_strtod_l+0xaf4>)
 8007fce:	4a4e      	ldr	r2, [pc, #312]	@ (8008108 <_strtod_l+0xb08>)
 8007fd0:	4019      	ands	r1, r3
 8007fd2:	4291      	cmp	r1, r2
 8007fd4:	4682      	mov	sl, r0
 8007fd6:	d942      	bls.n	800805e <_strtod_l+0xa5e>
 8007fd8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007fda:	4b47      	ldr	r3, [pc, #284]	@ (80080f8 <_strtod_l+0xaf8>)
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d103      	bne.n	8007fe8 <_strtod_l+0x9e8>
 8007fe0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	f43f ad2b 	beq.w	8007a3e <_strtod_l+0x43e>
 8007fe8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80080f8 <_strtod_l+0xaf8>
 8007fec:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007ff0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007ff2:	9805      	ldr	r0, [sp, #20]
 8007ff4:	f002 f836 	bl	800a064 <_Bfree>
 8007ff8:	9805      	ldr	r0, [sp, #20]
 8007ffa:	4649      	mov	r1, r9
 8007ffc:	f002 f832 	bl	800a064 <_Bfree>
 8008000:	9805      	ldr	r0, [sp, #20]
 8008002:	4641      	mov	r1, r8
 8008004:	f002 f82e 	bl	800a064 <_Bfree>
 8008008:	9805      	ldr	r0, [sp, #20]
 800800a:	4621      	mov	r1, r4
 800800c:	f002 f82a 	bl	800a064 <_Bfree>
 8008010:	e618      	b.n	8007c44 <_strtod_l+0x644>
 8008012:	f1ba 0f01 	cmp.w	sl, #1
 8008016:	d103      	bne.n	8008020 <_strtod_l+0xa20>
 8008018:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800801a:	2b00      	cmp	r3, #0
 800801c:	f43f ada5 	beq.w	8007b6a <_strtod_l+0x56a>
 8008020:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80080d0 <_strtod_l+0xad0>
 8008024:	4f35      	ldr	r7, [pc, #212]	@ (80080fc <_strtod_l+0xafc>)
 8008026:	ed8d 7b06 	vstr	d7, [sp, #24]
 800802a:	2600      	movs	r6, #0
 800802c:	e7b1      	b.n	8007f92 <_strtod_l+0x992>
 800802e:	4f34      	ldr	r7, [pc, #208]	@ (8008100 <_strtod_l+0xb00>)
 8008030:	2600      	movs	r6, #0
 8008032:	e7aa      	b.n	8007f8a <_strtod_l+0x98a>
 8008034:	4b32      	ldr	r3, [pc, #200]	@ (8008100 <_strtod_l+0xb00>)
 8008036:	4630      	mov	r0, r6
 8008038:	4639      	mov	r1, r7
 800803a:	2200      	movs	r2, #0
 800803c:	f7f8 fadc 	bl	80005f8 <__aeabi_dmul>
 8008040:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008042:	4606      	mov	r6, r0
 8008044:	460f      	mov	r7, r1
 8008046:	2b00      	cmp	r3, #0
 8008048:	d09f      	beq.n	8007f8a <_strtod_l+0x98a>
 800804a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800804e:	e7a0      	b.n	8007f92 <_strtod_l+0x992>
 8008050:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80080d8 <_strtod_l+0xad8>
 8008054:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008058:	ec57 6b17 	vmov	r6, r7, d7
 800805c:	e799      	b.n	8007f92 <_strtod_l+0x992>
 800805e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008062:	9b08      	ldr	r3, [sp, #32]
 8008064:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1c1      	bne.n	8007ff0 <_strtod_l+0x9f0>
 800806c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008070:	0d1b      	lsrs	r3, r3, #20
 8008072:	051b      	lsls	r3, r3, #20
 8008074:	429d      	cmp	r5, r3
 8008076:	d1bb      	bne.n	8007ff0 <_strtod_l+0x9f0>
 8008078:	4630      	mov	r0, r6
 800807a:	4639      	mov	r1, r7
 800807c:	f7f8 fe1c 	bl	8000cb8 <__aeabi_d2lz>
 8008080:	f7f8 fa8c 	bl	800059c <__aeabi_l2d>
 8008084:	4602      	mov	r2, r0
 8008086:	460b      	mov	r3, r1
 8008088:	4630      	mov	r0, r6
 800808a:	4639      	mov	r1, r7
 800808c:	f7f8 f8fc 	bl	8000288 <__aeabi_dsub>
 8008090:	460b      	mov	r3, r1
 8008092:	4602      	mov	r2, r0
 8008094:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008098:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800809c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800809e:	ea46 060a 	orr.w	r6, r6, sl
 80080a2:	431e      	orrs	r6, r3
 80080a4:	d06f      	beq.n	8008186 <_strtod_l+0xb86>
 80080a6:	a30e      	add	r3, pc, #56	@ (adr r3, 80080e0 <_strtod_l+0xae0>)
 80080a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ac:	f7f8 fd16 	bl	8000adc <__aeabi_dcmplt>
 80080b0:	2800      	cmp	r0, #0
 80080b2:	f47f accf 	bne.w	8007a54 <_strtod_l+0x454>
 80080b6:	a30c      	add	r3, pc, #48	@ (adr r3, 80080e8 <_strtod_l+0xae8>)
 80080b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80080c0:	f7f8 fd2a 	bl	8000b18 <__aeabi_dcmpgt>
 80080c4:	2800      	cmp	r0, #0
 80080c6:	d093      	beq.n	8007ff0 <_strtod_l+0x9f0>
 80080c8:	e4c4      	b.n	8007a54 <_strtod_l+0x454>
 80080ca:	bf00      	nop
 80080cc:	f3af 8000 	nop.w
 80080d0:	00000000 	.word	0x00000000
 80080d4:	bff00000 	.word	0xbff00000
 80080d8:	00000000 	.word	0x00000000
 80080dc:	3ff00000 	.word	0x3ff00000
 80080e0:	94a03595 	.word	0x94a03595
 80080e4:	3fdfffff 	.word	0x3fdfffff
 80080e8:	35afe535 	.word	0x35afe535
 80080ec:	3fe00000 	.word	0x3fe00000
 80080f0:	000fffff 	.word	0x000fffff
 80080f4:	7ff00000 	.word	0x7ff00000
 80080f8:	7fefffff 	.word	0x7fefffff
 80080fc:	3ff00000 	.word	0x3ff00000
 8008100:	3fe00000 	.word	0x3fe00000
 8008104:	7fe00000 	.word	0x7fe00000
 8008108:	7c9fffff 	.word	0x7c9fffff
 800810c:	9b08      	ldr	r3, [sp, #32]
 800810e:	b323      	cbz	r3, 800815a <_strtod_l+0xb5a>
 8008110:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008114:	d821      	bhi.n	800815a <_strtod_l+0xb5a>
 8008116:	a328      	add	r3, pc, #160	@ (adr r3, 80081b8 <_strtod_l+0xbb8>)
 8008118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811c:	4630      	mov	r0, r6
 800811e:	4639      	mov	r1, r7
 8008120:	f7f8 fce6 	bl	8000af0 <__aeabi_dcmple>
 8008124:	b1a0      	cbz	r0, 8008150 <_strtod_l+0xb50>
 8008126:	4639      	mov	r1, r7
 8008128:	4630      	mov	r0, r6
 800812a:	f7f8 fd3d 	bl	8000ba8 <__aeabi_d2uiz>
 800812e:	2801      	cmp	r0, #1
 8008130:	bf38      	it	cc
 8008132:	2001      	movcc	r0, #1
 8008134:	f7f8 f9e6 	bl	8000504 <__aeabi_ui2d>
 8008138:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800813a:	4606      	mov	r6, r0
 800813c:	460f      	mov	r7, r1
 800813e:	b9fb      	cbnz	r3, 8008180 <_strtod_l+0xb80>
 8008140:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008144:	9014      	str	r0, [sp, #80]	@ 0x50
 8008146:	9315      	str	r3, [sp, #84]	@ 0x54
 8008148:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800814c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008150:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008152:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008156:	1b5b      	subs	r3, r3, r5
 8008158:	9311      	str	r3, [sp, #68]	@ 0x44
 800815a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800815e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008162:	f002 fab3 	bl	800a6cc <__ulp>
 8008166:	4650      	mov	r0, sl
 8008168:	ec53 2b10 	vmov	r2, r3, d0
 800816c:	4659      	mov	r1, fp
 800816e:	f7f8 fa43 	bl	80005f8 <__aeabi_dmul>
 8008172:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008176:	f7f8 f889 	bl	800028c <__adddf3>
 800817a:	4682      	mov	sl, r0
 800817c:	468b      	mov	fp, r1
 800817e:	e770      	b.n	8008062 <_strtod_l+0xa62>
 8008180:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008184:	e7e0      	b.n	8008148 <_strtod_l+0xb48>
 8008186:	a30e      	add	r3, pc, #56	@ (adr r3, 80081c0 <_strtod_l+0xbc0>)
 8008188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818c:	f7f8 fca6 	bl	8000adc <__aeabi_dcmplt>
 8008190:	e798      	b.n	80080c4 <_strtod_l+0xac4>
 8008192:	2300      	movs	r3, #0
 8008194:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008196:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008198:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800819a:	6013      	str	r3, [r2, #0]
 800819c:	f7ff ba6d 	b.w	800767a <_strtod_l+0x7a>
 80081a0:	2a65      	cmp	r2, #101	@ 0x65
 80081a2:	f43f ab66 	beq.w	8007872 <_strtod_l+0x272>
 80081a6:	2a45      	cmp	r2, #69	@ 0x45
 80081a8:	f43f ab63 	beq.w	8007872 <_strtod_l+0x272>
 80081ac:	2301      	movs	r3, #1
 80081ae:	f7ff bb9e 	b.w	80078ee <_strtod_l+0x2ee>
 80081b2:	bf00      	nop
 80081b4:	f3af 8000 	nop.w
 80081b8:	ffc00000 	.word	0xffc00000
 80081bc:	41dfffff 	.word	0x41dfffff
 80081c0:	94a03595 	.word	0x94a03595
 80081c4:	3fcfffff 	.word	0x3fcfffff

080081c8 <_strtod_r>:
 80081c8:	4b01      	ldr	r3, [pc, #4]	@ (80081d0 <_strtod_r+0x8>)
 80081ca:	f7ff ba19 	b.w	8007600 <_strtod_l>
 80081ce:	bf00      	nop
 80081d0:	20000018 	.word	0x20000018

080081d4 <_strtol_l.constprop.0>:
 80081d4:	2b24      	cmp	r3, #36	@ 0x24
 80081d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081da:	4686      	mov	lr, r0
 80081dc:	4690      	mov	r8, r2
 80081de:	d801      	bhi.n	80081e4 <_strtol_l.constprop.0+0x10>
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d106      	bne.n	80081f2 <_strtol_l.constprop.0+0x1e>
 80081e4:	f000 f91e 	bl	8008424 <__errno>
 80081e8:	2316      	movs	r3, #22
 80081ea:	6003      	str	r3, [r0, #0]
 80081ec:	2000      	movs	r0, #0
 80081ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081f2:	4834      	ldr	r0, [pc, #208]	@ (80082c4 <_strtol_l.constprop.0+0xf0>)
 80081f4:	460d      	mov	r5, r1
 80081f6:	462a      	mov	r2, r5
 80081f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80081fc:	5d06      	ldrb	r6, [r0, r4]
 80081fe:	f016 0608 	ands.w	r6, r6, #8
 8008202:	d1f8      	bne.n	80081f6 <_strtol_l.constprop.0+0x22>
 8008204:	2c2d      	cmp	r4, #45	@ 0x2d
 8008206:	d12d      	bne.n	8008264 <_strtol_l.constprop.0+0x90>
 8008208:	782c      	ldrb	r4, [r5, #0]
 800820a:	2601      	movs	r6, #1
 800820c:	1c95      	adds	r5, r2, #2
 800820e:	f033 0210 	bics.w	r2, r3, #16
 8008212:	d109      	bne.n	8008228 <_strtol_l.constprop.0+0x54>
 8008214:	2c30      	cmp	r4, #48	@ 0x30
 8008216:	d12a      	bne.n	800826e <_strtol_l.constprop.0+0x9a>
 8008218:	782a      	ldrb	r2, [r5, #0]
 800821a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800821e:	2a58      	cmp	r2, #88	@ 0x58
 8008220:	d125      	bne.n	800826e <_strtol_l.constprop.0+0x9a>
 8008222:	786c      	ldrb	r4, [r5, #1]
 8008224:	2310      	movs	r3, #16
 8008226:	3502      	adds	r5, #2
 8008228:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800822c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8008230:	2200      	movs	r2, #0
 8008232:	fbbc f9f3 	udiv	r9, ip, r3
 8008236:	4610      	mov	r0, r2
 8008238:	fb03 ca19 	mls	sl, r3, r9, ip
 800823c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008240:	2f09      	cmp	r7, #9
 8008242:	d81b      	bhi.n	800827c <_strtol_l.constprop.0+0xa8>
 8008244:	463c      	mov	r4, r7
 8008246:	42a3      	cmp	r3, r4
 8008248:	dd27      	ble.n	800829a <_strtol_l.constprop.0+0xc6>
 800824a:	1c57      	adds	r7, r2, #1
 800824c:	d007      	beq.n	800825e <_strtol_l.constprop.0+0x8a>
 800824e:	4581      	cmp	r9, r0
 8008250:	d320      	bcc.n	8008294 <_strtol_l.constprop.0+0xc0>
 8008252:	d101      	bne.n	8008258 <_strtol_l.constprop.0+0x84>
 8008254:	45a2      	cmp	sl, r4
 8008256:	db1d      	blt.n	8008294 <_strtol_l.constprop.0+0xc0>
 8008258:	fb00 4003 	mla	r0, r0, r3, r4
 800825c:	2201      	movs	r2, #1
 800825e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008262:	e7eb      	b.n	800823c <_strtol_l.constprop.0+0x68>
 8008264:	2c2b      	cmp	r4, #43	@ 0x2b
 8008266:	bf04      	itt	eq
 8008268:	782c      	ldrbeq	r4, [r5, #0]
 800826a:	1c95      	addeq	r5, r2, #2
 800826c:	e7cf      	b.n	800820e <_strtol_l.constprop.0+0x3a>
 800826e:	2b00      	cmp	r3, #0
 8008270:	d1da      	bne.n	8008228 <_strtol_l.constprop.0+0x54>
 8008272:	2c30      	cmp	r4, #48	@ 0x30
 8008274:	bf0c      	ite	eq
 8008276:	2308      	moveq	r3, #8
 8008278:	230a      	movne	r3, #10
 800827a:	e7d5      	b.n	8008228 <_strtol_l.constprop.0+0x54>
 800827c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008280:	2f19      	cmp	r7, #25
 8008282:	d801      	bhi.n	8008288 <_strtol_l.constprop.0+0xb4>
 8008284:	3c37      	subs	r4, #55	@ 0x37
 8008286:	e7de      	b.n	8008246 <_strtol_l.constprop.0+0x72>
 8008288:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800828c:	2f19      	cmp	r7, #25
 800828e:	d804      	bhi.n	800829a <_strtol_l.constprop.0+0xc6>
 8008290:	3c57      	subs	r4, #87	@ 0x57
 8008292:	e7d8      	b.n	8008246 <_strtol_l.constprop.0+0x72>
 8008294:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008298:	e7e1      	b.n	800825e <_strtol_l.constprop.0+0x8a>
 800829a:	1c53      	adds	r3, r2, #1
 800829c:	d108      	bne.n	80082b0 <_strtol_l.constprop.0+0xdc>
 800829e:	2322      	movs	r3, #34	@ 0x22
 80082a0:	f8ce 3000 	str.w	r3, [lr]
 80082a4:	4660      	mov	r0, ip
 80082a6:	f1b8 0f00 	cmp.w	r8, #0
 80082aa:	d0a0      	beq.n	80081ee <_strtol_l.constprop.0+0x1a>
 80082ac:	1e69      	subs	r1, r5, #1
 80082ae:	e006      	b.n	80082be <_strtol_l.constprop.0+0xea>
 80082b0:	b106      	cbz	r6, 80082b4 <_strtol_l.constprop.0+0xe0>
 80082b2:	4240      	negs	r0, r0
 80082b4:	f1b8 0f00 	cmp.w	r8, #0
 80082b8:	d099      	beq.n	80081ee <_strtol_l.constprop.0+0x1a>
 80082ba:	2a00      	cmp	r2, #0
 80082bc:	d1f6      	bne.n	80082ac <_strtol_l.constprop.0+0xd8>
 80082be:	f8c8 1000 	str.w	r1, [r8]
 80082c2:	e794      	b.n	80081ee <_strtol_l.constprop.0+0x1a>
 80082c4:	0800b121 	.word	0x0800b121

080082c8 <_strtol_r>:
 80082c8:	f7ff bf84 	b.w	80081d4 <_strtol_l.constprop.0>

080082cc <_fwalk_sglue>:
 80082cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082d0:	4607      	mov	r7, r0
 80082d2:	4688      	mov	r8, r1
 80082d4:	4614      	mov	r4, r2
 80082d6:	2600      	movs	r6, #0
 80082d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082dc:	f1b9 0901 	subs.w	r9, r9, #1
 80082e0:	d505      	bpl.n	80082ee <_fwalk_sglue+0x22>
 80082e2:	6824      	ldr	r4, [r4, #0]
 80082e4:	2c00      	cmp	r4, #0
 80082e6:	d1f7      	bne.n	80082d8 <_fwalk_sglue+0xc>
 80082e8:	4630      	mov	r0, r6
 80082ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082ee:	89ab      	ldrh	r3, [r5, #12]
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d907      	bls.n	8008304 <_fwalk_sglue+0x38>
 80082f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80082f8:	3301      	adds	r3, #1
 80082fa:	d003      	beq.n	8008304 <_fwalk_sglue+0x38>
 80082fc:	4629      	mov	r1, r5
 80082fe:	4638      	mov	r0, r7
 8008300:	47c0      	blx	r8
 8008302:	4306      	orrs	r6, r0
 8008304:	3568      	adds	r5, #104	@ 0x68
 8008306:	e7e9      	b.n	80082dc <_fwalk_sglue+0x10>

08008308 <iprintf>:
 8008308:	b40f      	push	{r0, r1, r2, r3}
 800830a:	b507      	push	{r0, r1, r2, lr}
 800830c:	4906      	ldr	r1, [pc, #24]	@ (8008328 <iprintf+0x20>)
 800830e:	ab04      	add	r3, sp, #16
 8008310:	6808      	ldr	r0, [r1, #0]
 8008312:	f853 2b04 	ldr.w	r2, [r3], #4
 8008316:	6881      	ldr	r1, [r0, #8]
 8008318:	9301      	str	r3, [sp, #4]
 800831a:	f001 fbd7 	bl	8009acc <_vfiprintf_r>
 800831e:	b003      	add	sp, #12
 8008320:	f85d eb04 	ldr.w	lr, [sp], #4
 8008324:	b004      	add	sp, #16
 8008326:	4770      	bx	lr
 8008328:	20000184 	.word	0x20000184

0800832c <_puts_r>:
 800832c:	6a03      	ldr	r3, [r0, #32]
 800832e:	b570      	push	{r4, r5, r6, lr}
 8008330:	6884      	ldr	r4, [r0, #8]
 8008332:	4605      	mov	r5, r0
 8008334:	460e      	mov	r6, r1
 8008336:	b90b      	cbnz	r3, 800833c <_puts_r+0x10>
 8008338:	f7ff f92c 	bl	8007594 <__sinit>
 800833c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800833e:	07db      	lsls	r3, r3, #31
 8008340:	d405      	bmi.n	800834e <_puts_r+0x22>
 8008342:	89a3      	ldrh	r3, [r4, #12]
 8008344:	0598      	lsls	r0, r3, #22
 8008346:	d402      	bmi.n	800834e <_puts_r+0x22>
 8008348:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800834a:	f000 f896 	bl	800847a <__retarget_lock_acquire_recursive>
 800834e:	89a3      	ldrh	r3, [r4, #12]
 8008350:	0719      	lsls	r1, r3, #28
 8008352:	d502      	bpl.n	800835a <_puts_r+0x2e>
 8008354:	6923      	ldr	r3, [r4, #16]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d135      	bne.n	80083c6 <_puts_r+0x9a>
 800835a:	4621      	mov	r1, r4
 800835c:	4628      	mov	r0, r5
 800835e:	f002 fba3 	bl	800aaa8 <__swsetup_r>
 8008362:	b380      	cbz	r0, 80083c6 <_puts_r+0x9a>
 8008364:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008368:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800836a:	07da      	lsls	r2, r3, #31
 800836c:	d405      	bmi.n	800837a <_puts_r+0x4e>
 800836e:	89a3      	ldrh	r3, [r4, #12]
 8008370:	059b      	lsls	r3, r3, #22
 8008372:	d402      	bmi.n	800837a <_puts_r+0x4e>
 8008374:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008376:	f000 f881 	bl	800847c <__retarget_lock_release_recursive>
 800837a:	4628      	mov	r0, r5
 800837c:	bd70      	pop	{r4, r5, r6, pc}
 800837e:	2b00      	cmp	r3, #0
 8008380:	da04      	bge.n	800838c <_puts_r+0x60>
 8008382:	69a2      	ldr	r2, [r4, #24]
 8008384:	429a      	cmp	r2, r3
 8008386:	dc17      	bgt.n	80083b8 <_puts_r+0x8c>
 8008388:	290a      	cmp	r1, #10
 800838a:	d015      	beq.n	80083b8 <_puts_r+0x8c>
 800838c:	6823      	ldr	r3, [r4, #0]
 800838e:	1c5a      	adds	r2, r3, #1
 8008390:	6022      	str	r2, [r4, #0]
 8008392:	7019      	strb	r1, [r3, #0]
 8008394:	68a3      	ldr	r3, [r4, #8]
 8008396:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800839a:	3b01      	subs	r3, #1
 800839c:	60a3      	str	r3, [r4, #8]
 800839e:	2900      	cmp	r1, #0
 80083a0:	d1ed      	bne.n	800837e <_puts_r+0x52>
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	da11      	bge.n	80083ca <_puts_r+0x9e>
 80083a6:	4622      	mov	r2, r4
 80083a8:	210a      	movs	r1, #10
 80083aa:	4628      	mov	r0, r5
 80083ac:	f002 fb3d 	bl	800aa2a <__swbuf_r>
 80083b0:	3001      	adds	r0, #1
 80083b2:	d0d7      	beq.n	8008364 <_puts_r+0x38>
 80083b4:	250a      	movs	r5, #10
 80083b6:	e7d7      	b.n	8008368 <_puts_r+0x3c>
 80083b8:	4622      	mov	r2, r4
 80083ba:	4628      	mov	r0, r5
 80083bc:	f002 fb35 	bl	800aa2a <__swbuf_r>
 80083c0:	3001      	adds	r0, #1
 80083c2:	d1e7      	bne.n	8008394 <_puts_r+0x68>
 80083c4:	e7ce      	b.n	8008364 <_puts_r+0x38>
 80083c6:	3e01      	subs	r6, #1
 80083c8:	e7e4      	b.n	8008394 <_puts_r+0x68>
 80083ca:	6823      	ldr	r3, [r4, #0]
 80083cc:	1c5a      	adds	r2, r3, #1
 80083ce:	6022      	str	r2, [r4, #0]
 80083d0:	220a      	movs	r2, #10
 80083d2:	701a      	strb	r2, [r3, #0]
 80083d4:	e7ee      	b.n	80083b4 <_puts_r+0x88>
	...

080083d8 <puts>:
 80083d8:	4b02      	ldr	r3, [pc, #8]	@ (80083e4 <puts+0xc>)
 80083da:	4601      	mov	r1, r0
 80083dc:	6818      	ldr	r0, [r3, #0]
 80083de:	f7ff bfa5 	b.w	800832c <_puts_r>
 80083e2:	bf00      	nop
 80083e4:	20000184 	.word	0x20000184

080083e8 <strncmp>:
 80083e8:	b510      	push	{r4, lr}
 80083ea:	b16a      	cbz	r2, 8008408 <strncmp+0x20>
 80083ec:	3901      	subs	r1, #1
 80083ee:	1884      	adds	r4, r0, r2
 80083f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d103      	bne.n	8008404 <strncmp+0x1c>
 80083fc:	42a0      	cmp	r0, r4
 80083fe:	d001      	beq.n	8008404 <strncmp+0x1c>
 8008400:	2a00      	cmp	r2, #0
 8008402:	d1f5      	bne.n	80083f0 <strncmp+0x8>
 8008404:	1ad0      	subs	r0, r2, r3
 8008406:	bd10      	pop	{r4, pc}
 8008408:	4610      	mov	r0, r2
 800840a:	e7fc      	b.n	8008406 <strncmp+0x1e>

0800840c <memset>:
 800840c:	4402      	add	r2, r0
 800840e:	4603      	mov	r3, r0
 8008410:	4293      	cmp	r3, r2
 8008412:	d100      	bne.n	8008416 <memset+0xa>
 8008414:	4770      	bx	lr
 8008416:	f803 1b01 	strb.w	r1, [r3], #1
 800841a:	e7f9      	b.n	8008410 <memset+0x4>

0800841c <_localeconv_r>:
 800841c:	4800      	ldr	r0, [pc, #0]	@ (8008420 <_localeconv_r+0x4>)
 800841e:	4770      	bx	lr
 8008420:	20000108 	.word	0x20000108

08008424 <__errno>:
 8008424:	4b01      	ldr	r3, [pc, #4]	@ (800842c <__errno+0x8>)
 8008426:	6818      	ldr	r0, [r3, #0]
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop
 800842c:	20000184 	.word	0x20000184

08008430 <__libc_init_array>:
 8008430:	b570      	push	{r4, r5, r6, lr}
 8008432:	4d0d      	ldr	r5, [pc, #52]	@ (8008468 <__libc_init_array+0x38>)
 8008434:	4c0d      	ldr	r4, [pc, #52]	@ (800846c <__libc_init_array+0x3c>)
 8008436:	1b64      	subs	r4, r4, r5
 8008438:	10a4      	asrs	r4, r4, #2
 800843a:	2600      	movs	r6, #0
 800843c:	42a6      	cmp	r6, r4
 800843e:	d109      	bne.n	8008454 <__libc_init_array+0x24>
 8008440:	4d0b      	ldr	r5, [pc, #44]	@ (8008470 <__libc_init_array+0x40>)
 8008442:	4c0c      	ldr	r4, [pc, #48]	@ (8008474 <__libc_init_array+0x44>)
 8008444:	f002 fd6a 	bl	800af1c <_init>
 8008448:	1b64      	subs	r4, r4, r5
 800844a:	10a4      	asrs	r4, r4, #2
 800844c:	2600      	movs	r6, #0
 800844e:	42a6      	cmp	r6, r4
 8008450:	d105      	bne.n	800845e <__libc_init_array+0x2e>
 8008452:	bd70      	pop	{r4, r5, r6, pc}
 8008454:	f855 3b04 	ldr.w	r3, [r5], #4
 8008458:	4798      	blx	r3
 800845a:	3601      	adds	r6, #1
 800845c:	e7ee      	b.n	800843c <__libc_init_array+0xc>
 800845e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008462:	4798      	blx	r3
 8008464:	3601      	adds	r6, #1
 8008466:	e7f2      	b.n	800844e <__libc_init_array+0x1e>
 8008468:	0800b4bc 	.word	0x0800b4bc
 800846c:	0800b4bc 	.word	0x0800b4bc
 8008470:	0800b4bc 	.word	0x0800b4bc
 8008474:	0800b4c0 	.word	0x0800b4c0

08008478 <__retarget_lock_init_recursive>:
 8008478:	4770      	bx	lr

0800847a <__retarget_lock_acquire_recursive>:
 800847a:	4770      	bx	lr

0800847c <__retarget_lock_release_recursive>:
 800847c:	4770      	bx	lr

0800847e <memcpy>:
 800847e:	440a      	add	r2, r1
 8008480:	4291      	cmp	r1, r2
 8008482:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008486:	d100      	bne.n	800848a <memcpy+0xc>
 8008488:	4770      	bx	lr
 800848a:	b510      	push	{r4, lr}
 800848c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008490:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008494:	4291      	cmp	r1, r2
 8008496:	d1f9      	bne.n	800848c <memcpy+0xe>
 8008498:	bd10      	pop	{r4, pc}
 800849a:	0000      	movs	r0, r0
 800849c:	0000      	movs	r0, r0
	...

080084a0 <nan>:
 80084a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80084a8 <nan+0x8>
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop
 80084a8:	00000000 	.word	0x00000000
 80084ac:	7ff80000 	.word	0x7ff80000

080084b0 <nanf>:
 80084b0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80084b8 <nanf+0x8>
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	7fc00000 	.word	0x7fc00000

080084bc <quorem>:
 80084bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c0:	6903      	ldr	r3, [r0, #16]
 80084c2:	690c      	ldr	r4, [r1, #16]
 80084c4:	42a3      	cmp	r3, r4
 80084c6:	4607      	mov	r7, r0
 80084c8:	db7e      	blt.n	80085c8 <quorem+0x10c>
 80084ca:	3c01      	subs	r4, #1
 80084cc:	f101 0814 	add.w	r8, r1, #20
 80084d0:	00a3      	lsls	r3, r4, #2
 80084d2:	f100 0514 	add.w	r5, r0, #20
 80084d6:	9300      	str	r3, [sp, #0]
 80084d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084dc:	9301      	str	r3, [sp, #4]
 80084de:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80084e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084e6:	3301      	adds	r3, #1
 80084e8:	429a      	cmp	r2, r3
 80084ea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80084ee:	fbb2 f6f3 	udiv	r6, r2, r3
 80084f2:	d32e      	bcc.n	8008552 <quorem+0x96>
 80084f4:	f04f 0a00 	mov.w	sl, #0
 80084f8:	46c4      	mov	ip, r8
 80084fa:	46ae      	mov	lr, r5
 80084fc:	46d3      	mov	fp, sl
 80084fe:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008502:	b298      	uxth	r0, r3
 8008504:	fb06 a000 	mla	r0, r6, r0, sl
 8008508:	0c02      	lsrs	r2, r0, #16
 800850a:	0c1b      	lsrs	r3, r3, #16
 800850c:	fb06 2303 	mla	r3, r6, r3, r2
 8008510:	f8de 2000 	ldr.w	r2, [lr]
 8008514:	b280      	uxth	r0, r0
 8008516:	b292      	uxth	r2, r2
 8008518:	1a12      	subs	r2, r2, r0
 800851a:	445a      	add	r2, fp
 800851c:	f8de 0000 	ldr.w	r0, [lr]
 8008520:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008524:	b29b      	uxth	r3, r3
 8008526:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800852a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800852e:	b292      	uxth	r2, r2
 8008530:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008534:	45e1      	cmp	r9, ip
 8008536:	f84e 2b04 	str.w	r2, [lr], #4
 800853a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800853e:	d2de      	bcs.n	80084fe <quorem+0x42>
 8008540:	9b00      	ldr	r3, [sp, #0]
 8008542:	58eb      	ldr	r3, [r5, r3]
 8008544:	b92b      	cbnz	r3, 8008552 <quorem+0x96>
 8008546:	9b01      	ldr	r3, [sp, #4]
 8008548:	3b04      	subs	r3, #4
 800854a:	429d      	cmp	r5, r3
 800854c:	461a      	mov	r2, r3
 800854e:	d32f      	bcc.n	80085b0 <quorem+0xf4>
 8008550:	613c      	str	r4, [r7, #16]
 8008552:	4638      	mov	r0, r7
 8008554:	f002 f80a 	bl	800a56c <__mcmp>
 8008558:	2800      	cmp	r0, #0
 800855a:	db25      	blt.n	80085a8 <quorem+0xec>
 800855c:	4629      	mov	r1, r5
 800855e:	2000      	movs	r0, #0
 8008560:	f858 2b04 	ldr.w	r2, [r8], #4
 8008564:	f8d1 c000 	ldr.w	ip, [r1]
 8008568:	fa1f fe82 	uxth.w	lr, r2
 800856c:	fa1f f38c 	uxth.w	r3, ip
 8008570:	eba3 030e 	sub.w	r3, r3, lr
 8008574:	4403      	add	r3, r0
 8008576:	0c12      	lsrs	r2, r2, #16
 8008578:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800857c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008580:	b29b      	uxth	r3, r3
 8008582:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008586:	45c1      	cmp	r9, r8
 8008588:	f841 3b04 	str.w	r3, [r1], #4
 800858c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008590:	d2e6      	bcs.n	8008560 <quorem+0xa4>
 8008592:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008596:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800859a:	b922      	cbnz	r2, 80085a6 <quorem+0xea>
 800859c:	3b04      	subs	r3, #4
 800859e:	429d      	cmp	r5, r3
 80085a0:	461a      	mov	r2, r3
 80085a2:	d30b      	bcc.n	80085bc <quorem+0x100>
 80085a4:	613c      	str	r4, [r7, #16]
 80085a6:	3601      	adds	r6, #1
 80085a8:	4630      	mov	r0, r6
 80085aa:	b003      	add	sp, #12
 80085ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b0:	6812      	ldr	r2, [r2, #0]
 80085b2:	3b04      	subs	r3, #4
 80085b4:	2a00      	cmp	r2, #0
 80085b6:	d1cb      	bne.n	8008550 <quorem+0x94>
 80085b8:	3c01      	subs	r4, #1
 80085ba:	e7c6      	b.n	800854a <quorem+0x8e>
 80085bc:	6812      	ldr	r2, [r2, #0]
 80085be:	3b04      	subs	r3, #4
 80085c0:	2a00      	cmp	r2, #0
 80085c2:	d1ef      	bne.n	80085a4 <quorem+0xe8>
 80085c4:	3c01      	subs	r4, #1
 80085c6:	e7ea      	b.n	800859e <quorem+0xe2>
 80085c8:	2000      	movs	r0, #0
 80085ca:	e7ee      	b.n	80085aa <quorem+0xee>
 80085cc:	0000      	movs	r0, r0
	...

080085d0 <_dtoa_r>:
 80085d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d4:	69c7      	ldr	r7, [r0, #28]
 80085d6:	b099      	sub	sp, #100	@ 0x64
 80085d8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80085dc:	ec55 4b10 	vmov	r4, r5, d0
 80085e0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80085e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80085e4:	4683      	mov	fp, r0
 80085e6:	920e      	str	r2, [sp, #56]	@ 0x38
 80085e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80085ea:	b97f      	cbnz	r7, 800860c <_dtoa_r+0x3c>
 80085ec:	2010      	movs	r0, #16
 80085ee:	f001 fb85 	bl	8009cfc <malloc>
 80085f2:	4602      	mov	r2, r0
 80085f4:	f8cb 001c 	str.w	r0, [fp, #28]
 80085f8:	b920      	cbnz	r0, 8008604 <_dtoa_r+0x34>
 80085fa:	4ba7      	ldr	r3, [pc, #668]	@ (8008898 <_dtoa_r+0x2c8>)
 80085fc:	21ef      	movs	r1, #239	@ 0xef
 80085fe:	48a7      	ldr	r0, [pc, #668]	@ (800889c <_dtoa_r+0x2cc>)
 8008600:	f002 fbaa 	bl	800ad58 <__assert_func>
 8008604:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008608:	6007      	str	r7, [r0, #0]
 800860a:	60c7      	str	r7, [r0, #12]
 800860c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008610:	6819      	ldr	r1, [r3, #0]
 8008612:	b159      	cbz	r1, 800862c <_dtoa_r+0x5c>
 8008614:	685a      	ldr	r2, [r3, #4]
 8008616:	604a      	str	r2, [r1, #4]
 8008618:	2301      	movs	r3, #1
 800861a:	4093      	lsls	r3, r2
 800861c:	608b      	str	r3, [r1, #8]
 800861e:	4658      	mov	r0, fp
 8008620:	f001 fd20 	bl	800a064 <_Bfree>
 8008624:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008628:	2200      	movs	r2, #0
 800862a:	601a      	str	r2, [r3, #0]
 800862c:	1e2b      	subs	r3, r5, #0
 800862e:	bfb9      	ittee	lt
 8008630:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008634:	9303      	strlt	r3, [sp, #12]
 8008636:	2300      	movge	r3, #0
 8008638:	6033      	strge	r3, [r6, #0]
 800863a:	9f03      	ldr	r7, [sp, #12]
 800863c:	4b98      	ldr	r3, [pc, #608]	@ (80088a0 <_dtoa_r+0x2d0>)
 800863e:	bfbc      	itt	lt
 8008640:	2201      	movlt	r2, #1
 8008642:	6032      	strlt	r2, [r6, #0]
 8008644:	43bb      	bics	r3, r7
 8008646:	d112      	bne.n	800866e <_dtoa_r+0x9e>
 8008648:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800864a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800864e:	6013      	str	r3, [r2, #0]
 8008650:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008654:	4323      	orrs	r3, r4
 8008656:	f000 854d 	beq.w	80090f4 <_dtoa_r+0xb24>
 800865a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800865c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80088b4 <_dtoa_r+0x2e4>
 8008660:	2b00      	cmp	r3, #0
 8008662:	f000 854f 	beq.w	8009104 <_dtoa_r+0xb34>
 8008666:	f10a 0303 	add.w	r3, sl, #3
 800866a:	f000 bd49 	b.w	8009100 <_dtoa_r+0xb30>
 800866e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008672:	2200      	movs	r2, #0
 8008674:	ec51 0b17 	vmov	r0, r1, d7
 8008678:	2300      	movs	r3, #0
 800867a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800867e:	f7f8 fa23 	bl	8000ac8 <__aeabi_dcmpeq>
 8008682:	4680      	mov	r8, r0
 8008684:	b158      	cbz	r0, 800869e <_dtoa_r+0xce>
 8008686:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008688:	2301      	movs	r3, #1
 800868a:	6013      	str	r3, [r2, #0]
 800868c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800868e:	b113      	cbz	r3, 8008696 <_dtoa_r+0xc6>
 8008690:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008692:	4b84      	ldr	r3, [pc, #528]	@ (80088a4 <_dtoa_r+0x2d4>)
 8008694:	6013      	str	r3, [r2, #0]
 8008696:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80088b8 <_dtoa_r+0x2e8>
 800869a:	f000 bd33 	b.w	8009104 <_dtoa_r+0xb34>
 800869e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80086a2:	aa16      	add	r2, sp, #88	@ 0x58
 80086a4:	a917      	add	r1, sp, #92	@ 0x5c
 80086a6:	4658      	mov	r0, fp
 80086a8:	f002 f880 	bl	800a7ac <__d2b>
 80086ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80086b0:	4681      	mov	r9, r0
 80086b2:	2e00      	cmp	r6, #0
 80086b4:	d077      	beq.n	80087a6 <_dtoa_r+0x1d6>
 80086b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80086b8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80086bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80086c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80086c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80086cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80086d0:	4619      	mov	r1, r3
 80086d2:	2200      	movs	r2, #0
 80086d4:	4b74      	ldr	r3, [pc, #464]	@ (80088a8 <_dtoa_r+0x2d8>)
 80086d6:	f7f7 fdd7 	bl	8000288 <__aeabi_dsub>
 80086da:	a369      	add	r3, pc, #420	@ (adr r3, 8008880 <_dtoa_r+0x2b0>)
 80086dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e0:	f7f7 ff8a 	bl	80005f8 <__aeabi_dmul>
 80086e4:	a368      	add	r3, pc, #416	@ (adr r3, 8008888 <_dtoa_r+0x2b8>)
 80086e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ea:	f7f7 fdcf 	bl	800028c <__adddf3>
 80086ee:	4604      	mov	r4, r0
 80086f0:	4630      	mov	r0, r6
 80086f2:	460d      	mov	r5, r1
 80086f4:	f7f7 ff16 	bl	8000524 <__aeabi_i2d>
 80086f8:	a365      	add	r3, pc, #404	@ (adr r3, 8008890 <_dtoa_r+0x2c0>)
 80086fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fe:	f7f7 ff7b 	bl	80005f8 <__aeabi_dmul>
 8008702:	4602      	mov	r2, r0
 8008704:	460b      	mov	r3, r1
 8008706:	4620      	mov	r0, r4
 8008708:	4629      	mov	r1, r5
 800870a:	f7f7 fdbf 	bl	800028c <__adddf3>
 800870e:	4604      	mov	r4, r0
 8008710:	460d      	mov	r5, r1
 8008712:	f7f8 fa21 	bl	8000b58 <__aeabi_d2iz>
 8008716:	2200      	movs	r2, #0
 8008718:	4607      	mov	r7, r0
 800871a:	2300      	movs	r3, #0
 800871c:	4620      	mov	r0, r4
 800871e:	4629      	mov	r1, r5
 8008720:	f7f8 f9dc 	bl	8000adc <__aeabi_dcmplt>
 8008724:	b140      	cbz	r0, 8008738 <_dtoa_r+0x168>
 8008726:	4638      	mov	r0, r7
 8008728:	f7f7 fefc 	bl	8000524 <__aeabi_i2d>
 800872c:	4622      	mov	r2, r4
 800872e:	462b      	mov	r3, r5
 8008730:	f7f8 f9ca 	bl	8000ac8 <__aeabi_dcmpeq>
 8008734:	b900      	cbnz	r0, 8008738 <_dtoa_r+0x168>
 8008736:	3f01      	subs	r7, #1
 8008738:	2f16      	cmp	r7, #22
 800873a:	d851      	bhi.n	80087e0 <_dtoa_r+0x210>
 800873c:	4b5b      	ldr	r3, [pc, #364]	@ (80088ac <_dtoa_r+0x2dc>)
 800873e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008746:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800874a:	f7f8 f9c7 	bl	8000adc <__aeabi_dcmplt>
 800874e:	2800      	cmp	r0, #0
 8008750:	d048      	beq.n	80087e4 <_dtoa_r+0x214>
 8008752:	3f01      	subs	r7, #1
 8008754:	2300      	movs	r3, #0
 8008756:	9312      	str	r3, [sp, #72]	@ 0x48
 8008758:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800875a:	1b9b      	subs	r3, r3, r6
 800875c:	1e5a      	subs	r2, r3, #1
 800875e:	bf44      	itt	mi
 8008760:	f1c3 0801 	rsbmi	r8, r3, #1
 8008764:	2300      	movmi	r3, #0
 8008766:	9208      	str	r2, [sp, #32]
 8008768:	bf54      	ite	pl
 800876a:	f04f 0800 	movpl.w	r8, #0
 800876e:	9308      	strmi	r3, [sp, #32]
 8008770:	2f00      	cmp	r7, #0
 8008772:	db39      	blt.n	80087e8 <_dtoa_r+0x218>
 8008774:	9b08      	ldr	r3, [sp, #32]
 8008776:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008778:	443b      	add	r3, r7
 800877a:	9308      	str	r3, [sp, #32]
 800877c:	2300      	movs	r3, #0
 800877e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008780:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008782:	2b09      	cmp	r3, #9
 8008784:	d864      	bhi.n	8008850 <_dtoa_r+0x280>
 8008786:	2b05      	cmp	r3, #5
 8008788:	bfc4      	itt	gt
 800878a:	3b04      	subgt	r3, #4
 800878c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800878e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008790:	f1a3 0302 	sub.w	r3, r3, #2
 8008794:	bfcc      	ite	gt
 8008796:	2400      	movgt	r4, #0
 8008798:	2401      	movle	r4, #1
 800879a:	2b03      	cmp	r3, #3
 800879c:	d863      	bhi.n	8008866 <_dtoa_r+0x296>
 800879e:	e8df f003 	tbb	[pc, r3]
 80087a2:	372a      	.short	0x372a
 80087a4:	5535      	.short	0x5535
 80087a6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80087aa:	441e      	add	r6, r3
 80087ac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80087b0:	2b20      	cmp	r3, #32
 80087b2:	bfc1      	itttt	gt
 80087b4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80087b8:	409f      	lslgt	r7, r3
 80087ba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80087be:	fa24 f303 	lsrgt.w	r3, r4, r3
 80087c2:	bfd6      	itet	le
 80087c4:	f1c3 0320 	rsble	r3, r3, #32
 80087c8:	ea47 0003 	orrgt.w	r0, r7, r3
 80087cc:	fa04 f003 	lslle.w	r0, r4, r3
 80087d0:	f7f7 fe98 	bl	8000504 <__aeabi_ui2d>
 80087d4:	2201      	movs	r2, #1
 80087d6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80087da:	3e01      	subs	r6, #1
 80087dc:	9214      	str	r2, [sp, #80]	@ 0x50
 80087de:	e777      	b.n	80086d0 <_dtoa_r+0x100>
 80087e0:	2301      	movs	r3, #1
 80087e2:	e7b8      	b.n	8008756 <_dtoa_r+0x186>
 80087e4:	9012      	str	r0, [sp, #72]	@ 0x48
 80087e6:	e7b7      	b.n	8008758 <_dtoa_r+0x188>
 80087e8:	427b      	negs	r3, r7
 80087ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80087ec:	2300      	movs	r3, #0
 80087ee:	eba8 0807 	sub.w	r8, r8, r7
 80087f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80087f4:	e7c4      	b.n	8008780 <_dtoa_r+0x1b0>
 80087f6:	2300      	movs	r3, #0
 80087f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80087fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	dc35      	bgt.n	800886c <_dtoa_r+0x29c>
 8008800:	2301      	movs	r3, #1
 8008802:	9300      	str	r3, [sp, #0]
 8008804:	9307      	str	r3, [sp, #28]
 8008806:	461a      	mov	r2, r3
 8008808:	920e      	str	r2, [sp, #56]	@ 0x38
 800880a:	e00b      	b.n	8008824 <_dtoa_r+0x254>
 800880c:	2301      	movs	r3, #1
 800880e:	e7f3      	b.n	80087f8 <_dtoa_r+0x228>
 8008810:	2300      	movs	r3, #0
 8008812:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008814:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008816:	18fb      	adds	r3, r7, r3
 8008818:	9300      	str	r3, [sp, #0]
 800881a:	3301      	adds	r3, #1
 800881c:	2b01      	cmp	r3, #1
 800881e:	9307      	str	r3, [sp, #28]
 8008820:	bfb8      	it	lt
 8008822:	2301      	movlt	r3, #1
 8008824:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008828:	2100      	movs	r1, #0
 800882a:	2204      	movs	r2, #4
 800882c:	f102 0514 	add.w	r5, r2, #20
 8008830:	429d      	cmp	r5, r3
 8008832:	d91f      	bls.n	8008874 <_dtoa_r+0x2a4>
 8008834:	6041      	str	r1, [r0, #4]
 8008836:	4658      	mov	r0, fp
 8008838:	f001 fbd4 	bl	8009fe4 <_Balloc>
 800883c:	4682      	mov	sl, r0
 800883e:	2800      	cmp	r0, #0
 8008840:	d13c      	bne.n	80088bc <_dtoa_r+0x2ec>
 8008842:	4b1b      	ldr	r3, [pc, #108]	@ (80088b0 <_dtoa_r+0x2e0>)
 8008844:	4602      	mov	r2, r0
 8008846:	f240 11af 	movw	r1, #431	@ 0x1af
 800884a:	e6d8      	b.n	80085fe <_dtoa_r+0x2e>
 800884c:	2301      	movs	r3, #1
 800884e:	e7e0      	b.n	8008812 <_dtoa_r+0x242>
 8008850:	2401      	movs	r4, #1
 8008852:	2300      	movs	r3, #0
 8008854:	9309      	str	r3, [sp, #36]	@ 0x24
 8008856:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008858:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800885c:	9300      	str	r3, [sp, #0]
 800885e:	9307      	str	r3, [sp, #28]
 8008860:	2200      	movs	r2, #0
 8008862:	2312      	movs	r3, #18
 8008864:	e7d0      	b.n	8008808 <_dtoa_r+0x238>
 8008866:	2301      	movs	r3, #1
 8008868:	930b      	str	r3, [sp, #44]	@ 0x2c
 800886a:	e7f5      	b.n	8008858 <_dtoa_r+0x288>
 800886c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800886e:	9300      	str	r3, [sp, #0]
 8008870:	9307      	str	r3, [sp, #28]
 8008872:	e7d7      	b.n	8008824 <_dtoa_r+0x254>
 8008874:	3101      	adds	r1, #1
 8008876:	0052      	lsls	r2, r2, #1
 8008878:	e7d8      	b.n	800882c <_dtoa_r+0x25c>
 800887a:	bf00      	nop
 800887c:	f3af 8000 	nop.w
 8008880:	636f4361 	.word	0x636f4361
 8008884:	3fd287a7 	.word	0x3fd287a7
 8008888:	8b60c8b3 	.word	0x8b60c8b3
 800888c:	3fc68a28 	.word	0x3fc68a28
 8008890:	509f79fb 	.word	0x509f79fb
 8008894:	3fd34413 	.word	0x3fd34413
 8008898:	0800b22e 	.word	0x0800b22e
 800889c:	0800b245 	.word	0x0800b245
 80088a0:	7ff00000 	.word	0x7ff00000
 80088a4:	0800b099 	.word	0x0800b099
 80088a8:	3ff80000 	.word	0x3ff80000
 80088ac:	0800b3b0 	.word	0x0800b3b0
 80088b0:	0800b29d 	.word	0x0800b29d
 80088b4:	0800b22a 	.word	0x0800b22a
 80088b8:	0800b098 	.word	0x0800b098
 80088bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80088c0:	6018      	str	r0, [r3, #0]
 80088c2:	9b07      	ldr	r3, [sp, #28]
 80088c4:	2b0e      	cmp	r3, #14
 80088c6:	f200 80a4 	bhi.w	8008a12 <_dtoa_r+0x442>
 80088ca:	2c00      	cmp	r4, #0
 80088cc:	f000 80a1 	beq.w	8008a12 <_dtoa_r+0x442>
 80088d0:	2f00      	cmp	r7, #0
 80088d2:	dd33      	ble.n	800893c <_dtoa_r+0x36c>
 80088d4:	4bad      	ldr	r3, [pc, #692]	@ (8008b8c <_dtoa_r+0x5bc>)
 80088d6:	f007 020f 	and.w	r2, r7, #15
 80088da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088de:	ed93 7b00 	vldr	d7, [r3]
 80088e2:	05f8      	lsls	r0, r7, #23
 80088e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80088e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80088ec:	d516      	bpl.n	800891c <_dtoa_r+0x34c>
 80088ee:	4ba8      	ldr	r3, [pc, #672]	@ (8008b90 <_dtoa_r+0x5c0>)
 80088f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80088f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80088f8:	f7f7 ffa8 	bl	800084c <__aeabi_ddiv>
 80088fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008900:	f004 040f 	and.w	r4, r4, #15
 8008904:	2603      	movs	r6, #3
 8008906:	4da2      	ldr	r5, [pc, #648]	@ (8008b90 <_dtoa_r+0x5c0>)
 8008908:	b954      	cbnz	r4, 8008920 <_dtoa_r+0x350>
 800890a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800890e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008912:	f7f7 ff9b 	bl	800084c <__aeabi_ddiv>
 8008916:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800891a:	e028      	b.n	800896e <_dtoa_r+0x39e>
 800891c:	2602      	movs	r6, #2
 800891e:	e7f2      	b.n	8008906 <_dtoa_r+0x336>
 8008920:	07e1      	lsls	r1, r4, #31
 8008922:	d508      	bpl.n	8008936 <_dtoa_r+0x366>
 8008924:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008928:	e9d5 2300 	ldrd	r2, r3, [r5]
 800892c:	f7f7 fe64 	bl	80005f8 <__aeabi_dmul>
 8008930:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008934:	3601      	adds	r6, #1
 8008936:	1064      	asrs	r4, r4, #1
 8008938:	3508      	adds	r5, #8
 800893a:	e7e5      	b.n	8008908 <_dtoa_r+0x338>
 800893c:	f000 80d2 	beq.w	8008ae4 <_dtoa_r+0x514>
 8008940:	427c      	negs	r4, r7
 8008942:	4b92      	ldr	r3, [pc, #584]	@ (8008b8c <_dtoa_r+0x5bc>)
 8008944:	4d92      	ldr	r5, [pc, #584]	@ (8008b90 <_dtoa_r+0x5c0>)
 8008946:	f004 020f 	and.w	r2, r4, #15
 800894a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800894e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008952:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008956:	f7f7 fe4f 	bl	80005f8 <__aeabi_dmul>
 800895a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800895e:	1124      	asrs	r4, r4, #4
 8008960:	2300      	movs	r3, #0
 8008962:	2602      	movs	r6, #2
 8008964:	2c00      	cmp	r4, #0
 8008966:	f040 80b2 	bne.w	8008ace <_dtoa_r+0x4fe>
 800896a:	2b00      	cmp	r3, #0
 800896c:	d1d3      	bne.n	8008916 <_dtoa_r+0x346>
 800896e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008970:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008974:	2b00      	cmp	r3, #0
 8008976:	f000 80b7 	beq.w	8008ae8 <_dtoa_r+0x518>
 800897a:	4b86      	ldr	r3, [pc, #536]	@ (8008b94 <_dtoa_r+0x5c4>)
 800897c:	2200      	movs	r2, #0
 800897e:	4620      	mov	r0, r4
 8008980:	4629      	mov	r1, r5
 8008982:	f7f8 f8ab 	bl	8000adc <__aeabi_dcmplt>
 8008986:	2800      	cmp	r0, #0
 8008988:	f000 80ae 	beq.w	8008ae8 <_dtoa_r+0x518>
 800898c:	9b07      	ldr	r3, [sp, #28]
 800898e:	2b00      	cmp	r3, #0
 8008990:	f000 80aa 	beq.w	8008ae8 <_dtoa_r+0x518>
 8008994:	9b00      	ldr	r3, [sp, #0]
 8008996:	2b00      	cmp	r3, #0
 8008998:	dd37      	ble.n	8008a0a <_dtoa_r+0x43a>
 800899a:	1e7b      	subs	r3, r7, #1
 800899c:	9304      	str	r3, [sp, #16]
 800899e:	4620      	mov	r0, r4
 80089a0:	4b7d      	ldr	r3, [pc, #500]	@ (8008b98 <_dtoa_r+0x5c8>)
 80089a2:	2200      	movs	r2, #0
 80089a4:	4629      	mov	r1, r5
 80089a6:	f7f7 fe27 	bl	80005f8 <__aeabi_dmul>
 80089aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089ae:	9c00      	ldr	r4, [sp, #0]
 80089b0:	3601      	adds	r6, #1
 80089b2:	4630      	mov	r0, r6
 80089b4:	f7f7 fdb6 	bl	8000524 <__aeabi_i2d>
 80089b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089bc:	f7f7 fe1c 	bl	80005f8 <__aeabi_dmul>
 80089c0:	4b76      	ldr	r3, [pc, #472]	@ (8008b9c <_dtoa_r+0x5cc>)
 80089c2:	2200      	movs	r2, #0
 80089c4:	f7f7 fc62 	bl	800028c <__adddf3>
 80089c8:	4605      	mov	r5, r0
 80089ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80089ce:	2c00      	cmp	r4, #0
 80089d0:	f040 808d 	bne.w	8008aee <_dtoa_r+0x51e>
 80089d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089d8:	4b71      	ldr	r3, [pc, #452]	@ (8008ba0 <_dtoa_r+0x5d0>)
 80089da:	2200      	movs	r2, #0
 80089dc:	f7f7 fc54 	bl	8000288 <__aeabi_dsub>
 80089e0:	4602      	mov	r2, r0
 80089e2:	460b      	mov	r3, r1
 80089e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80089e8:	462a      	mov	r2, r5
 80089ea:	4633      	mov	r3, r6
 80089ec:	f7f8 f894 	bl	8000b18 <__aeabi_dcmpgt>
 80089f0:	2800      	cmp	r0, #0
 80089f2:	f040 828b 	bne.w	8008f0c <_dtoa_r+0x93c>
 80089f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089fa:	462a      	mov	r2, r5
 80089fc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008a00:	f7f8 f86c 	bl	8000adc <__aeabi_dcmplt>
 8008a04:	2800      	cmp	r0, #0
 8008a06:	f040 8128 	bne.w	8008c5a <_dtoa_r+0x68a>
 8008a0a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008a0e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008a12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	f2c0 815a 	blt.w	8008cce <_dtoa_r+0x6fe>
 8008a1a:	2f0e      	cmp	r7, #14
 8008a1c:	f300 8157 	bgt.w	8008cce <_dtoa_r+0x6fe>
 8008a20:	4b5a      	ldr	r3, [pc, #360]	@ (8008b8c <_dtoa_r+0x5bc>)
 8008a22:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008a26:	ed93 7b00 	vldr	d7, [r3]
 8008a2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	ed8d 7b00 	vstr	d7, [sp]
 8008a32:	da03      	bge.n	8008a3c <_dtoa_r+0x46c>
 8008a34:	9b07      	ldr	r3, [sp, #28]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	f340 8101 	ble.w	8008c3e <_dtoa_r+0x66e>
 8008a3c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008a40:	4656      	mov	r6, sl
 8008a42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a46:	4620      	mov	r0, r4
 8008a48:	4629      	mov	r1, r5
 8008a4a:	f7f7 feff 	bl	800084c <__aeabi_ddiv>
 8008a4e:	f7f8 f883 	bl	8000b58 <__aeabi_d2iz>
 8008a52:	4680      	mov	r8, r0
 8008a54:	f7f7 fd66 	bl	8000524 <__aeabi_i2d>
 8008a58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a5c:	f7f7 fdcc 	bl	80005f8 <__aeabi_dmul>
 8008a60:	4602      	mov	r2, r0
 8008a62:	460b      	mov	r3, r1
 8008a64:	4620      	mov	r0, r4
 8008a66:	4629      	mov	r1, r5
 8008a68:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008a6c:	f7f7 fc0c 	bl	8000288 <__aeabi_dsub>
 8008a70:	f806 4b01 	strb.w	r4, [r6], #1
 8008a74:	9d07      	ldr	r5, [sp, #28]
 8008a76:	eba6 040a 	sub.w	r4, r6, sl
 8008a7a:	42a5      	cmp	r5, r4
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	460b      	mov	r3, r1
 8008a80:	f040 8117 	bne.w	8008cb2 <_dtoa_r+0x6e2>
 8008a84:	f7f7 fc02 	bl	800028c <__adddf3>
 8008a88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a8c:	4604      	mov	r4, r0
 8008a8e:	460d      	mov	r5, r1
 8008a90:	f7f8 f842 	bl	8000b18 <__aeabi_dcmpgt>
 8008a94:	2800      	cmp	r0, #0
 8008a96:	f040 80f9 	bne.w	8008c8c <_dtoa_r+0x6bc>
 8008a9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	4629      	mov	r1, r5
 8008aa2:	f7f8 f811 	bl	8000ac8 <__aeabi_dcmpeq>
 8008aa6:	b118      	cbz	r0, 8008ab0 <_dtoa_r+0x4e0>
 8008aa8:	f018 0f01 	tst.w	r8, #1
 8008aac:	f040 80ee 	bne.w	8008c8c <_dtoa_r+0x6bc>
 8008ab0:	4649      	mov	r1, r9
 8008ab2:	4658      	mov	r0, fp
 8008ab4:	f001 fad6 	bl	800a064 <_Bfree>
 8008ab8:	2300      	movs	r3, #0
 8008aba:	7033      	strb	r3, [r6, #0]
 8008abc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008abe:	3701      	adds	r7, #1
 8008ac0:	601f      	str	r7, [r3, #0]
 8008ac2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	f000 831d 	beq.w	8009104 <_dtoa_r+0xb34>
 8008aca:	601e      	str	r6, [r3, #0]
 8008acc:	e31a      	b.n	8009104 <_dtoa_r+0xb34>
 8008ace:	07e2      	lsls	r2, r4, #31
 8008ad0:	d505      	bpl.n	8008ade <_dtoa_r+0x50e>
 8008ad2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008ad6:	f7f7 fd8f 	bl	80005f8 <__aeabi_dmul>
 8008ada:	3601      	adds	r6, #1
 8008adc:	2301      	movs	r3, #1
 8008ade:	1064      	asrs	r4, r4, #1
 8008ae0:	3508      	adds	r5, #8
 8008ae2:	e73f      	b.n	8008964 <_dtoa_r+0x394>
 8008ae4:	2602      	movs	r6, #2
 8008ae6:	e742      	b.n	800896e <_dtoa_r+0x39e>
 8008ae8:	9c07      	ldr	r4, [sp, #28]
 8008aea:	9704      	str	r7, [sp, #16]
 8008aec:	e761      	b.n	80089b2 <_dtoa_r+0x3e2>
 8008aee:	4b27      	ldr	r3, [pc, #156]	@ (8008b8c <_dtoa_r+0x5bc>)
 8008af0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008af2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008af6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008afa:	4454      	add	r4, sl
 8008afc:	2900      	cmp	r1, #0
 8008afe:	d053      	beq.n	8008ba8 <_dtoa_r+0x5d8>
 8008b00:	4928      	ldr	r1, [pc, #160]	@ (8008ba4 <_dtoa_r+0x5d4>)
 8008b02:	2000      	movs	r0, #0
 8008b04:	f7f7 fea2 	bl	800084c <__aeabi_ddiv>
 8008b08:	4633      	mov	r3, r6
 8008b0a:	462a      	mov	r2, r5
 8008b0c:	f7f7 fbbc 	bl	8000288 <__aeabi_dsub>
 8008b10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008b14:	4656      	mov	r6, sl
 8008b16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b1a:	f7f8 f81d 	bl	8000b58 <__aeabi_d2iz>
 8008b1e:	4605      	mov	r5, r0
 8008b20:	f7f7 fd00 	bl	8000524 <__aeabi_i2d>
 8008b24:	4602      	mov	r2, r0
 8008b26:	460b      	mov	r3, r1
 8008b28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b2c:	f7f7 fbac 	bl	8000288 <__aeabi_dsub>
 8008b30:	3530      	adds	r5, #48	@ 0x30
 8008b32:	4602      	mov	r2, r0
 8008b34:	460b      	mov	r3, r1
 8008b36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008b3a:	f806 5b01 	strb.w	r5, [r6], #1
 8008b3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008b42:	f7f7 ffcb 	bl	8000adc <__aeabi_dcmplt>
 8008b46:	2800      	cmp	r0, #0
 8008b48:	d171      	bne.n	8008c2e <_dtoa_r+0x65e>
 8008b4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b4e:	4911      	ldr	r1, [pc, #68]	@ (8008b94 <_dtoa_r+0x5c4>)
 8008b50:	2000      	movs	r0, #0
 8008b52:	f7f7 fb99 	bl	8000288 <__aeabi_dsub>
 8008b56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008b5a:	f7f7 ffbf 	bl	8000adc <__aeabi_dcmplt>
 8008b5e:	2800      	cmp	r0, #0
 8008b60:	f040 8095 	bne.w	8008c8e <_dtoa_r+0x6be>
 8008b64:	42a6      	cmp	r6, r4
 8008b66:	f43f af50 	beq.w	8008a0a <_dtoa_r+0x43a>
 8008b6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8008b98 <_dtoa_r+0x5c8>)
 8008b70:	2200      	movs	r2, #0
 8008b72:	f7f7 fd41 	bl	80005f8 <__aeabi_dmul>
 8008b76:	4b08      	ldr	r3, [pc, #32]	@ (8008b98 <_dtoa_r+0x5c8>)
 8008b78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b82:	f7f7 fd39 	bl	80005f8 <__aeabi_dmul>
 8008b86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b8a:	e7c4      	b.n	8008b16 <_dtoa_r+0x546>
 8008b8c:	0800b3b0 	.word	0x0800b3b0
 8008b90:	0800b388 	.word	0x0800b388
 8008b94:	3ff00000 	.word	0x3ff00000
 8008b98:	40240000 	.word	0x40240000
 8008b9c:	401c0000 	.word	0x401c0000
 8008ba0:	40140000 	.word	0x40140000
 8008ba4:	3fe00000 	.word	0x3fe00000
 8008ba8:	4631      	mov	r1, r6
 8008baa:	4628      	mov	r0, r5
 8008bac:	f7f7 fd24 	bl	80005f8 <__aeabi_dmul>
 8008bb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008bb4:	9415      	str	r4, [sp, #84]	@ 0x54
 8008bb6:	4656      	mov	r6, sl
 8008bb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bbc:	f7f7 ffcc 	bl	8000b58 <__aeabi_d2iz>
 8008bc0:	4605      	mov	r5, r0
 8008bc2:	f7f7 fcaf 	bl	8000524 <__aeabi_i2d>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	460b      	mov	r3, r1
 8008bca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bce:	f7f7 fb5b 	bl	8000288 <__aeabi_dsub>
 8008bd2:	3530      	adds	r5, #48	@ 0x30
 8008bd4:	f806 5b01 	strb.w	r5, [r6], #1
 8008bd8:	4602      	mov	r2, r0
 8008bda:	460b      	mov	r3, r1
 8008bdc:	42a6      	cmp	r6, r4
 8008bde:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008be2:	f04f 0200 	mov.w	r2, #0
 8008be6:	d124      	bne.n	8008c32 <_dtoa_r+0x662>
 8008be8:	4bac      	ldr	r3, [pc, #688]	@ (8008e9c <_dtoa_r+0x8cc>)
 8008bea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008bee:	f7f7 fb4d 	bl	800028c <__adddf3>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bfa:	f7f7 ff8d 	bl	8000b18 <__aeabi_dcmpgt>
 8008bfe:	2800      	cmp	r0, #0
 8008c00:	d145      	bne.n	8008c8e <_dtoa_r+0x6be>
 8008c02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008c06:	49a5      	ldr	r1, [pc, #660]	@ (8008e9c <_dtoa_r+0x8cc>)
 8008c08:	2000      	movs	r0, #0
 8008c0a:	f7f7 fb3d 	bl	8000288 <__aeabi_dsub>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	460b      	mov	r3, r1
 8008c12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c16:	f7f7 ff61 	bl	8000adc <__aeabi_dcmplt>
 8008c1a:	2800      	cmp	r0, #0
 8008c1c:	f43f aef5 	beq.w	8008a0a <_dtoa_r+0x43a>
 8008c20:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008c22:	1e73      	subs	r3, r6, #1
 8008c24:	9315      	str	r3, [sp, #84]	@ 0x54
 8008c26:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008c2a:	2b30      	cmp	r3, #48	@ 0x30
 8008c2c:	d0f8      	beq.n	8008c20 <_dtoa_r+0x650>
 8008c2e:	9f04      	ldr	r7, [sp, #16]
 8008c30:	e73e      	b.n	8008ab0 <_dtoa_r+0x4e0>
 8008c32:	4b9b      	ldr	r3, [pc, #620]	@ (8008ea0 <_dtoa_r+0x8d0>)
 8008c34:	f7f7 fce0 	bl	80005f8 <__aeabi_dmul>
 8008c38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c3c:	e7bc      	b.n	8008bb8 <_dtoa_r+0x5e8>
 8008c3e:	d10c      	bne.n	8008c5a <_dtoa_r+0x68a>
 8008c40:	4b98      	ldr	r3, [pc, #608]	@ (8008ea4 <_dtoa_r+0x8d4>)
 8008c42:	2200      	movs	r2, #0
 8008c44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c48:	f7f7 fcd6 	bl	80005f8 <__aeabi_dmul>
 8008c4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c50:	f7f7 ff58 	bl	8000b04 <__aeabi_dcmpge>
 8008c54:	2800      	cmp	r0, #0
 8008c56:	f000 8157 	beq.w	8008f08 <_dtoa_r+0x938>
 8008c5a:	2400      	movs	r4, #0
 8008c5c:	4625      	mov	r5, r4
 8008c5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c60:	43db      	mvns	r3, r3
 8008c62:	9304      	str	r3, [sp, #16]
 8008c64:	4656      	mov	r6, sl
 8008c66:	2700      	movs	r7, #0
 8008c68:	4621      	mov	r1, r4
 8008c6a:	4658      	mov	r0, fp
 8008c6c:	f001 f9fa 	bl	800a064 <_Bfree>
 8008c70:	2d00      	cmp	r5, #0
 8008c72:	d0dc      	beq.n	8008c2e <_dtoa_r+0x65e>
 8008c74:	b12f      	cbz	r7, 8008c82 <_dtoa_r+0x6b2>
 8008c76:	42af      	cmp	r7, r5
 8008c78:	d003      	beq.n	8008c82 <_dtoa_r+0x6b2>
 8008c7a:	4639      	mov	r1, r7
 8008c7c:	4658      	mov	r0, fp
 8008c7e:	f001 f9f1 	bl	800a064 <_Bfree>
 8008c82:	4629      	mov	r1, r5
 8008c84:	4658      	mov	r0, fp
 8008c86:	f001 f9ed 	bl	800a064 <_Bfree>
 8008c8a:	e7d0      	b.n	8008c2e <_dtoa_r+0x65e>
 8008c8c:	9704      	str	r7, [sp, #16]
 8008c8e:	4633      	mov	r3, r6
 8008c90:	461e      	mov	r6, r3
 8008c92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c96:	2a39      	cmp	r2, #57	@ 0x39
 8008c98:	d107      	bne.n	8008caa <_dtoa_r+0x6da>
 8008c9a:	459a      	cmp	sl, r3
 8008c9c:	d1f8      	bne.n	8008c90 <_dtoa_r+0x6c0>
 8008c9e:	9a04      	ldr	r2, [sp, #16]
 8008ca0:	3201      	adds	r2, #1
 8008ca2:	9204      	str	r2, [sp, #16]
 8008ca4:	2230      	movs	r2, #48	@ 0x30
 8008ca6:	f88a 2000 	strb.w	r2, [sl]
 8008caa:	781a      	ldrb	r2, [r3, #0]
 8008cac:	3201      	adds	r2, #1
 8008cae:	701a      	strb	r2, [r3, #0]
 8008cb0:	e7bd      	b.n	8008c2e <_dtoa_r+0x65e>
 8008cb2:	4b7b      	ldr	r3, [pc, #492]	@ (8008ea0 <_dtoa_r+0x8d0>)
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f7f7 fc9f 	bl	80005f8 <__aeabi_dmul>
 8008cba:	2200      	movs	r2, #0
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	460d      	mov	r5, r1
 8008cc2:	f7f7 ff01 	bl	8000ac8 <__aeabi_dcmpeq>
 8008cc6:	2800      	cmp	r0, #0
 8008cc8:	f43f aebb 	beq.w	8008a42 <_dtoa_r+0x472>
 8008ccc:	e6f0      	b.n	8008ab0 <_dtoa_r+0x4e0>
 8008cce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008cd0:	2a00      	cmp	r2, #0
 8008cd2:	f000 80db 	beq.w	8008e8c <_dtoa_r+0x8bc>
 8008cd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008cd8:	2a01      	cmp	r2, #1
 8008cda:	f300 80bf 	bgt.w	8008e5c <_dtoa_r+0x88c>
 8008cde:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008ce0:	2a00      	cmp	r2, #0
 8008ce2:	f000 80b7 	beq.w	8008e54 <_dtoa_r+0x884>
 8008ce6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008cea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008cec:	4646      	mov	r6, r8
 8008cee:	9a08      	ldr	r2, [sp, #32]
 8008cf0:	2101      	movs	r1, #1
 8008cf2:	441a      	add	r2, r3
 8008cf4:	4658      	mov	r0, fp
 8008cf6:	4498      	add	r8, r3
 8008cf8:	9208      	str	r2, [sp, #32]
 8008cfa:	f001 fab1 	bl	800a260 <__i2b>
 8008cfe:	4605      	mov	r5, r0
 8008d00:	b15e      	cbz	r6, 8008d1a <_dtoa_r+0x74a>
 8008d02:	9b08      	ldr	r3, [sp, #32]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	dd08      	ble.n	8008d1a <_dtoa_r+0x74a>
 8008d08:	42b3      	cmp	r3, r6
 8008d0a:	9a08      	ldr	r2, [sp, #32]
 8008d0c:	bfa8      	it	ge
 8008d0e:	4633      	movge	r3, r6
 8008d10:	eba8 0803 	sub.w	r8, r8, r3
 8008d14:	1af6      	subs	r6, r6, r3
 8008d16:	1ad3      	subs	r3, r2, r3
 8008d18:	9308      	str	r3, [sp, #32]
 8008d1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d1c:	b1f3      	cbz	r3, 8008d5c <_dtoa_r+0x78c>
 8008d1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	f000 80b7 	beq.w	8008e94 <_dtoa_r+0x8c4>
 8008d26:	b18c      	cbz	r4, 8008d4c <_dtoa_r+0x77c>
 8008d28:	4629      	mov	r1, r5
 8008d2a:	4622      	mov	r2, r4
 8008d2c:	4658      	mov	r0, fp
 8008d2e:	f001 fb57 	bl	800a3e0 <__pow5mult>
 8008d32:	464a      	mov	r2, r9
 8008d34:	4601      	mov	r1, r0
 8008d36:	4605      	mov	r5, r0
 8008d38:	4658      	mov	r0, fp
 8008d3a:	f001 faa7 	bl	800a28c <__multiply>
 8008d3e:	4649      	mov	r1, r9
 8008d40:	9004      	str	r0, [sp, #16]
 8008d42:	4658      	mov	r0, fp
 8008d44:	f001 f98e 	bl	800a064 <_Bfree>
 8008d48:	9b04      	ldr	r3, [sp, #16]
 8008d4a:	4699      	mov	r9, r3
 8008d4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d4e:	1b1a      	subs	r2, r3, r4
 8008d50:	d004      	beq.n	8008d5c <_dtoa_r+0x78c>
 8008d52:	4649      	mov	r1, r9
 8008d54:	4658      	mov	r0, fp
 8008d56:	f001 fb43 	bl	800a3e0 <__pow5mult>
 8008d5a:	4681      	mov	r9, r0
 8008d5c:	2101      	movs	r1, #1
 8008d5e:	4658      	mov	r0, fp
 8008d60:	f001 fa7e 	bl	800a260 <__i2b>
 8008d64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d66:	4604      	mov	r4, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	f000 81cf 	beq.w	800910c <_dtoa_r+0xb3c>
 8008d6e:	461a      	mov	r2, r3
 8008d70:	4601      	mov	r1, r0
 8008d72:	4658      	mov	r0, fp
 8008d74:	f001 fb34 	bl	800a3e0 <__pow5mult>
 8008d78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	4604      	mov	r4, r0
 8008d7e:	f300 8095 	bgt.w	8008eac <_dtoa_r+0x8dc>
 8008d82:	9b02      	ldr	r3, [sp, #8]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	f040 8087 	bne.w	8008e98 <_dtoa_r+0x8c8>
 8008d8a:	9b03      	ldr	r3, [sp, #12]
 8008d8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	f040 8089 	bne.w	8008ea8 <_dtoa_r+0x8d8>
 8008d96:	9b03      	ldr	r3, [sp, #12]
 8008d98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008d9c:	0d1b      	lsrs	r3, r3, #20
 8008d9e:	051b      	lsls	r3, r3, #20
 8008da0:	b12b      	cbz	r3, 8008dae <_dtoa_r+0x7de>
 8008da2:	9b08      	ldr	r3, [sp, #32]
 8008da4:	3301      	adds	r3, #1
 8008da6:	9308      	str	r3, [sp, #32]
 8008da8:	f108 0801 	add.w	r8, r8, #1
 8008dac:	2301      	movs	r3, #1
 8008dae:	930a      	str	r3, [sp, #40]	@ 0x28
 8008db0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	f000 81b0 	beq.w	8009118 <_dtoa_r+0xb48>
 8008db8:	6923      	ldr	r3, [r4, #16]
 8008dba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008dbe:	6918      	ldr	r0, [r3, #16]
 8008dc0:	f001 fa02 	bl	800a1c8 <__hi0bits>
 8008dc4:	f1c0 0020 	rsb	r0, r0, #32
 8008dc8:	9b08      	ldr	r3, [sp, #32]
 8008dca:	4418      	add	r0, r3
 8008dcc:	f010 001f 	ands.w	r0, r0, #31
 8008dd0:	d077      	beq.n	8008ec2 <_dtoa_r+0x8f2>
 8008dd2:	f1c0 0320 	rsb	r3, r0, #32
 8008dd6:	2b04      	cmp	r3, #4
 8008dd8:	dd6b      	ble.n	8008eb2 <_dtoa_r+0x8e2>
 8008dda:	9b08      	ldr	r3, [sp, #32]
 8008ddc:	f1c0 001c 	rsb	r0, r0, #28
 8008de0:	4403      	add	r3, r0
 8008de2:	4480      	add	r8, r0
 8008de4:	4406      	add	r6, r0
 8008de6:	9308      	str	r3, [sp, #32]
 8008de8:	f1b8 0f00 	cmp.w	r8, #0
 8008dec:	dd05      	ble.n	8008dfa <_dtoa_r+0x82a>
 8008dee:	4649      	mov	r1, r9
 8008df0:	4642      	mov	r2, r8
 8008df2:	4658      	mov	r0, fp
 8008df4:	f001 fb4e 	bl	800a494 <__lshift>
 8008df8:	4681      	mov	r9, r0
 8008dfa:	9b08      	ldr	r3, [sp, #32]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	dd05      	ble.n	8008e0c <_dtoa_r+0x83c>
 8008e00:	4621      	mov	r1, r4
 8008e02:	461a      	mov	r2, r3
 8008e04:	4658      	mov	r0, fp
 8008e06:	f001 fb45 	bl	800a494 <__lshift>
 8008e0a:	4604      	mov	r4, r0
 8008e0c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d059      	beq.n	8008ec6 <_dtoa_r+0x8f6>
 8008e12:	4621      	mov	r1, r4
 8008e14:	4648      	mov	r0, r9
 8008e16:	f001 fba9 	bl	800a56c <__mcmp>
 8008e1a:	2800      	cmp	r0, #0
 8008e1c:	da53      	bge.n	8008ec6 <_dtoa_r+0x8f6>
 8008e1e:	1e7b      	subs	r3, r7, #1
 8008e20:	9304      	str	r3, [sp, #16]
 8008e22:	4649      	mov	r1, r9
 8008e24:	2300      	movs	r3, #0
 8008e26:	220a      	movs	r2, #10
 8008e28:	4658      	mov	r0, fp
 8008e2a:	f001 f93d 	bl	800a0a8 <__multadd>
 8008e2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e30:	4681      	mov	r9, r0
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	f000 8172 	beq.w	800911c <_dtoa_r+0xb4c>
 8008e38:	2300      	movs	r3, #0
 8008e3a:	4629      	mov	r1, r5
 8008e3c:	220a      	movs	r2, #10
 8008e3e:	4658      	mov	r0, fp
 8008e40:	f001 f932 	bl	800a0a8 <__multadd>
 8008e44:	9b00      	ldr	r3, [sp, #0]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	4605      	mov	r5, r0
 8008e4a:	dc67      	bgt.n	8008f1c <_dtoa_r+0x94c>
 8008e4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e4e:	2b02      	cmp	r3, #2
 8008e50:	dc41      	bgt.n	8008ed6 <_dtoa_r+0x906>
 8008e52:	e063      	b.n	8008f1c <_dtoa_r+0x94c>
 8008e54:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008e56:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008e5a:	e746      	b.n	8008cea <_dtoa_r+0x71a>
 8008e5c:	9b07      	ldr	r3, [sp, #28]
 8008e5e:	1e5c      	subs	r4, r3, #1
 8008e60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e62:	42a3      	cmp	r3, r4
 8008e64:	bfbf      	itttt	lt
 8008e66:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008e68:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008e6a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008e6c:	1ae3      	sublt	r3, r4, r3
 8008e6e:	bfb4      	ite	lt
 8008e70:	18d2      	addlt	r2, r2, r3
 8008e72:	1b1c      	subge	r4, r3, r4
 8008e74:	9b07      	ldr	r3, [sp, #28]
 8008e76:	bfbc      	itt	lt
 8008e78:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008e7a:	2400      	movlt	r4, #0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	bfb5      	itete	lt
 8008e80:	eba8 0603 	sublt.w	r6, r8, r3
 8008e84:	9b07      	ldrge	r3, [sp, #28]
 8008e86:	2300      	movlt	r3, #0
 8008e88:	4646      	movge	r6, r8
 8008e8a:	e730      	b.n	8008cee <_dtoa_r+0x71e>
 8008e8c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008e8e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008e90:	4646      	mov	r6, r8
 8008e92:	e735      	b.n	8008d00 <_dtoa_r+0x730>
 8008e94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008e96:	e75c      	b.n	8008d52 <_dtoa_r+0x782>
 8008e98:	2300      	movs	r3, #0
 8008e9a:	e788      	b.n	8008dae <_dtoa_r+0x7de>
 8008e9c:	3fe00000 	.word	0x3fe00000
 8008ea0:	40240000 	.word	0x40240000
 8008ea4:	40140000 	.word	0x40140000
 8008ea8:	9b02      	ldr	r3, [sp, #8]
 8008eaa:	e780      	b.n	8008dae <_dtoa_r+0x7de>
 8008eac:	2300      	movs	r3, #0
 8008eae:	930a      	str	r3, [sp, #40]	@ 0x28
 8008eb0:	e782      	b.n	8008db8 <_dtoa_r+0x7e8>
 8008eb2:	d099      	beq.n	8008de8 <_dtoa_r+0x818>
 8008eb4:	9a08      	ldr	r2, [sp, #32]
 8008eb6:	331c      	adds	r3, #28
 8008eb8:	441a      	add	r2, r3
 8008eba:	4498      	add	r8, r3
 8008ebc:	441e      	add	r6, r3
 8008ebe:	9208      	str	r2, [sp, #32]
 8008ec0:	e792      	b.n	8008de8 <_dtoa_r+0x818>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	e7f6      	b.n	8008eb4 <_dtoa_r+0x8e4>
 8008ec6:	9b07      	ldr	r3, [sp, #28]
 8008ec8:	9704      	str	r7, [sp, #16]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	dc20      	bgt.n	8008f10 <_dtoa_r+0x940>
 8008ece:	9300      	str	r3, [sp, #0]
 8008ed0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ed2:	2b02      	cmp	r3, #2
 8008ed4:	dd1e      	ble.n	8008f14 <_dtoa_r+0x944>
 8008ed6:	9b00      	ldr	r3, [sp, #0]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	f47f aec0 	bne.w	8008c5e <_dtoa_r+0x68e>
 8008ede:	4621      	mov	r1, r4
 8008ee0:	2205      	movs	r2, #5
 8008ee2:	4658      	mov	r0, fp
 8008ee4:	f001 f8e0 	bl	800a0a8 <__multadd>
 8008ee8:	4601      	mov	r1, r0
 8008eea:	4604      	mov	r4, r0
 8008eec:	4648      	mov	r0, r9
 8008eee:	f001 fb3d 	bl	800a56c <__mcmp>
 8008ef2:	2800      	cmp	r0, #0
 8008ef4:	f77f aeb3 	ble.w	8008c5e <_dtoa_r+0x68e>
 8008ef8:	4656      	mov	r6, sl
 8008efa:	2331      	movs	r3, #49	@ 0x31
 8008efc:	f806 3b01 	strb.w	r3, [r6], #1
 8008f00:	9b04      	ldr	r3, [sp, #16]
 8008f02:	3301      	adds	r3, #1
 8008f04:	9304      	str	r3, [sp, #16]
 8008f06:	e6ae      	b.n	8008c66 <_dtoa_r+0x696>
 8008f08:	9c07      	ldr	r4, [sp, #28]
 8008f0a:	9704      	str	r7, [sp, #16]
 8008f0c:	4625      	mov	r5, r4
 8008f0e:	e7f3      	b.n	8008ef8 <_dtoa_r+0x928>
 8008f10:	9b07      	ldr	r3, [sp, #28]
 8008f12:	9300      	str	r3, [sp, #0]
 8008f14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	f000 8104 	beq.w	8009124 <_dtoa_r+0xb54>
 8008f1c:	2e00      	cmp	r6, #0
 8008f1e:	dd05      	ble.n	8008f2c <_dtoa_r+0x95c>
 8008f20:	4629      	mov	r1, r5
 8008f22:	4632      	mov	r2, r6
 8008f24:	4658      	mov	r0, fp
 8008f26:	f001 fab5 	bl	800a494 <__lshift>
 8008f2a:	4605      	mov	r5, r0
 8008f2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d05a      	beq.n	8008fe8 <_dtoa_r+0xa18>
 8008f32:	6869      	ldr	r1, [r5, #4]
 8008f34:	4658      	mov	r0, fp
 8008f36:	f001 f855 	bl	8009fe4 <_Balloc>
 8008f3a:	4606      	mov	r6, r0
 8008f3c:	b928      	cbnz	r0, 8008f4a <_dtoa_r+0x97a>
 8008f3e:	4b84      	ldr	r3, [pc, #528]	@ (8009150 <_dtoa_r+0xb80>)
 8008f40:	4602      	mov	r2, r0
 8008f42:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008f46:	f7ff bb5a 	b.w	80085fe <_dtoa_r+0x2e>
 8008f4a:	692a      	ldr	r2, [r5, #16]
 8008f4c:	3202      	adds	r2, #2
 8008f4e:	0092      	lsls	r2, r2, #2
 8008f50:	f105 010c 	add.w	r1, r5, #12
 8008f54:	300c      	adds	r0, #12
 8008f56:	f7ff fa92 	bl	800847e <memcpy>
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	4631      	mov	r1, r6
 8008f5e:	4658      	mov	r0, fp
 8008f60:	f001 fa98 	bl	800a494 <__lshift>
 8008f64:	f10a 0301 	add.w	r3, sl, #1
 8008f68:	9307      	str	r3, [sp, #28]
 8008f6a:	9b00      	ldr	r3, [sp, #0]
 8008f6c:	4453      	add	r3, sl
 8008f6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f70:	9b02      	ldr	r3, [sp, #8]
 8008f72:	f003 0301 	and.w	r3, r3, #1
 8008f76:	462f      	mov	r7, r5
 8008f78:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f7a:	4605      	mov	r5, r0
 8008f7c:	9b07      	ldr	r3, [sp, #28]
 8008f7e:	4621      	mov	r1, r4
 8008f80:	3b01      	subs	r3, #1
 8008f82:	4648      	mov	r0, r9
 8008f84:	9300      	str	r3, [sp, #0]
 8008f86:	f7ff fa99 	bl	80084bc <quorem>
 8008f8a:	4639      	mov	r1, r7
 8008f8c:	9002      	str	r0, [sp, #8]
 8008f8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008f92:	4648      	mov	r0, r9
 8008f94:	f001 faea 	bl	800a56c <__mcmp>
 8008f98:	462a      	mov	r2, r5
 8008f9a:	9008      	str	r0, [sp, #32]
 8008f9c:	4621      	mov	r1, r4
 8008f9e:	4658      	mov	r0, fp
 8008fa0:	f001 fb00 	bl	800a5a4 <__mdiff>
 8008fa4:	68c2      	ldr	r2, [r0, #12]
 8008fa6:	4606      	mov	r6, r0
 8008fa8:	bb02      	cbnz	r2, 8008fec <_dtoa_r+0xa1c>
 8008faa:	4601      	mov	r1, r0
 8008fac:	4648      	mov	r0, r9
 8008fae:	f001 fadd 	bl	800a56c <__mcmp>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	4631      	mov	r1, r6
 8008fb6:	4658      	mov	r0, fp
 8008fb8:	920e      	str	r2, [sp, #56]	@ 0x38
 8008fba:	f001 f853 	bl	800a064 <_Bfree>
 8008fbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fc0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008fc2:	9e07      	ldr	r6, [sp, #28]
 8008fc4:	ea43 0102 	orr.w	r1, r3, r2
 8008fc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fca:	4319      	orrs	r1, r3
 8008fcc:	d110      	bne.n	8008ff0 <_dtoa_r+0xa20>
 8008fce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008fd2:	d029      	beq.n	8009028 <_dtoa_r+0xa58>
 8008fd4:	9b08      	ldr	r3, [sp, #32]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	dd02      	ble.n	8008fe0 <_dtoa_r+0xa10>
 8008fda:	9b02      	ldr	r3, [sp, #8]
 8008fdc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008fe0:	9b00      	ldr	r3, [sp, #0]
 8008fe2:	f883 8000 	strb.w	r8, [r3]
 8008fe6:	e63f      	b.n	8008c68 <_dtoa_r+0x698>
 8008fe8:	4628      	mov	r0, r5
 8008fea:	e7bb      	b.n	8008f64 <_dtoa_r+0x994>
 8008fec:	2201      	movs	r2, #1
 8008fee:	e7e1      	b.n	8008fb4 <_dtoa_r+0x9e4>
 8008ff0:	9b08      	ldr	r3, [sp, #32]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	db04      	blt.n	8009000 <_dtoa_r+0xa30>
 8008ff6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008ff8:	430b      	orrs	r3, r1
 8008ffa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008ffc:	430b      	orrs	r3, r1
 8008ffe:	d120      	bne.n	8009042 <_dtoa_r+0xa72>
 8009000:	2a00      	cmp	r2, #0
 8009002:	dded      	ble.n	8008fe0 <_dtoa_r+0xa10>
 8009004:	4649      	mov	r1, r9
 8009006:	2201      	movs	r2, #1
 8009008:	4658      	mov	r0, fp
 800900a:	f001 fa43 	bl	800a494 <__lshift>
 800900e:	4621      	mov	r1, r4
 8009010:	4681      	mov	r9, r0
 8009012:	f001 faab 	bl	800a56c <__mcmp>
 8009016:	2800      	cmp	r0, #0
 8009018:	dc03      	bgt.n	8009022 <_dtoa_r+0xa52>
 800901a:	d1e1      	bne.n	8008fe0 <_dtoa_r+0xa10>
 800901c:	f018 0f01 	tst.w	r8, #1
 8009020:	d0de      	beq.n	8008fe0 <_dtoa_r+0xa10>
 8009022:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009026:	d1d8      	bne.n	8008fda <_dtoa_r+0xa0a>
 8009028:	9a00      	ldr	r2, [sp, #0]
 800902a:	2339      	movs	r3, #57	@ 0x39
 800902c:	7013      	strb	r3, [r2, #0]
 800902e:	4633      	mov	r3, r6
 8009030:	461e      	mov	r6, r3
 8009032:	3b01      	subs	r3, #1
 8009034:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009038:	2a39      	cmp	r2, #57	@ 0x39
 800903a:	d052      	beq.n	80090e2 <_dtoa_r+0xb12>
 800903c:	3201      	adds	r2, #1
 800903e:	701a      	strb	r2, [r3, #0]
 8009040:	e612      	b.n	8008c68 <_dtoa_r+0x698>
 8009042:	2a00      	cmp	r2, #0
 8009044:	dd07      	ble.n	8009056 <_dtoa_r+0xa86>
 8009046:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800904a:	d0ed      	beq.n	8009028 <_dtoa_r+0xa58>
 800904c:	9a00      	ldr	r2, [sp, #0]
 800904e:	f108 0301 	add.w	r3, r8, #1
 8009052:	7013      	strb	r3, [r2, #0]
 8009054:	e608      	b.n	8008c68 <_dtoa_r+0x698>
 8009056:	9b07      	ldr	r3, [sp, #28]
 8009058:	9a07      	ldr	r2, [sp, #28]
 800905a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800905e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009060:	4293      	cmp	r3, r2
 8009062:	d028      	beq.n	80090b6 <_dtoa_r+0xae6>
 8009064:	4649      	mov	r1, r9
 8009066:	2300      	movs	r3, #0
 8009068:	220a      	movs	r2, #10
 800906a:	4658      	mov	r0, fp
 800906c:	f001 f81c 	bl	800a0a8 <__multadd>
 8009070:	42af      	cmp	r7, r5
 8009072:	4681      	mov	r9, r0
 8009074:	f04f 0300 	mov.w	r3, #0
 8009078:	f04f 020a 	mov.w	r2, #10
 800907c:	4639      	mov	r1, r7
 800907e:	4658      	mov	r0, fp
 8009080:	d107      	bne.n	8009092 <_dtoa_r+0xac2>
 8009082:	f001 f811 	bl	800a0a8 <__multadd>
 8009086:	4607      	mov	r7, r0
 8009088:	4605      	mov	r5, r0
 800908a:	9b07      	ldr	r3, [sp, #28]
 800908c:	3301      	adds	r3, #1
 800908e:	9307      	str	r3, [sp, #28]
 8009090:	e774      	b.n	8008f7c <_dtoa_r+0x9ac>
 8009092:	f001 f809 	bl	800a0a8 <__multadd>
 8009096:	4629      	mov	r1, r5
 8009098:	4607      	mov	r7, r0
 800909a:	2300      	movs	r3, #0
 800909c:	220a      	movs	r2, #10
 800909e:	4658      	mov	r0, fp
 80090a0:	f001 f802 	bl	800a0a8 <__multadd>
 80090a4:	4605      	mov	r5, r0
 80090a6:	e7f0      	b.n	800908a <_dtoa_r+0xaba>
 80090a8:	9b00      	ldr	r3, [sp, #0]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	bfcc      	ite	gt
 80090ae:	461e      	movgt	r6, r3
 80090b0:	2601      	movle	r6, #1
 80090b2:	4456      	add	r6, sl
 80090b4:	2700      	movs	r7, #0
 80090b6:	4649      	mov	r1, r9
 80090b8:	2201      	movs	r2, #1
 80090ba:	4658      	mov	r0, fp
 80090bc:	f001 f9ea 	bl	800a494 <__lshift>
 80090c0:	4621      	mov	r1, r4
 80090c2:	4681      	mov	r9, r0
 80090c4:	f001 fa52 	bl	800a56c <__mcmp>
 80090c8:	2800      	cmp	r0, #0
 80090ca:	dcb0      	bgt.n	800902e <_dtoa_r+0xa5e>
 80090cc:	d102      	bne.n	80090d4 <_dtoa_r+0xb04>
 80090ce:	f018 0f01 	tst.w	r8, #1
 80090d2:	d1ac      	bne.n	800902e <_dtoa_r+0xa5e>
 80090d4:	4633      	mov	r3, r6
 80090d6:	461e      	mov	r6, r3
 80090d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090dc:	2a30      	cmp	r2, #48	@ 0x30
 80090de:	d0fa      	beq.n	80090d6 <_dtoa_r+0xb06>
 80090e0:	e5c2      	b.n	8008c68 <_dtoa_r+0x698>
 80090e2:	459a      	cmp	sl, r3
 80090e4:	d1a4      	bne.n	8009030 <_dtoa_r+0xa60>
 80090e6:	9b04      	ldr	r3, [sp, #16]
 80090e8:	3301      	adds	r3, #1
 80090ea:	9304      	str	r3, [sp, #16]
 80090ec:	2331      	movs	r3, #49	@ 0x31
 80090ee:	f88a 3000 	strb.w	r3, [sl]
 80090f2:	e5b9      	b.n	8008c68 <_dtoa_r+0x698>
 80090f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80090f6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009154 <_dtoa_r+0xb84>
 80090fa:	b11b      	cbz	r3, 8009104 <_dtoa_r+0xb34>
 80090fc:	f10a 0308 	add.w	r3, sl, #8
 8009100:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009102:	6013      	str	r3, [r2, #0]
 8009104:	4650      	mov	r0, sl
 8009106:	b019      	add	sp, #100	@ 0x64
 8009108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800910c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800910e:	2b01      	cmp	r3, #1
 8009110:	f77f ae37 	ble.w	8008d82 <_dtoa_r+0x7b2>
 8009114:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009116:	930a      	str	r3, [sp, #40]	@ 0x28
 8009118:	2001      	movs	r0, #1
 800911a:	e655      	b.n	8008dc8 <_dtoa_r+0x7f8>
 800911c:	9b00      	ldr	r3, [sp, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	f77f aed6 	ble.w	8008ed0 <_dtoa_r+0x900>
 8009124:	4656      	mov	r6, sl
 8009126:	4621      	mov	r1, r4
 8009128:	4648      	mov	r0, r9
 800912a:	f7ff f9c7 	bl	80084bc <quorem>
 800912e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009132:	f806 8b01 	strb.w	r8, [r6], #1
 8009136:	9b00      	ldr	r3, [sp, #0]
 8009138:	eba6 020a 	sub.w	r2, r6, sl
 800913c:	4293      	cmp	r3, r2
 800913e:	ddb3      	ble.n	80090a8 <_dtoa_r+0xad8>
 8009140:	4649      	mov	r1, r9
 8009142:	2300      	movs	r3, #0
 8009144:	220a      	movs	r2, #10
 8009146:	4658      	mov	r0, fp
 8009148:	f000 ffae 	bl	800a0a8 <__multadd>
 800914c:	4681      	mov	r9, r0
 800914e:	e7ea      	b.n	8009126 <_dtoa_r+0xb56>
 8009150:	0800b29d 	.word	0x0800b29d
 8009154:	0800b221 	.word	0x0800b221

08009158 <rshift>:
 8009158:	6903      	ldr	r3, [r0, #16]
 800915a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800915e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009162:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009166:	f100 0414 	add.w	r4, r0, #20
 800916a:	dd45      	ble.n	80091f8 <rshift+0xa0>
 800916c:	f011 011f 	ands.w	r1, r1, #31
 8009170:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009174:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009178:	d10c      	bne.n	8009194 <rshift+0x3c>
 800917a:	f100 0710 	add.w	r7, r0, #16
 800917e:	4629      	mov	r1, r5
 8009180:	42b1      	cmp	r1, r6
 8009182:	d334      	bcc.n	80091ee <rshift+0x96>
 8009184:	1a9b      	subs	r3, r3, r2
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	1eea      	subs	r2, r5, #3
 800918a:	4296      	cmp	r6, r2
 800918c:	bf38      	it	cc
 800918e:	2300      	movcc	r3, #0
 8009190:	4423      	add	r3, r4
 8009192:	e015      	b.n	80091c0 <rshift+0x68>
 8009194:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009198:	f1c1 0820 	rsb	r8, r1, #32
 800919c:	40cf      	lsrs	r7, r1
 800919e:	f105 0e04 	add.w	lr, r5, #4
 80091a2:	46a1      	mov	r9, r4
 80091a4:	4576      	cmp	r6, lr
 80091a6:	46f4      	mov	ip, lr
 80091a8:	d815      	bhi.n	80091d6 <rshift+0x7e>
 80091aa:	1a9a      	subs	r2, r3, r2
 80091ac:	0092      	lsls	r2, r2, #2
 80091ae:	3a04      	subs	r2, #4
 80091b0:	3501      	adds	r5, #1
 80091b2:	42ae      	cmp	r6, r5
 80091b4:	bf38      	it	cc
 80091b6:	2200      	movcc	r2, #0
 80091b8:	18a3      	adds	r3, r4, r2
 80091ba:	50a7      	str	r7, [r4, r2]
 80091bc:	b107      	cbz	r7, 80091c0 <rshift+0x68>
 80091be:	3304      	adds	r3, #4
 80091c0:	1b1a      	subs	r2, r3, r4
 80091c2:	42a3      	cmp	r3, r4
 80091c4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80091c8:	bf08      	it	eq
 80091ca:	2300      	moveq	r3, #0
 80091cc:	6102      	str	r2, [r0, #16]
 80091ce:	bf08      	it	eq
 80091d0:	6143      	streq	r3, [r0, #20]
 80091d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80091d6:	f8dc c000 	ldr.w	ip, [ip]
 80091da:	fa0c fc08 	lsl.w	ip, ip, r8
 80091de:	ea4c 0707 	orr.w	r7, ip, r7
 80091e2:	f849 7b04 	str.w	r7, [r9], #4
 80091e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80091ea:	40cf      	lsrs	r7, r1
 80091ec:	e7da      	b.n	80091a4 <rshift+0x4c>
 80091ee:	f851 cb04 	ldr.w	ip, [r1], #4
 80091f2:	f847 cf04 	str.w	ip, [r7, #4]!
 80091f6:	e7c3      	b.n	8009180 <rshift+0x28>
 80091f8:	4623      	mov	r3, r4
 80091fa:	e7e1      	b.n	80091c0 <rshift+0x68>

080091fc <__hexdig_fun>:
 80091fc:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009200:	2b09      	cmp	r3, #9
 8009202:	d802      	bhi.n	800920a <__hexdig_fun+0xe>
 8009204:	3820      	subs	r0, #32
 8009206:	b2c0      	uxtb	r0, r0
 8009208:	4770      	bx	lr
 800920a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800920e:	2b05      	cmp	r3, #5
 8009210:	d801      	bhi.n	8009216 <__hexdig_fun+0x1a>
 8009212:	3847      	subs	r0, #71	@ 0x47
 8009214:	e7f7      	b.n	8009206 <__hexdig_fun+0xa>
 8009216:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800921a:	2b05      	cmp	r3, #5
 800921c:	d801      	bhi.n	8009222 <__hexdig_fun+0x26>
 800921e:	3827      	subs	r0, #39	@ 0x27
 8009220:	e7f1      	b.n	8009206 <__hexdig_fun+0xa>
 8009222:	2000      	movs	r0, #0
 8009224:	4770      	bx	lr
	...

08009228 <__gethex>:
 8009228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800922c:	b085      	sub	sp, #20
 800922e:	468a      	mov	sl, r1
 8009230:	9302      	str	r3, [sp, #8]
 8009232:	680b      	ldr	r3, [r1, #0]
 8009234:	9001      	str	r0, [sp, #4]
 8009236:	4690      	mov	r8, r2
 8009238:	1c9c      	adds	r4, r3, #2
 800923a:	46a1      	mov	r9, r4
 800923c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009240:	2830      	cmp	r0, #48	@ 0x30
 8009242:	d0fa      	beq.n	800923a <__gethex+0x12>
 8009244:	eba9 0303 	sub.w	r3, r9, r3
 8009248:	f1a3 0b02 	sub.w	fp, r3, #2
 800924c:	f7ff ffd6 	bl	80091fc <__hexdig_fun>
 8009250:	4605      	mov	r5, r0
 8009252:	2800      	cmp	r0, #0
 8009254:	d168      	bne.n	8009328 <__gethex+0x100>
 8009256:	49a0      	ldr	r1, [pc, #640]	@ (80094d8 <__gethex+0x2b0>)
 8009258:	2201      	movs	r2, #1
 800925a:	4648      	mov	r0, r9
 800925c:	f7ff f8c4 	bl	80083e8 <strncmp>
 8009260:	4607      	mov	r7, r0
 8009262:	2800      	cmp	r0, #0
 8009264:	d167      	bne.n	8009336 <__gethex+0x10e>
 8009266:	f899 0001 	ldrb.w	r0, [r9, #1]
 800926a:	4626      	mov	r6, r4
 800926c:	f7ff ffc6 	bl	80091fc <__hexdig_fun>
 8009270:	2800      	cmp	r0, #0
 8009272:	d062      	beq.n	800933a <__gethex+0x112>
 8009274:	4623      	mov	r3, r4
 8009276:	7818      	ldrb	r0, [r3, #0]
 8009278:	2830      	cmp	r0, #48	@ 0x30
 800927a:	4699      	mov	r9, r3
 800927c:	f103 0301 	add.w	r3, r3, #1
 8009280:	d0f9      	beq.n	8009276 <__gethex+0x4e>
 8009282:	f7ff ffbb 	bl	80091fc <__hexdig_fun>
 8009286:	fab0 f580 	clz	r5, r0
 800928a:	096d      	lsrs	r5, r5, #5
 800928c:	f04f 0b01 	mov.w	fp, #1
 8009290:	464a      	mov	r2, r9
 8009292:	4616      	mov	r6, r2
 8009294:	3201      	adds	r2, #1
 8009296:	7830      	ldrb	r0, [r6, #0]
 8009298:	f7ff ffb0 	bl	80091fc <__hexdig_fun>
 800929c:	2800      	cmp	r0, #0
 800929e:	d1f8      	bne.n	8009292 <__gethex+0x6a>
 80092a0:	498d      	ldr	r1, [pc, #564]	@ (80094d8 <__gethex+0x2b0>)
 80092a2:	2201      	movs	r2, #1
 80092a4:	4630      	mov	r0, r6
 80092a6:	f7ff f89f 	bl	80083e8 <strncmp>
 80092aa:	2800      	cmp	r0, #0
 80092ac:	d13f      	bne.n	800932e <__gethex+0x106>
 80092ae:	b944      	cbnz	r4, 80092c2 <__gethex+0x9a>
 80092b0:	1c74      	adds	r4, r6, #1
 80092b2:	4622      	mov	r2, r4
 80092b4:	4616      	mov	r6, r2
 80092b6:	3201      	adds	r2, #1
 80092b8:	7830      	ldrb	r0, [r6, #0]
 80092ba:	f7ff ff9f 	bl	80091fc <__hexdig_fun>
 80092be:	2800      	cmp	r0, #0
 80092c0:	d1f8      	bne.n	80092b4 <__gethex+0x8c>
 80092c2:	1ba4      	subs	r4, r4, r6
 80092c4:	00a7      	lsls	r7, r4, #2
 80092c6:	7833      	ldrb	r3, [r6, #0]
 80092c8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80092cc:	2b50      	cmp	r3, #80	@ 0x50
 80092ce:	d13e      	bne.n	800934e <__gethex+0x126>
 80092d0:	7873      	ldrb	r3, [r6, #1]
 80092d2:	2b2b      	cmp	r3, #43	@ 0x2b
 80092d4:	d033      	beq.n	800933e <__gethex+0x116>
 80092d6:	2b2d      	cmp	r3, #45	@ 0x2d
 80092d8:	d034      	beq.n	8009344 <__gethex+0x11c>
 80092da:	1c71      	adds	r1, r6, #1
 80092dc:	2400      	movs	r4, #0
 80092de:	7808      	ldrb	r0, [r1, #0]
 80092e0:	f7ff ff8c 	bl	80091fc <__hexdig_fun>
 80092e4:	1e43      	subs	r3, r0, #1
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	2b18      	cmp	r3, #24
 80092ea:	d830      	bhi.n	800934e <__gethex+0x126>
 80092ec:	f1a0 0210 	sub.w	r2, r0, #16
 80092f0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80092f4:	f7ff ff82 	bl	80091fc <__hexdig_fun>
 80092f8:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 80092fc:	fa5f fc8c 	uxtb.w	ip, ip
 8009300:	f1bc 0f18 	cmp.w	ip, #24
 8009304:	f04f 030a 	mov.w	r3, #10
 8009308:	d91e      	bls.n	8009348 <__gethex+0x120>
 800930a:	b104      	cbz	r4, 800930e <__gethex+0xe6>
 800930c:	4252      	negs	r2, r2
 800930e:	4417      	add	r7, r2
 8009310:	f8ca 1000 	str.w	r1, [sl]
 8009314:	b1ed      	cbz	r5, 8009352 <__gethex+0x12a>
 8009316:	f1bb 0f00 	cmp.w	fp, #0
 800931a:	bf0c      	ite	eq
 800931c:	2506      	moveq	r5, #6
 800931e:	2500      	movne	r5, #0
 8009320:	4628      	mov	r0, r5
 8009322:	b005      	add	sp, #20
 8009324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009328:	2500      	movs	r5, #0
 800932a:	462c      	mov	r4, r5
 800932c:	e7b0      	b.n	8009290 <__gethex+0x68>
 800932e:	2c00      	cmp	r4, #0
 8009330:	d1c7      	bne.n	80092c2 <__gethex+0x9a>
 8009332:	4627      	mov	r7, r4
 8009334:	e7c7      	b.n	80092c6 <__gethex+0x9e>
 8009336:	464e      	mov	r6, r9
 8009338:	462f      	mov	r7, r5
 800933a:	2501      	movs	r5, #1
 800933c:	e7c3      	b.n	80092c6 <__gethex+0x9e>
 800933e:	2400      	movs	r4, #0
 8009340:	1cb1      	adds	r1, r6, #2
 8009342:	e7cc      	b.n	80092de <__gethex+0xb6>
 8009344:	2401      	movs	r4, #1
 8009346:	e7fb      	b.n	8009340 <__gethex+0x118>
 8009348:	fb03 0002 	mla	r0, r3, r2, r0
 800934c:	e7ce      	b.n	80092ec <__gethex+0xc4>
 800934e:	4631      	mov	r1, r6
 8009350:	e7de      	b.n	8009310 <__gethex+0xe8>
 8009352:	eba6 0309 	sub.w	r3, r6, r9
 8009356:	3b01      	subs	r3, #1
 8009358:	4629      	mov	r1, r5
 800935a:	2b07      	cmp	r3, #7
 800935c:	dc0a      	bgt.n	8009374 <__gethex+0x14c>
 800935e:	9801      	ldr	r0, [sp, #4]
 8009360:	f000 fe40 	bl	8009fe4 <_Balloc>
 8009364:	4604      	mov	r4, r0
 8009366:	b940      	cbnz	r0, 800937a <__gethex+0x152>
 8009368:	4b5c      	ldr	r3, [pc, #368]	@ (80094dc <__gethex+0x2b4>)
 800936a:	4602      	mov	r2, r0
 800936c:	21e4      	movs	r1, #228	@ 0xe4
 800936e:	485c      	ldr	r0, [pc, #368]	@ (80094e0 <__gethex+0x2b8>)
 8009370:	f001 fcf2 	bl	800ad58 <__assert_func>
 8009374:	3101      	adds	r1, #1
 8009376:	105b      	asrs	r3, r3, #1
 8009378:	e7ef      	b.n	800935a <__gethex+0x132>
 800937a:	f100 0a14 	add.w	sl, r0, #20
 800937e:	2300      	movs	r3, #0
 8009380:	4655      	mov	r5, sl
 8009382:	469b      	mov	fp, r3
 8009384:	45b1      	cmp	r9, r6
 8009386:	d337      	bcc.n	80093f8 <__gethex+0x1d0>
 8009388:	f845 bb04 	str.w	fp, [r5], #4
 800938c:	eba5 050a 	sub.w	r5, r5, sl
 8009390:	10ad      	asrs	r5, r5, #2
 8009392:	6125      	str	r5, [r4, #16]
 8009394:	4658      	mov	r0, fp
 8009396:	f000 ff17 	bl	800a1c8 <__hi0bits>
 800939a:	016d      	lsls	r5, r5, #5
 800939c:	f8d8 6000 	ldr.w	r6, [r8]
 80093a0:	1a2d      	subs	r5, r5, r0
 80093a2:	42b5      	cmp	r5, r6
 80093a4:	dd54      	ble.n	8009450 <__gethex+0x228>
 80093a6:	1bad      	subs	r5, r5, r6
 80093a8:	4629      	mov	r1, r5
 80093aa:	4620      	mov	r0, r4
 80093ac:	f001 faab 	bl	800a906 <__any_on>
 80093b0:	4681      	mov	r9, r0
 80093b2:	b178      	cbz	r0, 80093d4 <__gethex+0x1ac>
 80093b4:	1e6b      	subs	r3, r5, #1
 80093b6:	1159      	asrs	r1, r3, #5
 80093b8:	f003 021f 	and.w	r2, r3, #31
 80093bc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80093c0:	f04f 0901 	mov.w	r9, #1
 80093c4:	fa09 f202 	lsl.w	r2, r9, r2
 80093c8:	420a      	tst	r2, r1
 80093ca:	d003      	beq.n	80093d4 <__gethex+0x1ac>
 80093cc:	454b      	cmp	r3, r9
 80093ce:	dc36      	bgt.n	800943e <__gethex+0x216>
 80093d0:	f04f 0902 	mov.w	r9, #2
 80093d4:	4629      	mov	r1, r5
 80093d6:	4620      	mov	r0, r4
 80093d8:	f7ff febe 	bl	8009158 <rshift>
 80093dc:	442f      	add	r7, r5
 80093de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80093e2:	42bb      	cmp	r3, r7
 80093e4:	da42      	bge.n	800946c <__gethex+0x244>
 80093e6:	9801      	ldr	r0, [sp, #4]
 80093e8:	4621      	mov	r1, r4
 80093ea:	f000 fe3b 	bl	800a064 <_Bfree>
 80093ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80093f0:	2300      	movs	r3, #0
 80093f2:	6013      	str	r3, [r2, #0]
 80093f4:	25a3      	movs	r5, #163	@ 0xa3
 80093f6:	e793      	b.n	8009320 <__gethex+0xf8>
 80093f8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80093fc:	2a2e      	cmp	r2, #46	@ 0x2e
 80093fe:	d012      	beq.n	8009426 <__gethex+0x1fe>
 8009400:	2b20      	cmp	r3, #32
 8009402:	d104      	bne.n	800940e <__gethex+0x1e6>
 8009404:	f845 bb04 	str.w	fp, [r5], #4
 8009408:	f04f 0b00 	mov.w	fp, #0
 800940c:	465b      	mov	r3, fp
 800940e:	7830      	ldrb	r0, [r6, #0]
 8009410:	9303      	str	r3, [sp, #12]
 8009412:	f7ff fef3 	bl	80091fc <__hexdig_fun>
 8009416:	9b03      	ldr	r3, [sp, #12]
 8009418:	f000 000f 	and.w	r0, r0, #15
 800941c:	4098      	lsls	r0, r3
 800941e:	ea4b 0b00 	orr.w	fp, fp, r0
 8009422:	3304      	adds	r3, #4
 8009424:	e7ae      	b.n	8009384 <__gethex+0x15c>
 8009426:	45b1      	cmp	r9, r6
 8009428:	d8ea      	bhi.n	8009400 <__gethex+0x1d8>
 800942a:	492b      	ldr	r1, [pc, #172]	@ (80094d8 <__gethex+0x2b0>)
 800942c:	9303      	str	r3, [sp, #12]
 800942e:	2201      	movs	r2, #1
 8009430:	4630      	mov	r0, r6
 8009432:	f7fe ffd9 	bl	80083e8 <strncmp>
 8009436:	9b03      	ldr	r3, [sp, #12]
 8009438:	2800      	cmp	r0, #0
 800943a:	d1e1      	bne.n	8009400 <__gethex+0x1d8>
 800943c:	e7a2      	b.n	8009384 <__gethex+0x15c>
 800943e:	1ea9      	subs	r1, r5, #2
 8009440:	4620      	mov	r0, r4
 8009442:	f001 fa60 	bl	800a906 <__any_on>
 8009446:	2800      	cmp	r0, #0
 8009448:	d0c2      	beq.n	80093d0 <__gethex+0x1a8>
 800944a:	f04f 0903 	mov.w	r9, #3
 800944e:	e7c1      	b.n	80093d4 <__gethex+0x1ac>
 8009450:	da09      	bge.n	8009466 <__gethex+0x23e>
 8009452:	1b75      	subs	r5, r6, r5
 8009454:	4621      	mov	r1, r4
 8009456:	9801      	ldr	r0, [sp, #4]
 8009458:	462a      	mov	r2, r5
 800945a:	f001 f81b 	bl	800a494 <__lshift>
 800945e:	1b7f      	subs	r7, r7, r5
 8009460:	4604      	mov	r4, r0
 8009462:	f100 0a14 	add.w	sl, r0, #20
 8009466:	f04f 0900 	mov.w	r9, #0
 800946a:	e7b8      	b.n	80093de <__gethex+0x1b6>
 800946c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009470:	42bd      	cmp	r5, r7
 8009472:	dd6f      	ble.n	8009554 <__gethex+0x32c>
 8009474:	1bed      	subs	r5, r5, r7
 8009476:	42ae      	cmp	r6, r5
 8009478:	dc34      	bgt.n	80094e4 <__gethex+0x2bc>
 800947a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800947e:	2b02      	cmp	r3, #2
 8009480:	d022      	beq.n	80094c8 <__gethex+0x2a0>
 8009482:	2b03      	cmp	r3, #3
 8009484:	d024      	beq.n	80094d0 <__gethex+0x2a8>
 8009486:	2b01      	cmp	r3, #1
 8009488:	d115      	bne.n	80094b6 <__gethex+0x28e>
 800948a:	42ae      	cmp	r6, r5
 800948c:	d113      	bne.n	80094b6 <__gethex+0x28e>
 800948e:	2e01      	cmp	r6, #1
 8009490:	d10b      	bne.n	80094aa <__gethex+0x282>
 8009492:	9a02      	ldr	r2, [sp, #8]
 8009494:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009498:	6013      	str	r3, [r2, #0]
 800949a:	2301      	movs	r3, #1
 800949c:	6123      	str	r3, [r4, #16]
 800949e:	f8ca 3000 	str.w	r3, [sl]
 80094a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094a4:	2562      	movs	r5, #98	@ 0x62
 80094a6:	601c      	str	r4, [r3, #0]
 80094a8:	e73a      	b.n	8009320 <__gethex+0xf8>
 80094aa:	1e71      	subs	r1, r6, #1
 80094ac:	4620      	mov	r0, r4
 80094ae:	f001 fa2a 	bl	800a906 <__any_on>
 80094b2:	2800      	cmp	r0, #0
 80094b4:	d1ed      	bne.n	8009492 <__gethex+0x26a>
 80094b6:	9801      	ldr	r0, [sp, #4]
 80094b8:	4621      	mov	r1, r4
 80094ba:	f000 fdd3 	bl	800a064 <_Bfree>
 80094be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80094c0:	2300      	movs	r3, #0
 80094c2:	6013      	str	r3, [r2, #0]
 80094c4:	2550      	movs	r5, #80	@ 0x50
 80094c6:	e72b      	b.n	8009320 <__gethex+0xf8>
 80094c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d1f3      	bne.n	80094b6 <__gethex+0x28e>
 80094ce:	e7e0      	b.n	8009492 <__gethex+0x26a>
 80094d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d1dd      	bne.n	8009492 <__gethex+0x26a>
 80094d6:	e7ee      	b.n	80094b6 <__gethex+0x28e>
 80094d8:	0800b0c1 	.word	0x0800b0c1
 80094dc:	0800b29d 	.word	0x0800b29d
 80094e0:	0800b2ae 	.word	0x0800b2ae
 80094e4:	1e6f      	subs	r7, r5, #1
 80094e6:	f1b9 0f00 	cmp.w	r9, #0
 80094ea:	d130      	bne.n	800954e <__gethex+0x326>
 80094ec:	b127      	cbz	r7, 80094f8 <__gethex+0x2d0>
 80094ee:	4639      	mov	r1, r7
 80094f0:	4620      	mov	r0, r4
 80094f2:	f001 fa08 	bl	800a906 <__any_on>
 80094f6:	4681      	mov	r9, r0
 80094f8:	117a      	asrs	r2, r7, #5
 80094fa:	2301      	movs	r3, #1
 80094fc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009500:	f007 071f 	and.w	r7, r7, #31
 8009504:	40bb      	lsls	r3, r7
 8009506:	4213      	tst	r3, r2
 8009508:	4629      	mov	r1, r5
 800950a:	4620      	mov	r0, r4
 800950c:	bf18      	it	ne
 800950e:	f049 0902 	orrne.w	r9, r9, #2
 8009512:	f7ff fe21 	bl	8009158 <rshift>
 8009516:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800951a:	1b76      	subs	r6, r6, r5
 800951c:	2502      	movs	r5, #2
 800951e:	f1b9 0f00 	cmp.w	r9, #0
 8009522:	d047      	beq.n	80095b4 <__gethex+0x38c>
 8009524:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009528:	2b02      	cmp	r3, #2
 800952a:	d015      	beq.n	8009558 <__gethex+0x330>
 800952c:	2b03      	cmp	r3, #3
 800952e:	d017      	beq.n	8009560 <__gethex+0x338>
 8009530:	2b01      	cmp	r3, #1
 8009532:	d109      	bne.n	8009548 <__gethex+0x320>
 8009534:	f019 0f02 	tst.w	r9, #2
 8009538:	d006      	beq.n	8009548 <__gethex+0x320>
 800953a:	f8da 3000 	ldr.w	r3, [sl]
 800953e:	ea49 0903 	orr.w	r9, r9, r3
 8009542:	f019 0f01 	tst.w	r9, #1
 8009546:	d10e      	bne.n	8009566 <__gethex+0x33e>
 8009548:	f045 0510 	orr.w	r5, r5, #16
 800954c:	e032      	b.n	80095b4 <__gethex+0x38c>
 800954e:	f04f 0901 	mov.w	r9, #1
 8009552:	e7d1      	b.n	80094f8 <__gethex+0x2d0>
 8009554:	2501      	movs	r5, #1
 8009556:	e7e2      	b.n	800951e <__gethex+0x2f6>
 8009558:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800955a:	f1c3 0301 	rsb	r3, r3, #1
 800955e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009560:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009562:	2b00      	cmp	r3, #0
 8009564:	d0f0      	beq.n	8009548 <__gethex+0x320>
 8009566:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800956a:	f104 0314 	add.w	r3, r4, #20
 800956e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009572:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009576:	f04f 0c00 	mov.w	ip, #0
 800957a:	4618      	mov	r0, r3
 800957c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009580:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8009584:	d01b      	beq.n	80095be <__gethex+0x396>
 8009586:	3201      	adds	r2, #1
 8009588:	6002      	str	r2, [r0, #0]
 800958a:	2d02      	cmp	r5, #2
 800958c:	f104 0314 	add.w	r3, r4, #20
 8009590:	d13c      	bne.n	800960c <__gethex+0x3e4>
 8009592:	f8d8 2000 	ldr.w	r2, [r8]
 8009596:	3a01      	subs	r2, #1
 8009598:	42b2      	cmp	r2, r6
 800959a:	d109      	bne.n	80095b0 <__gethex+0x388>
 800959c:	1171      	asrs	r1, r6, #5
 800959e:	2201      	movs	r2, #1
 80095a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80095a4:	f006 061f 	and.w	r6, r6, #31
 80095a8:	fa02 f606 	lsl.w	r6, r2, r6
 80095ac:	421e      	tst	r6, r3
 80095ae:	d13a      	bne.n	8009626 <__gethex+0x3fe>
 80095b0:	f045 0520 	orr.w	r5, r5, #32
 80095b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095b6:	601c      	str	r4, [r3, #0]
 80095b8:	9b02      	ldr	r3, [sp, #8]
 80095ba:	601f      	str	r7, [r3, #0]
 80095bc:	e6b0      	b.n	8009320 <__gethex+0xf8>
 80095be:	4299      	cmp	r1, r3
 80095c0:	f843 cc04 	str.w	ip, [r3, #-4]
 80095c4:	d8d9      	bhi.n	800957a <__gethex+0x352>
 80095c6:	68a3      	ldr	r3, [r4, #8]
 80095c8:	459b      	cmp	fp, r3
 80095ca:	db17      	blt.n	80095fc <__gethex+0x3d4>
 80095cc:	6861      	ldr	r1, [r4, #4]
 80095ce:	9801      	ldr	r0, [sp, #4]
 80095d0:	3101      	adds	r1, #1
 80095d2:	f000 fd07 	bl	8009fe4 <_Balloc>
 80095d6:	4681      	mov	r9, r0
 80095d8:	b918      	cbnz	r0, 80095e2 <__gethex+0x3ba>
 80095da:	4b1a      	ldr	r3, [pc, #104]	@ (8009644 <__gethex+0x41c>)
 80095dc:	4602      	mov	r2, r0
 80095de:	2184      	movs	r1, #132	@ 0x84
 80095e0:	e6c5      	b.n	800936e <__gethex+0x146>
 80095e2:	6922      	ldr	r2, [r4, #16]
 80095e4:	3202      	adds	r2, #2
 80095e6:	f104 010c 	add.w	r1, r4, #12
 80095ea:	0092      	lsls	r2, r2, #2
 80095ec:	300c      	adds	r0, #12
 80095ee:	f7fe ff46 	bl	800847e <memcpy>
 80095f2:	4621      	mov	r1, r4
 80095f4:	9801      	ldr	r0, [sp, #4]
 80095f6:	f000 fd35 	bl	800a064 <_Bfree>
 80095fa:	464c      	mov	r4, r9
 80095fc:	6923      	ldr	r3, [r4, #16]
 80095fe:	1c5a      	adds	r2, r3, #1
 8009600:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009604:	6122      	str	r2, [r4, #16]
 8009606:	2201      	movs	r2, #1
 8009608:	615a      	str	r2, [r3, #20]
 800960a:	e7be      	b.n	800958a <__gethex+0x362>
 800960c:	6922      	ldr	r2, [r4, #16]
 800960e:	455a      	cmp	r2, fp
 8009610:	dd0b      	ble.n	800962a <__gethex+0x402>
 8009612:	2101      	movs	r1, #1
 8009614:	4620      	mov	r0, r4
 8009616:	f7ff fd9f 	bl	8009158 <rshift>
 800961a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800961e:	3701      	adds	r7, #1
 8009620:	42bb      	cmp	r3, r7
 8009622:	f6ff aee0 	blt.w	80093e6 <__gethex+0x1be>
 8009626:	2501      	movs	r5, #1
 8009628:	e7c2      	b.n	80095b0 <__gethex+0x388>
 800962a:	f016 061f 	ands.w	r6, r6, #31
 800962e:	d0fa      	beq.n	8009626 <__gethex+0x3fe>
 8009630:	4453      	add	r3, sl
 8009632:	f1c6 0620 	rsb	r6, r6, #32
 8009636:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800963a:	f000 fdc5 	bl	800a1c8 <__hi0bits>
 800963e:	42b0      	cmp	r0, r6
 8009640:	dbe7      	blt.n	8009612 <__gethex+0x3ea>
 8009642:	e7f0      	b.n	8009626 <__gethex+0x3fe>
 8009644:	0800b29d 	.word	0x0800b29d

08009648 <L_shift>:
 8009648:	f1c2 0208 	rsb	r2, r2, #8
 800964c:	0092      	lsls	r2, r2, #2
 800964e:	b570      	push	{r4, r5, r6, lr}
 8009650:	f1c2 0620 	rsb	r6, r2, #32
 8009654:	6843      	ldr	r3, [r0, #4]
 8009656:	6804      	ldr	r4, [r0, #0]
 8009658:	fa03 f506 	lsl.w	r5, r3, r6
 800965c:	432c      	orrs	r4, r5
 800965e:	40d3      	lsrs	r3, r2
 8009660:	6004      	str	r4, [r0, #0]
 8009662:	f840 3f04 	str.w	r3, [r0, #4]!
 8009666:	4288      	cmp	r0, r1
 8009668:	d3f4      	bcc.n	8009654 <L_shift+0xc>
 800966a:	bd70      	pop	{r4, r5, r6, pc}

0800966c <__match>:
 800966c:	b530      	push	{r4, r5, lr}
 800966e:	6803      	ldr	r3, [r0, #0]
 8009670:	3301      	adds	r3, #1
 8009672:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009676:	b914      	cbnz	r4, 800967e <__match+0x12>
 8009678:	6003      	str	r3, [r0, #0]
 800967a:	2001      	movs	r0, #1
 800967c:	bd30      	pop	{r4, r5, pc}
 800967e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009682:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009686:	2d19      	cmp	r5, #25
 8009688:	bf98      	it	ls
 800968a:	3220      	addls	r2, #32
 800968c:	42a2      	cmp	r2, r4
 800968e:	d0f0      	beq.n	8009672 <__match+0x6>
 8009690:	2000      	movs	r0, #0
 8009692:	e7f3      	b.n	800967c <__match+0x10>

08009694 <__hexnan>:
 8009694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009698:	680b      	ldr	r3, [r1, #0]
 800969a:	6801      	ldr	r1, [r0, #0]
 800969c:	115e      	asrs	r6, r3, #5
 800969e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80096a2:	f013 031f 	ands.w	r3, r3, #31
 80096a6:	b087      	sub	sp, #28
 80096a8:	bf18      	it	ne
 80096aa:	3604      	addne	r6, #4
 80096ac:	2500      	movs	r5, #0
 80096ae:	1f37      	subs	r7, r6, #4
 80096b0:	4682      	mov	sl, r0
 80096b2:	4690      	mov	r8, r2
 80096b4:	9301      	str	r3, [sp, #4]
 80096b6:	f846 5c04 	str.w	r5, [r6, #-4]
 80096ba:	46b9      	mov	r9, r7
 80096bc:	463c      	mov	r4, r7
 80096be:	9502      	str	r5, [sp, #8]
 80096c0:	46ab      	mov	fp, r5
 80096c2:	784a      	ldrb	r2, [r1, #1]
 80096c4:	1c4b      	adds	r3, r1, #1
 80096c6:	9303      	str	r3, [sp, #12]
 80096c8:	b342      	cbz	r2, 800971c <__hexnan+0x88>
 80096ca:	4610      	mov	r0, r2
 80096cc:	9105      	str	r1, [sp, #20]
 80096ce:	9204      	str	r2, [sp, #16]
 80096d0:	f7ff fd94 	bl	80091fc <__hexdig_fun>
 80096d4:	2800      	cmp	r0, #0
 80096d6:	d151      	bne.n	800977c <__hexnan+0xe8>
 80096d8:	9a04      	ldr	r2, [sp, #16]
 80096da:	9905      	ldr	r1, [sp, #20]
 80096dc:	2a20      	cmp	r2, #32
 80096de:	d818      	bhi.n	8009712 <__hexnan+0x7e>
 80096e0:	9b02      	ldr	r3, [sp, #8]
 80096e2:	459b      	cmp	fp, r3
 80096e4:	dd13      	ble.n	800970e <__hexnan+0x7a>
 80096e6:	454c      	cmp	r4, r9
 80096e8:	d206      	bcs.n	80096f8 <__hexnan+0x64>
 80096ea:	2d07      	cmp	r5, #7
 80096ec:	dc04      	bgt.n	80096f8 <__hexnan+0x64>
 80096ee:	462a      	mov	r2, r5
 80096f0:	4649      	mov	r1, r9
 80096f2:	4620      	mov	r0, r4
 80096f4:	f7ff ffa8 	bl	8009648 <L_shift>
 80096f8:	4544      	cmp	r4, r8
 80096fa:	d952      	bls.n	80097a2 <__hexnan+0x10e>
 80096fc:	2300      	movs	r3, #0
 80096fe:	f1a4 0904 	sub.w	r9, r4, #4
 8009702:	f844 3c04 	str.w	r3, [r4, #-4]
 8009706:	f8cd b008 	str.w	fp, [sp, #8]
 800970a:	464c      	mov	r4, r9
 800970c:	461d      	mov	r5, r3
 800970e:	9903      	ldr	r1, [sp, #12]
 8009710:	e7d7      	b.n	80096c2 <__hexnan+0x2e>
 8009712:	2a29      	cmp	r2, #41	@ 0x29
 8009714:	d157      	bne.n	80097c6 <__hexnan+0x132>
 8009716:	3102      	adds	r1, #2
 8009718:	f8ca 1000 	str.w	r1, [sl]
 800971c:	f1bb 0f00 	cmp.w	fp, #0
 8009720:	d051      	beq.n	80097c6 <__hexnan+0x132>
 8009722:	454c      	cmp	r4, r9
 8009724:	d206      	bcs.n	8009734 <__hexnan+0xa0>
 8009726:	2d07      	cmp	r5, #7
 8009728:	dc04      	bgt.n	8009734 <__hexnan+0xa0>
 800972a:	462a      	mov	r2, r5
 800972c:	4649      	mov	r1, r9
 800972e:	4620      	mov	r0, r4
 8009730:	f7ff ff8a 	bl	8009648 <L_shift>
 8009734:	4544      	cmp	r4, r8
 8009736:	d936      	bls.n	80097a6 <__hexnan+0x112>
 8009738:	f1a8 0204 	sub.w	r2, r8, #4
 800973c:	4623      	mov	r3, r4
 800973e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009742:	f842 1f04 	str.w	r1, [r2, #4]!
 8009746:	429f      	cmp	r7, r3
 8009748:	d2f9      	bcs.n	800973e <__hexnan+0xaa>
 800974a:	1b3b      	subs	r3, r7, r4
 800974c:	f023 0303 	bic.w	r3, r3, #3
 8009750:	3304      	adds	r3, #4
 8009752:	3401      	adds	r4, #1
 8009754:	3e03      	subs	r6, #3
 8009756:	42b4      	cmp	r4, r6
 8009758:	bf88      	it	hi
 800975a:	2304      	movhi	r3, #4
 800975c:	4443      	add	r3, r8
 800975e:	2200      	movs	r2, #0
 8009760:	f843 2b04 	str.w	r2, [r3], #4
 8009764:	429f      	cmp	r7, r3
 8009766:	d2fb      	bcs.n	8009760 <__hexnan+0xcc>
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	b91b      	cbnz	r3, 8009774 <__hexnan+0xe0>
 800976c:	4547      	cmp	r7, r8
 800976e:	d128      	bne.n	80097c2 <__hexnan+0x12e>
 8009770:	2301      	movs	r3, #1
 8009772:	603b      	str	r3, [r7, #0]
 8009774:	2005      	movs	r0, #5
 8009776:	b007      	add	sp, #28
 8009778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800977c:	3501      	adds	r5, #1
 800977e:	2d08      	cmp	r5, #8
 8009780:	f10b 0b01 	add.w	fp, fp, #1
 8009784:	dd06      	ble.n	8009794 <__hexnan+0x100>
 8009786:	4544      	cmp	r4, r8
 8009788:	d9c1      	bls.n	800970e <__hexnan+0x7a>
 800978a:	2300      	movs	r3, #0
 800978c:	f844 3c04 	str.w	r3, [r4, #-4]
 8009790:	2501      	movs	r5, #1
 8009792:	3c04      	subs	r4, #4
 8009794:	6822      	ldr	r2, [r4, #0]
 8009796:	f000 000f 	and.w	r0, r0, #15
 800979a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800979e:	6020      	str	r0, [r4, #0]
 80097a0:	e7b5      	b.n	800970e <__hexnan+0x7a>
 80097a2:	2508      	movs	r5, #8
 80097a4:	e7b3      	b.n	800970e <__hexnan+0x7a>
 80097a6:	9b01      	ldr	r3, [sp, #4]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d0dd      	beq.n	8009768 <__hexnan+0xd4>
 80097ac:	f1c3 0320 	rsb	r3, r3, #32
 80097b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80097b4:	40da      	lsrs	r2, r3
 80097b6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80097ba:	4013      	ands	r3, r2
 80097bc:	f846 3c04 	str.w	r3, [r6, #-4]
 80097c0:	e7d2      	b.n	8009768 <__hexnan+0xd4>
 80097c2:	3f04      	subs	r7, #4
 80097c4:	e7d0      	b.n	8009768 <__hexnan+0xd4>
 80097c6:	2004      	movs	r0, #4
 80097c8:	e7d5      	b.n	8009776 <__hexnan+0xe2>

080097ca <__ssputs_r>:
 80097ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097ce:	688e      	ldr	r6, [r1, #8]
 80097d0:	461f      	mov	r7, r3
 80097d2:	42be      	cmp	r6, r7
 80097d4:	680b      	ldr	r3, [r1, #0]
 80097d6:	4682      	mov	sl, r0
 80097d8:	460c      	mov	r4, r1
 80097da:	4690      	mov	r8, r2
 80097dc:	d82d      	bhi.n	800983a <__ssputs_r+0x70>
 80097de:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80097e2:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80097e6:	d026      	beq.n	8009836 <__ssputs_r+0x6c>
 80097e8:	6965      	ldr	r5, [r4, #20]
 80097ea:	6909      	ldr	r1, [r1, #16]
 80097ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80097f0:	eba3 0901 	sub.w	r9, r3, r1
 80097f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80097f8:	1c7b      	adds	r3, r7, #1
 80097fa:	444b      	add	r3, r9
 80097fc:	106d      	asrs	r5, r5, #1
 80097fe:	429d      	cmp	r5, r3
 8009800:	bf38      	it	cc
 8009802:	461d      	movcc	r5, r3
 8009804:	0553      	lsls	r3, r2, #21
 8009806:	d527      	bpl.n	8009858 <__ssputs_r+0x8e>
 8009808:	4629      	mov	r1, r5
 800980a:	f000 faa1 	bl	8009d50 <_malloc_r>
 800980e:	4606      	mov	r6, r0
 8009810:	b360      	cbz	r0, 800986c <__ssputs_r+0xa2>
 8009812:	6921      	ldr	r1, [r4, #16]
 8009814:	464a      	mov	r2, r9
 8009816:	f7fe fe32 	bl	800847e <memcpy>
 800981a:	89a3      	ldrh	r3, [r4, #12]
 800981c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009820:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009824:	81a3      	strh	r3, [r4, #12]
 8009826:	6126      	str	r6, [r4, #16]
 8009828:	6165      	str	r5, [r4, #20]
 800982a:	444e      	add	r6, r9
 800982c:	eba5 0509 	sub.w	r5, r5, r9
 8009830:	6026      	str	r6, [r4, #0]
 8009832:	60a5      	str	r5, [r4, #8]
 8009834:	463e      	mov	r6, r7
 8009836:	42be      	cmp	r6, r7
 8009838:	d900      	bls.n	800983c <__ssputs_r+0x72>
 800983a:	463e      	mov	r6, r7
 800983c:	6820      	ldr	r0, [r4, #0]
 800983e:	4632      	mov	r2, r6
 8009840:	4641      	mov	r1, r8
 8009842:	f001 f9f6 	bl	800ac32 <memmove>
 8009846:	68a3      	ldr	r3, [r4, #8]
 8009848:	1b9b      	subs	r3, r3, r6
 800984a:	60a3      	str	r3, [r4, #8]
 800984c:	6823      	ldr	r3, [r4, #0]
 800984e:	4433      	add	r3, r6
 8009850:	6023      	str	r3, [r4, #0]
 8009852:	2000      	movs	r0, #0
 8009854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009858:	462a      	mov	r2, r5
 800985a:	f001 f8b8 	bl	800a9ce <_realloc_r>
 800985e:	4606      	mov	r6, r0
 8009860:	2800      	cmp	r0, #0
 8009862:	d1e0      	bne.n	8009826 <__ssputs_r+0x5c>
 8009864:	6921      	ldr	r1, [r4, #16]
 8009866:	4650      	mov	r0, sl
 8009868:	f001 faa8 	bl	800adbc <_free_r>
 800986c:	230c      	movs	r3, #12
 800986e:	f8ca 3000 	str.w	r3, [sl]
 8009872:	89a3      	ldrh	r3, [r4, #12]
 8009874:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009878:	81a3      	strh	r3, [r4, #12]
 800987a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800987e:	e7e9      	b.n	8009854 <__ssputs_r+0x8a>

08009880 <_svfiprintf_r>:
 8009880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009884:	4698      	mov	r8, r3
 8009886:	898b      	ldrh	r3, [r1, #12]
 8009888:	061b      	lsls	r3, r3, #24
 800988a:	b09d      	sub	sp, #116	@ 0x74
 800988c:	4607      	mov	r7, r0
 800988e:	460d      	mov	r5, r1
 8009890:	4614      	mov	r4, r2
 8009892:	d510      	bpl.n	80098b6 <_svfiprintf_r+0x36>
 8009894:	690b      	ldr	r3, [r1, #16]
 8009896:	b973      	cbnz	r3, 80098b6 <_svfiprintf_r+0x36>
 8009898:	2140      	movs	r1, #64	@ 0x40
 800989a:	f000 fa59 	bl	8009d50 <_malloc_r>
 800989e:	6028      	str	r0, [r5, #0]
 80098a0:	6128      	str	r0, [r5, #16]
 80098a2:	b930      	cbnz	r0, 80098b2 <_svfiprintf_r+0x32>
 80098a4:	230c      	movs	r3, #12
 80098a6:	603b      	str	r3, [r7, #0]
 80098a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80098ac:	b01d      	add	sp, #116	@ 0x74
 80098ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098b2:	2340      	movs	r3, #64	@ 0x40
 80098b4:	616b      	str	r3, [r5, #20]
 80098b6:	2300      	movs	r3, #0
 80098b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80098ba:	2320      	movs	r3, #32
 80098bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80098c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80098c4:	2330      	movs	r3, #48	@ 0x30
 80098c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009a64 <_svfiprintf_r+0x1e4>
 80098ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80098ce:	f04f 0901 	mov.w	r9, #1
 80098d2:	4623      	mov	r3, r4
 80098d4:	469a      	mov	sl, r3
 80098d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098da:	b10a      	cbz	r2, 80098e0 <_svfiprintf_r+0x60>
 80098dc:	2a25      	cmp	r2, #37	@ 0x25
 80098de:	d1f9      	bne.n	80098d4 <_svfiprintf_r+0x54>
 80098e0:	ebba 0b04 	subs.w	fp, sl, r4
 80098e4:	d00b      	beq.n	80098fe <_svfiprintf_r+0x7e>
 80098e6:	465b      	mov	r3, fp
 80098e8:	4622      	mov	r2, r4
 80098ea:	4629      	mov	r1, r5
 80098ec:	4638      	mov	r0, r7
 80098ee:	f7ff ff6c 	bl	80097ca <__ssputs_r>
 80098f2:	3001      	adds	r0, #1
 80098f4:	f000 80a7 	beq.w	8009a46 <_svfiprintf_r+0x1c6>
 80098f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098fa:	445a      	add	r2, fp
 80098fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80098fe:	f89a 3000 	ldrb.w	r3, [sl]
 8009902:	2b00      	cmp	r3, #0
 8009904:	f000 809f 	beq.w	8009a46 <_svfiprintf_r+0x1c6>
 8009908:	2300      	movs	r3, #0
 800990a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800990e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009912:	f10a 0a01 	add.w	sl, sl, #1
 8009916:	9304      	str	r3, [sp, #16]
 8009918:	9307      	str	r3, [sp, #28]
 800991a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800991e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009920:	4654      	mov	r4, sl
 8009922:	2205      	movs	r2, #5
 8009924:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009928:	484e      	ldr	r0, [pc, #312]	@ (8009a64 <_svfiprintf_r+0x1e4>)
 800992a:	f7f6 fc51 	bl	80001d0 <memchr>
 800992e:	9a04      	ldr	r2, [sp, #16]
 8009930:	b9d8      	cbnz	r0, 800996a <_svfiprintf_r+0xea>
 8009932:	06d0      	lsls	r0, r2, #27
 8009934:	bf44      	itt	mi
 8009936:	2320      	movmi	r3, #32
 8009938:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800993c:	0711      	lsls	r1, r2, #28
 800993e:	bf44      	itt	mi
 8009940:	232b      	movmi	r3, #43	@ 0x2b
 8009942:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009946:	f89a 3000 	ldrb.w	r3, [sl]
 800994a:	2b2a      	cmp	r3, #42	@ 0x2a
 800994c:	d015      	beq.n	800997a <_svfiprintf_r+0xfa>
 800994e:	9a07      	ldr	r2, [sp, #28]
 8009950:	4654      	mov	r4, sl
 8009952:	2000      	movs	r0, #0
 8009954:	f04f 0c0a 	mov.w	ip, #10
 8009958:	4621      	mov	r1, r4
 800995a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800995e:	3b30      	subs	r3, #48	@ 0x30
 8009960:	2b09      	cmp	r3, #9
 8009962:	d94b      	bls.n	80099fc <_svfiprintf_r+0x17c>
 8009964:	b1b0      	cbz	r0, 8009994 <_svfiprintf_r+0x114>
 8009966:	9207      	str	r2, [sp, #28]
 8009968:	e014      	b.n	8009994 <_svfiprintf_r+0x114>
 800996a:	eba0 0308 	sub.w	r3, r0, r8
 800996e:	fa09 f303 	lsl.w	r3, r9, r3
 8009972:	4313      	orrs	r3, r2
 8009974:	9304      	str	r3, [sp, #16]
 8009976:	46a2      	mov	sl, r4
 8009978:	e7d2      	b.n	8009920 <_svfiprintf_r+0xa0>
 800997a:	9b03      	ldr	r3, [sp, #12]
 800997c:	1d19      	adds	r1, r3, #4
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	9103      	str	r1, [sp, #12]
 8009982:	2b00      	cmp	r3, #0
 8009984:	bfbb      	ittet	lt
 8009986:	425b      	neglt	r3, r3
 8009988:	f042 0202 	orrlt.w	r2, r2, #2
 800998c:	9307      	strge	r3, [sp, #28]
 800998e:	9307      	strlt	r3, [sp, #28]
 8009990:	bfb8      	it	lt
 8009992:	9204      	strlt	r2, [sp, #16]
 8009994:	7823      	ldrb	r3, [r4, #0]
 8009996:	2b2e      	cmp	r3, #46	@ 0x2e
 8009998:	d10a      	bne.n	80099b0 <_svfiprintf_r+0x130>
 800999a:	7863      	ldrb	r3, [r4, #1]
 800999c:	2b2a      	cmp	r3, #42	@ 0x2a
 800999e:	d132      	bne.n	8009a06 <_svfiprintf_r+0x186>
 80099a0:	9b03      	ldr	r3, [sp, #12]
 80099a2:	1d1a      	adds	r2, r3, #4
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	9203      	str	r2, [sp, #12]
 80099a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80099ac:	3402      	adds	r4, #2
 80099ae:	9305      	str	r3, [sp, #20]
 80099b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009a74 <_svfiprintf_r+0x1f4>
 80099b4:	7821      	ldrb	r1, [r4, #0]
 80099b6:	2203      	movs	r2, #3
 80099b8:	4650      	mov	r0, sl
 80099ba:	f7f6 fc09 	bl	80001d0 <memchr>
 80099be:	b138      	cbz	r0, 80099d0 <_svfiprintf_r+0x150>
 80099c0:	9b04      	ldr	r3, [sp, #16]
 80099c2:	eba0 000a 	sub.w	r0, r0, sl
 80099c6:	2240      	movs	r2, #64	@ 0x40
 80099c8:	4082      	lsls	r2, r0
 80099ca:	4313      	orrs	r3, r2
 80099cc:	3401      	adds	r4, #1
 80099ce:	9304      	str	r3, [sp, #16]
 80099d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099d4:	4824      	ldr	r0, [pc, #144]	@ (8009a68 <_svfiprintf_r+0x1e8>)
 80099d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80099da:	2206      	movs	r2, #6
 80099dc:	f7f6 fbf8 	bl	80001d0 <memchr>
 80099e0:	2800      	cmp	r0, #0
 80099e2:	d036      	beq.n	8009a52 <_svfiprintf_r+0x1d2>
 80099e4:	4b21      	ldr	r3, [pc, #132]	@ (8009a6c <_svfiprintf_r+0x1ec>)
 80099e6:	bb1b      	cbnz	r3, 8009a30 <_svfiprintf_r+0x1b0>
 80099e8:	9b03      	ldr	r3, [sp, #12]
 80099ea:	3307      	adds	r3, #7
 80099ec:	f023 0307 	bic.w	r3, r3, #7
 80099f0:	3308      	adds	r3, #8
 80099f2:	9303      	str	r3, [sp, #12]
 80099f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099f6:	4433      	add	r3, r6
 80099f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80099fa:	e76a      	b.n	80098d2 <_svfiprintf_r+0x52>
 80099fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a00:	460c      	mov	r4, r1
 8009a02:	2001      	movs	r0, #1
 8009a04:	e7a8      	b.n	8009958 <_svfiprintf_r+0xd8>
 8009a06:	2300      	movs	r3, #0
 8009a08:	3401      	adds	r4, #1
 8009a0a:	9305      	str	r3, [sp, #20]
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	f04f 0c0a 	mov.w	ip, #10
 8009a12:	4620      	mov	r0, r4
 8009a14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a18:	3a30      	subs	r2, #48	@ 0x30
 8009a1a:	2a09      	cmp	r2, #9
 8009a1c:	d903      	bls.n	8009a26 <_svfiprintf_r+0x1a6>
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d0c6      	beq.n	80099b0 <_svfiprintf_r+0x130>
 8009a22:	9105      	str	r1, [sp, #20]
 8009a24:	e7c4      	b.n	80099b0 <_svfiprintf_r+0x130>
 8009a26:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a2a:	4604      	mov	r4, r0
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	e7f0      	b.n	8009a12 <_svfiprintf_r+0x192>
 8009a30:	ab03      	add	r3, sp, #12
 8009a32:	9300      	str	r3, [sp, #0]
 8009a34:	462a      	mov	r2, r5
 8009a36:	4b0e      	ldr	r3, [pc, #56]	@ (8009a70 <_svfiprintf_r+0x1f0>)
 8009a38:	a904      	add	r1, sp, #16
 8009a3a:	4638      	mov	r0, r7
 8009a3c:	f7fc ff32 	bl	80068a4 <_printf_float>
 8009a40:	1c42      	adds	r2, r0, #1
 8009a42:	4606      	mov	r6, r0
 8009a44:	d1d6      	bne.n	80099f4 <_svfiprintf_r+0x174>
 8009a46:	89ab      	ldrh	r3, [r5, #12]
 8009a48:	065b      	lsls	r3, r3, #25
 8009a4a:	f53f af2d 	bmi.w	80098a8 <_svfiprintf_r+0x28>
 8009a4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a50:	e72c      	b.n	80098ac <_svfiprintf_r+0x2c>
 8009a52:	ab03      	add	r3, sp, #12
 8009a54:	9300      	str	r3, [sp, #0]
 8009a56:	462a      	mov	r2, r5
 8009a58:	4b05      	ldr	r3, [pc, #20]	@ (8009a70 <_svfiprintf_r+0x1f0>)
 8009a5a:	a904      	add	r1, sp, #16
 8009a5c:	4638      	mov	r0, r7
 8009a5e:	f7fd f9b9 	bl	8006dd4 <_printf_i>
 8009a62:	e7ed      	b.n	8009a40 <_svfiprintf_r+0x1c0>
 8009a64:	0800b30e 	.word	0x0800b30e
 8009a68:	0800b318 	.word	0x0800b318
 8009a6c:	080068a5 	.word	0x080068a5
 8009a70:	080097cb 	.word	0x080097cb
 8009a74:	0800b314 	.word	0x0800b314

08009a78 <__sfputc_r>:
 8009a78:	6893      	ldr	r3, [r2, #8]
 8009a7a:	3b01      	subs	r3, #1
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	b410      	push	{r4}
 8009a80:	6093      	str	r3, [r2, #8]
 8009a82:	da08      	bge.n	8009a96 <__sfputc_r+0x1e>
 8009a84:	6994      	ldr	r4, [r2, #24]
 8009a86:	42a3      	cmp	r3, r4
 8009a88:	db01      	blt.n	8009a8e <__sfputc_r+0x16>
 8009a8a:	290a      	cmp	r1, #10
 8009a8c:	d103      	bne.n	8009a96 <__sfputc_r+0x1e>
 8009a8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a92:	f000 bfca 	b.w	800aa2a <__swbuf_r>
 8009a96:	6813      	ldr	r3, [r2, #0]
 8009a98:	1c58      	adds	r0, r3, #1
 8009a9a:	6010      	str	r0, [r2, #0]
 8009a9c:	7019      	strb	r1, [r3, #0]
 8009a9e:	4608      	mov	r0, r1
 8009aa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009aa4:	4770      	bx	lr

08009aa6 <__sfputs_r>:
 8009aa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aa8:	4606      	mov	r6, r0
 8009aaa:	460f      	mov	r7, r1
 8009aac:	4614      	mov	r4, r2
 8009aae:	18d5      	adds	r5, r2, r3
 8009ab0:	42ac      	cmp	r4, r5
 8009ab2:	d101      	bne.n	8009ab8 <__sfputs_r+0x12>
 8009ab4:	2000      	movs	r0, #0
 8009ab6:	e007      	b.n	8009ac8 <__sfputs_r+0x22>
 8009ab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009abc:	463a      	mov	r2, r7
 8009abe:	4630      	mov	r0, r6
 8009ac0:	f7ff ffda 	bl	8009a78 <__sfputc_r>
 8009ac4:	1c43      	adds	r3, r0, #1
 8009ac6:	d1f3      	bne.n	8009ab0 <__sfputs_r+0xa>
 8009ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009acc <_vfiprintf_r>:
 8009acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad0:	460d      	mov	r5, r1
 8009ad2:	b09d      	sub	sp, #116	@ 0x74
 8009ad4:	4614      	mov	r4, r2
 8009ad6:	4698      	mov	r8, r3
 8009ad8:	4606      	mov	r6, r0
 8009ada:	b118      	cbz	r0, 8009ae4 <_vfiprintf_r+0x18>
 8009adc:	6a03      	ldr	r3, [r0, #32]
 8009ade:	b90b      	cbnz	r3, 8009ae4 <_vfiprintf_r+0x18>
 8009ae0:	f7fd fd58 	bl	8007594 <__sinit>
 8009ae4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ae6:	07d9      	lsls	r1, r3, #31
 8009ae8:	d405      	bmi.n	8009af6 <_vfiprintf_r+0x2a>
 8009aea:	89ab      	ldrh	r3, [r5, #12]
 8009aec:	059a      	lsls	r2, r3, #22
 8009aee:	d402      	bmi.n	8009af6 <_vfiprintf_r+0x2a>
 8009af0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009af2:	f7fe fcc2 	bl	800847a <__retarget_lock_acquire_recursive>
 8009af6:	89ab      	ldrh	r3, [r5, #12]
 8009af8:	071b      	lsls	r3, r3, #28
 8009afa:	d501      	bpl.n	8009b00 <_vfiprintf_r+0x34>
 8009afc:	692b      	ldr	r3, [r5, #16]
 8009afe:	b99b      	cbnz	r3, 8009b28 <_vfiprintf_r+0x5c>
 8009b00:	4629      	mov	r1, r5
 8009b02:	4630      	mov	r0, r6
 8009b04:	f000 ffd0 	bl	800aaa8 <__swsetup_r>
 8009b08:	b170      	cbz	r0, 8009b28 <_vfiprintf_r+0x5c>
 8009b0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b0c:	07dc      	lsls	r4, r3, #31
 8009b0e:	d504      	bpl.n	8009b1a <_vfiprintf_r+0x4e>
 8009b10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009b14:	b01d      	add	sp, #116	@ 0x74
 8009b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b1a:	89ab      	ldrh	r3, [r5, #12]
 8009b1c:	0598      	lsls	r0, r3, #22
 8009b1e:	d4f7      	bmi.n	8009b10 <_vfiprintf_r+0x44>
 8009b20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b22:	f7fe fcab 	bl	800847c <__retarget_lock_release_recursive>
 8009b26:	e7f3      	b.n	8009b10 <_vfiprintf_r+0x44>
 8009b28:	2300      	movs	r3, #0
 8009b2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b2c:	2320      	movs	r3, #32
 8009b2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009b32:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b36:	2330      	movs	r3, #48	@ 0x30
 8009b38:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009ce8 <_vfiprintf_r+0x21c>
 8009b3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009b40:	f04f 0901 	mov.w	r9, #1
 8009b44:	4623      	mov	r3, r4
 8009b46:	469a      	mov	sl, r3
 8009b48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b4c:	b10a      	cbz	r2, 8009b52 <_vfiprintf_r+0x86>
 8009b4e:	2a25      	cmp	r2, #37	@ 0x25
 8009b50:	d1f9      	bne.n	8009b46 <_vfiprintf_r+0x7a>
 8009b52:	ebba 0b04 	subs.w	fp, sl, r4
 8009b56:	d00b      	beq.n	8009b70 <_vfiprintf_r+0xa4>
 8009b58:	465b      	mov	r3, fp
 8009b5a:	4622      	mov	r2, r4
 8009b5c:	4629      	mov	r1, r5
 8009b5e:	4630      	mov	r0, r6
 8009b60:	f7ff ffa1 	bl	8009aa6 <__sfputs_r>
 8009b64:	3001      	adds	r0, #1
 8009b66:	f000 80a7 	beq.w	8009cb8 <_vfiprintf_r+0x1ec>
 8009b6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b6c:	445a      	add	r2, fp
 8009b6e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b70:	f89a 3000 	ldrb.w	r3, [sl]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	f000 809f 	beq.w	8009cb8 <_vfiprintf_r+0x1ec>
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009b80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b84:	f10a 0a01 	add.w	sl, sl, #1
 8009b88:	9304      	str	r3, [sp, #16]
 8009b8a:	9307      	str	r3, [sp, #28]
 8009b8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b90:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b92:	4654      	mov	r4, sl
 8009b94:	2205      	movs	r2, #5
 8009b96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b9a:	4853      	ldr	r0, [pc, #332]	@ (8009ce8 <_vfiprintf_r+0x21c>)
 8009b9c:	f7f6 fb18 	bl	80001d0 <memchr>
 8009ba0:	9a04      	ldr	r2, [sp, #16]
 8009ba2:	b9d8      	cbnz	r0, 8009bdc <_vfiprintf_r+0x110>
 8009ba4:	06d1      	lsls	r1, r2, #27
 8009ba6:	bf44      	itt	mi
 8009ba8:	2320      	movmi	r3, #32
 8009baa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bae:	0713      	lsls	r3, r2, #28
 8009bb0:	bf44      	itt	mi
 8009bb2:	232b      	movmi	r3, #43	@ 0x2b
 8009bb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bb8:	f89a 3000 	ldrb.w	r3, [sl]
 8009bbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8009bbe:	d015      	beq.n	8009bec <_vfiprintf_r+0x120>
 8009bc0:	9a07      	ldr	r2, [sp, #28]
 8009bc2:	4654      	mov	r4, sl
 8009bc4:	2000      	movs	r0, #0
 8009bc6:	f04f 0c0a 	mov.w	ip, #10
 8009bca:	4621      	mov	r1, r4
 8009bcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bd0:	3b30      	subs	r3, #48	@ 0x30
 8009bd2:	2b09      	cmp	r3, #9
 8009bd4:	d94b      	bls.n	8009c6e <_vfiprintf_r+0x1a2>
 8009bd6:	b1b0      	cbz	r0, 8009c06 <_vfiprintf_r+0x13a>
 8009bd8:	9207      	str	r2, [sp, #28]
 8009bda:	e014      	b.n	8009c06 <_vfiprintf_r+0x13a>
 8009bdc:	eba0 0308 	sub.w	r3, r0, r8
 8009be0:	fa09 f303 	lsl.w	r3, r9, r3
 8009be4:	4313      	orrs	r3, r2
 8009be6:	9304      	str	r3, [sp, #16]
 8009be8:	46a2      	mov	sl, r4
 8009bea:	e7d2      	b.n	8009b92 <_vfiprintf_r+0xc6>
 8009bec:	9b03      	ldr	r3, [sp, #12]
 8009bee:	1d19      	adds	r1, r3, #4
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	9103      	str	r1, [sp, #12]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	bfbb      	ittet	lt
 8009bf8:	425b      	neglt	r3, r3
 8009bfa:	f042 0202 	orrlt.w	r2, r2, #2
 8009bfe:	9307      	strge	r3, [sp, #28]
 8009c00:	9307      	strlt	r3, [sp, #28]
 8009c02:	bfb8      	it	lt
 8009c04:	9204      	strlt	r2, [sp, #16]
 8009c06:	7823      	ldrb	r3, [r4, #0]
 8009c08:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c0a:	d10a      	bne.n	8009c22 <_vfiprintf_r+0x156>
 8009c0c:	7863      	ldrb	r3, [r4, #1]
 8009c0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c10:	d132      	bne.n	8009c78 <_vfiprintf_r+0x1ac>
 8009c12:	9b03      	ldr	r3, [sp, #12]
 8009c14:	1d1a      	adds	r2, r3, #4
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	9203      	str	r2, [sp, #12]
 8009c1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009c1e:	3402      	adds	r4, #2
 8009c20:	9305      	str	r3, [sp, #20]
 8009c22:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009cf8 <_vfiprintf_r+0x22c>
 8009c26:	7821      	ldrb	r1, [r4, #0]
 8009c28:	2203      	movs	r2, #3
 8009c2a:	4650      	mov	r0, sl
 8009c2c:	f7f6 fad0 	bl	80001d0 <memchr>
 8009c30:	b138      	cbz	r0, 8009c42 <_vfiprintf_r+0x176>
 8009c32:	9b04      	ldr	r3, [sp, #16]
 8009c34:	eba0 000a 	sub.w	r0, r0, sl
 8009c38:	2240      	movs	r2, #64	@ 0x40
 8009c3a:	4082      	lsls	r2, r0
 8009c3c:	4313      	orrs	r3, r2
 8009c3e:	3401      	adds	r4, #1
 8009c40:	9304      	str	r3, [sp, #16]
 8009c42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c46:	4829      	ldr	r0, [pc, #164]	@ (8009cec <_vfiprintf_r+0x220>)
 8009c48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009c4c:	2206      	movs	r2, #6
 8009c4e:	f7f6 fabf 	bl	80001d0 <memchr>
 8009c52:	2800      	cmp	r0, #0
 8009c54:	d03f      	beq.n	8009cd6 <_vfiprintf_r+0x20a>
 8009c56:	4b26      	ldr	r3, [pc, #152]	@ (8009cf0 <_vfiprintf_r+0x224>)
 8009c58:	bb1b      	cbnz	r3, 8009ca2 <_vfiprintf_r+0x1d6>
 8009c5a:	9b03      	ldr	r3, [sp, #12]
 8009c5c:	3307      	adds	r3, #7
 8009c5e:	f023 0307 	bic.w	r3, r3, #7
 8009c62:	3308      	adds	r3, #8
 8009c64:	9303      	str	r3, [sp, #12]
 8009c66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c68:	443b      	add	r3, r7
 8009c6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c6c:	e76a      	b.n	8009b44 <_vfiprintf_r+0x78>
 8009c6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c72:	460c      	mov	r4, r1
 8009c74:	2001      	movs	r0, #1
 8009c76:	e7a8      	b.n	8009bca <_vfiprintf_r+0xfe>
 8009c78:	2300      	movs	r3, #0
 8009c7a:	3401      	adds	r4, #1
 8009c7c:	9305      	str	r3, [sp, #20]
 8009c7e:	4619      	mov	r1, r3
 8009c80:	f04f 0c0a 	mov.w	ip, #10
 8009c84:	4620      	mov	r0, r4
 8009c86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c8a:	3a30      	subs	r2, #48	@ 0x30
 8009c8c:	2a09      	cmp	r2, #9
 8009c8e:	d903      	bls.n	8009c98 <_vfiprintf_r+0x1cc>
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d0c6      	beq.n	8009c22 <_vfiprintf_r+0x156>
 8009c94:	9105      	str	r1, [sp, #20]
 8009c96:	e7c4      	b.n	8009c22 <_vfiprintf_r+0x156>
 8009c98:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c9c:	4604      	mov	r4, r0
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	e7f0      	b.n	8009c84 <_vfiprintf_r+0x1b8>
 8009ca2:	ab03      	add	r3, sp, #12
 8009ca4:	9300      	str	r3, [sp, #0]
 8009ca6:	462a      	mov	r2, r5
 8009ca8:	4b12      	ldr	r3, [pc, #72]	@ (8009cf4 <_vfiprintf_r+0x228>)
 8009caa:	a904      	add	r1, sp, #16
 8009cac:	4630      	mov	r0, r6
 8009cae:	f7fc fdf9 	bl	80068a4 <_printf_float>
 8009cb2:	4607      	mov	r7, r0
 8009cb4:	1c78      	adds	r0, r7, #1
 8009cb6:	d1d6      	bne.n	8009c66 <_vfiprintf_r+0x19a>
 8009cb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009cba:	07d9      	lsls	r1, r3, #31
 8009cbc:	d405      	bmi.n	8009cca <_vfiprintf_r+0x1fe>
 8009cbe:	89ab      	ldrh	r3, [r5, #12]
 8009cc0:	059a      	lsls	r2, r3, #22
 8009cc2:	d402      	bmi.n	8009cca <_vfiprintf_r+0x1fe>
 8009cc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009cc6:	f7fe fbd9 	bl	800847c <__retarget_lock_release_recursive>
 8009cca:	89ab      	ldrh	r3, [r5, #12]
 8009ccc:	065b      	lsls	r3, r3, #25
 8009cce:	f53f af1f 	bmi.w	8009b10 <_vfiprintf_r+0x44>
 8009cd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009cd4:	e71e      	b.n	8009b14 <_vfiprintf_r+0x48>
 8009cd6:	ab03      	add	r3, sp, #12
 8009cd8:	9300      	str	r3, [sp, #0]
 8009cda:	462a      	mov	r2, r5
 8009cdc:	4b05      	ldr	r3, [pc, #20]	@ (8009cf4 <_vfiprintf_r+0x228>)
 8009cde:	a904      	add	r1, sp, #16
 8009ce0:	4630      	mov	r0, r6
 8009ce2:	f7fd f877 	bl	8006dd4 <_printf_i>
 8009ce6:	e7e4      	b.n	8009cb2 <_vfiprintf_r+0x1e6>
 8009ce8:	0800b30e 	.word	0x0800b30e
 8009cec:	0800b318 	.word	0x0800b318
 8009cf0:	080068a5 	.word	0x080068a5
 8009cf4:	08009aa7 	.word	0x08009aa7
 8009cf8:	0800b314 	.word	0x0800b314

08009cfc <malloc>:
 8009cfc:	4b02      	ldr	r3, [pc, #8]	@ (8009d08 <malloc+0xc>)
 8009cfe:	4601      	mov	r1, r0
 8009d00:	6818      	ldr	r0, [r3, #0]
 8009d02:	f000 b825 	b.w	8009d50 <_malloc_r>
 8009d06:	bf00      	nop
 8009d08:	20000184 	.word	0x20000184

08009d0c <sbrk_aligned>:
 8009d0c:	b570      	push	{r4, r5, r6, lr}
 8009d0e:	4e0f      	ldr	r6, [pc, #60]	@ (8009d4c <sbrk_aligned+0x40>)
 8009d10:	460c      	mov	r4, r1
 8009d12:	6831      	ldr	r1, [r6, #0]
 8009d14:	4605      	mov	r5, r0
 8009d16:	b911      	cbnz	r1, 8009d1e <sbrk_aligned+0x12>
 8009d18:	f000 fffc 	bl	800ad14 <_sbrk_r>
 8009d1c:	6030      	str	r0, [r6, #0]
 8009d1e:	4621      	mov	r1, r4
 8009d20:	4628      	mov	r0, r5
 8009d22:	f000 fff7 	bl	800ad14 <_sbrk_r>
 8009d26:	1c43      	adds	r3, r0, #1
 8009d28:	d103      	bne.n	8009d32 <sbrk_aligned+0x26>
 8009d2a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009d2e:	4620      	mov	r0, r4
 8009d30:	bd70      	pop	{r4, r5, r6, pc}
 8009d32:	1cc4      	adds	r4, r0, #3
 8009d34:	f024 0403 	bic.w	r4, r4, #3
 8009d38:	42a0      	cmp	r0, r4
 8009d3a:	d0f8      	beq.n	8009d2e <sbrk_aligned+0x22>
 8009d3c:	1a21      	subs	r1, r4, r0
 8009d3e:	4628      	mov	r0, r5
 8009d40:	f000 ffe8 	bl	800ad14 <_sbrk_r>
 8009d44:	3001      	adds	r0, #1
 8009d46:	d1f2      	bne.n	8009d2e <sbrk_aligned+0x22>
 8009d48:	e7ef      	b.n	8009d2a <sbrk_aligned+0x1e>
 8009d4a:	bf00      	nop
 8009d4c:	20000460 	.word	0x20000460

08009d50 <_malloc_r>:
 8009d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d54:	1ccd      	adds	r5, r1, #3
 8009d56:	f025 0503 	bic.w	r5, r5, #3
 8009d5a:	3508      	adds	r5, #8
 8009d5c:	2d0c      	cmp	r5, #12
 8009d5e:	bf38      	it	cc
 8009d60:	250c      	movcc	r5, #12
 8009d62:	2d00      	cmp	r5, #0
 8009d64:	4606      	mov	r6, r0
 8009d66:	db01      	blt.n	8009d6c <_malloc_r+0x1c>
 8009d68:	42a9      	cmp	r1, r5
 8009d6a:	d904      	bls.n	8009d76 <_malloc_r+0x26>
 8009d6c:	230c      	movs	r3, #12
 8009d6e:	6033      	str	r3, [r6, #0]
 8009d70:	2000      	movs	r0, #0
 8009d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009e4c <_malloc_r+0xfc>
 8009d7a:	f000 f927 	bl	8009fcc <__malloc_lock>
 8009d7e:	f8d8 3000 	ldr.w	r3, [r8]
 8009d82:	461c      	mov	r4, r3
 8009d84:	bb44      	cbnz	r4, 8009dd8 <_malloc_r+0x88>
 8009d86:	4629      	mov	r1, r5
 8009d88:	4630      	mov	r0, r6
 8009d8a:	f7ff ffbf 	bl	8009d0c <sbrk_aligned>
 8009d8e:	1c43      	adds	r3, r0, #1
 8009d90:	4604      	mov	r4, r0
 8009d92:	d158      	bne.n	8009e46 <_malloc_r+0xf6>
 8009d94:	f8d8 4000 	ldr.w	r4, [r8]
 8009d98:	4627      	mov	r7, r4
 8009d9a:	2f00      	cmp	r7, #0
 8009d9c:	d143      	bne.n	8009e26 <_malloc_r+0xd6>
 8009d9e:	2c00      	cmp	r4, #0
 8009da0:	d04b      	beq.n	8009e3a <_malloc_r+0xea>
 8009da2:	6823      	ldr	r3, [r4, #0]
 8009da4:	4639      	mov	r1, r7
 8009da6:	4630      	mov	r0, r6
 8009da8:	eb04 0903 	add.w	r9, r4, r3
 8009dac:	f000 ffb2 	bl	800ad14 <_sbrk_r>
 8009db0:	4581      	cmp	r9, r0
 8009db2:	d142      	bne.n	8009e3a <_malloc_r+0xea>
 8009db4:	6821      	ldr	r1, [r4, #0]
 8009db6:	1a6d      	subs	r5, r5, r1
 8009db8:	4629      	mov	r1, r5
 8009dba:	4630      	mov	r0, r6
 8009dbc:	f7ff ffa6 	bl	8009d0c <sbrk_aligned>
 8009dc0:	3001      	adds	r0, #1
 8009dc2:	d03a      	beq.n	8009e3a <_malloc_r+0xea>
 8009dc4:	6823      	ldr	r3, [r4, #0]
 8009dc6:	442b      	add	r3, r5
 8009dc8:	6023      	str	r3, [r4, #0]
 8009dca:	f8d8 3000 	ldr.w	r3, [r8]
 8009dce:	685a      	ldr	r2, [r3, #4]
 8009dd0:	bb62      	cbnz	r2, 8009e2c <_malloc_r+0xdc>
 8009dd2:	f8c8 7000 	str.w	r7, [r8]
 8009dd6:	e00f      	b.n	8009df8 <_malloc_r+0xa8>
 8009dd8:	6822      	ldr	r2, [r4, #0]
 8009dda:	1b52      	subs	r2, r2, r5
 8009ddc:	d420      	bmi.n	8009e20 <_malloc_r+0xd0>
 8009dde:	2a0b      	cmp	r2, #11
 8009de0:	d917      	bls.n	8009e12 <_malloc_r+0xc2>
 8009de2:	1961      	adds	r1, r4, r5
 8009de4:	42a3      	cmp	r3, r4
 8009de6:	6025      	str	r5, [r4, #0]
 8009de8:	bf18      	it	ne
 8009dea:	6059      	strne	r1, [r3, #4]
 8009dec:	6863      	ldr	r3, [r4, #4]
 8009dee:	bf08      	it	eq
 8009df0:	f8c8 1000 	streq.w	r1, [r8]
 8009df4:	5162      	str	r2, [r4, r5]
 8009df6:	604b      	str	r3, [r1, #4]
 8009df8:	4630      	mov	r0, r6
 8009dfa:	f000 f8ed 	bl	8009fd8 <__malloc_unlock>
 8009dfe:	f104 000b 	add.w	r0, r4, #11
 8009e02:	1d23      	adds	r3, r4, #4
 8009e04:	f020 0007 	bic.w	r0, r0, #7
 8009e08:	1ac2      	subs	r2, r0, r3
 8009e0a:	bf1c      	itt	ne
 8009e0c:	1a1b      	subne	r3, r3, r0
 8009e0e:	50a3      	strne	r3, [r4, r2]
 8009e10:	e7af      	b.n	8009d72 <_malloc_r+0x22>
 8009e12:	6862      	ldr	r2, [r4, #4]
 8009e14:	42a3      	cmp	r3, r4
 8009e16:	bf0c      	ite	eq
 8009e18:	f8c8 2000 	streq.w	r2, [r8]
 8009e1c:	605a      	strne	r2, [r3, #4]
 8009e1e:	e7eb      	b.n	8009df8 <_malloc_r+0xa8>
 8009e20:	4623      	mov	r3, r4
 8009e22:	6864      	ldr	r4, [r4, #4]
 8009e24:	e7ae      	b.n	8009d84 <_malloc_r+0x34>
 8009e26:	463c      	mov	r4, r7
 8009e28:	687f      	ldr	r7, [r7, #4]
 8009e2a:	e7b6      	b.n	8009d9a <_malloc_r+0x4a>
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	42a3      	cmp	r3, r4
 8009e32:	d1fb      	bne.n	8009e2c <_malloc_r+0xdc>
 8009e34:	2300      	movs	r3, #0
 8009e36:	6053      	str	r3, [r2, #4]
 8009e38:	e7de      	b.n	8009df8 <_malloc_r+0xa8>
 8009e3a:	230c      	movs	r3, #12
 8009e3c:	6033      	str	r3, [r6, #0]
 8009e3e:	4630      	mov	r0, r6
 8009e40:	f000 f8ca 	bl	8009fd8 <__malloc_unlock>
 8009e44:	e794      	b.n	8009d70 <_malloc_r+0x20>
 8009e46:	6005      	str	r5, [r0, #0]
 8009e48:	e7d6      	b.n	8009df8 <_malloc_r+0xa8>
 8009e4a:	bf00      	nop
 8009e4c:	20000464 	.word	0x20000464

08009e50 <__ascii_mbtowc>:
 8009e50:	b082      	sub	sp, #8
 8009e52:	b901      	cbnz	r1, 8009e56 <__ascii_mbtowc+0x6>
 8009e54:	a901      	add	r1, sp, #4
 8009e56:	b142      	cbz	r2, 8009e6a <__ascii_mbtowc+0x1a>
 8009e58:	b14b      	cbz	r3, 8009e6e <__ascii_mbtowc+0x1e>
 8009e5a:	7813      	ldrb	r3, [r2, #0]
 8009e5c:	600b      	str	r3, [r1, #0]
 8009e5e:	7812      	ldrb	r2, [r2, #0]
 8009e60:	1e10      	subs	r0, r2, #0
 8009e62:	bf18      	it	ne
 8009e64:	2001      	movne	r0, #1
 8009e66:	b002      	add	sp, #8
 8009e68:	4770      	bx	lr
 8009e6a:	4610      	mov	r0, r2
 8009e6c:	e7fb      	b.n	8009e66 <__ascii_mbtowc+0x16>
 8009e6e:	f06f 0001 	mvn.w	r0, #1
 8009e72:	e7f8      	b.n	8009e66 <__ascii_mbtowc+0x16>

08009e74 <__sflush_r>:
 8009e74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e7c:	0716      	lsls	r6, r2, #28
 8009e7e:	4605      	mov	r5, r0
 8009e80:	460c      	mov	r4, r1
 8009e82:	d454      	bmi.n	8009f2e <__sflush_r+0xba>
 8009e84:	684b      	ldr	r3, [r1, #4]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	dc02      	bgt.n	8009e90 <__sflush_r+0x1c>
 8009e8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	dd48      	ble.n	8009f22 <__sflush_r+0xae>
 8009e90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009e92:	2e00      	cmp	r6, #0
 8009e94:	d045      	beq.n	8009f22 <__sflush_r+0xae>
 8009e96:	2300      	movs	r3, #0
 8009e98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009e9c:	682f      	ldr	r7, [r5, #0]
 8009e9e:	6a21      	ldr	r1, [r4, #32]
 8009ea0:	602b      	str	r3, [r5, #0]
 8009ea2:	d030      	beq.n	8009f06 <__sflush_r+0x92>
 8009ea4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009ea6:	89a3      	ldrh	r3, [r4, #12]
 8009ea8:	0759      	lsls	r1, r3, #29
 8009eaa:	d505      	bpl.n	8009eb8 <__sflush_r+0x44>
 8009eac:	6863      	ldr	r3, [r4, #4]
 8009eae:	1ad2      	subs	r2, r2, r3
 8009eb0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009eb2:	b10b      	cbz	r3, 8009eb8 <__sflush_r+0x44>
 8009eb4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009eb6:	1ad2      	subs	r2, r2, r3
 8009eb8:	2300      	movs	r3, #0
 8009eba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009ebc:	6a21      	ldr	r1, [r4, #32]
 8009ebe:	4628      	mov	r0, r5
 8009ec0:	47b0      	blx	r6
 8009ec2:	1c43      	adds	r3, r0, #1
 8009ec4:	89a3      	ldrh	r3, [r4, #12]
 8009ec6:	d106      	bne.n	8009ed6 <__sflush_r+0x62>
 8009ec8:	6829      	ldr	r1, [r5, #0]
 8009eca:	291d      	cmp	r1, #29
 8009ecc:	d82b      	bhi.n	8009f26 <__sflush_r+0xb2>
 8009ece:	4a2a      	ldr	r2, [pc, #168]	@ (8009f78 <__sflush_r+0x104>)
 8009ed0:	410a      	asrs	r2, r1
 8009ed2:	07d6      	lsls	r6, r2, #31
 8009ed4:	d427      	bmi.n	8009f26 <__sflush_r+0xb2>
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	6062      	str	r2, [r4, #4]
 8009eda:	04d9      	lsls	r1, r3, #19
 8009edc:	6922      	ldr	r2, [r4, #16]
 8009ede:	6022      	str	r2, [r4, #0]
 8009ee0:	d504      	bpl.n	8009eec <__sflush_r+0x78>
 8009ee2:	1c42      	adds	r2, r0, #1
 8009ee4:	d101      	bne.n	8009eea <__sflush_r+0x76>
 8009ee6:	682b      	ldr	r3, [r5, #0]
 8009ee8:	b903      	cbnz	r3, 8009eec <__sflush_r+0x78>
 8009eea:	6560      	str	r0, [r4, #84]	@ 0x54
 8009eec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009eee:	602f      	str	r7, [r5, #0]
 8009ef0:	b1b9      	cbz	r1, 8009f22 <__sflush_r+0xae>
 8009ef2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ef6:	4299      	cmp	r1, r3
 8009ef8:	d002      	beq.n	8009f00 <__sflush_r+0x8c>
 8009efa:	4628      	mov	r0, r5
 8009efc:	f000 ff5e 	bl	800adbc <_free_r>
 8009f00:	2300      	movs	r3, #0
 8009f02:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f04:	e00d      	b.n	8009f22 <__sflush_r+0xae>
 8009f06:	2301      	movs	r3, #1
 8009f08:	4628      	mov	r0, r5
 8009f0a:	47b0      	blx	r6
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	1c50      	adds	r0, r2, #1
 8009f10:	d1c9      	bne.n	8009ea6 <__sflush_r+0x32>
 8009f12:	682b      	ldr	r3, [r5, #0]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d0c6      	beq.n	8009ea6 <__sflush_r+0x32>
 8009f18:	2b1d      	cmp	r3, #29
 8009f1a:	d001      	beq.n	8009f20 <__sflush_r+0xac>
 8009f1c:	2b16      	cmp	r3, #22
 8009f1e:	d11e      	bne.n	8009f5e <__sflush_r+0xea>
 8009f20:	602f      	str	r7, [r5, #0]
 8009f22:	2000      	movs	r0, #0
 8009f24:	e022      	b.n	8009f6c <__sflush_r+0xf8>
 8009f26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f2a:	b21b      	sxth	r3, r3
 8009f2c:	e01b      	b.n	8009f66 <__sflush_r+0xf2>
 8009f2e:	690f      	ldr	r7, [r1, #16]
 8009f30:	2f00      	cmp	r7, #0
 8009f32:	d0f6      	beq.n	8009f22 <__sflush_r+0xae>
 8009f34:	0793      	lsls	r3, r2, #30
 8009f36:	680e      	ldr	r6, [r1, #0]
 8009f38:	bf08      	it	eq
 8009f3a:	694b      	ldreq	r3, [r1, #20]
 8009f3c:	600f      	str	r7, [r1, #0]
 8009f3e:	bf18      	it	ne
 8009f40:	2300      	movne	r3, #0
 8009f42:	eba6 0807 	sub.w	r8, r6, r7
 8009f46:	608b      	str	r3, [r1, #8]
 8009f48:	f1b8 0f00 	cmp.w	r8, #0
 8009f4c:	dde9      	ble.n	8009f22 <__sflush_r+0xae>
 8009f4e:	6a21      	ldr	r1, [r4, #32]
 8009f50:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009f52:	4643      	mov	r3, r8
 8009f54:	463a      	mov	r2, r7
 8009f56:	4628      	mov	r0, r5
 8009f58:	47b0      	blx	r6
 8009f5a:	2800      	cmp	r0, #0
 8009f5c:	dc08      	bgt.n	8009f70 <__sflush_r+0xfc>
 8009f5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f66:	81a3      	strh	r3, [r4, #12]
 8009f68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f70:	4407      	add	r7, r0
 8009f72:	eba8 0800 	sub.w	r8, r8, r0
 8009f76:	e7e7      	b.n	8009f48 <__sflush_r+0xd4>
 8009f78:	dfbffffe 	.word	0xdfbffffe

08009f7c <_fflush_r>:
 8009f7c:	b538      	push	{r3, r4, r5, lr}
 8009f7e:	690b      	ldr	r3, [r1, #16]
 8009f80:	4605      	mov	r5, r0
 8009f82:	460c      	mov	r4, r1
 8009f84:	b913      	cbnz	r3, 8009f8c <_fflush_r+0x10>
 8009f86:	2500      	movs	r5, #0
 8009f88:	4628      	mov	r0, r5
 8009f8a:	bd38      	pop	{r3, r4, r5, pc}
 8009f8c:	b118      	cbz	r0, 8009f96 <_fflush_r+0x1a>
 8009f8e:	6a03      	ldr	r3, [r0, #32]
 8009f90:	b90b      	cbnz	r3, 8009f96 <_fflush_r+0x1a>
 8009f92:	f7fd faff 	bl	8007594 <__sinit>
 8009f96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d0f3      	beq.n	8009f86 <_fflush_r+0xa>
 8009f9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009fa0:	07d0      	lsls	r0, r2, #31
 8009fa2:	d404      	bmi.n	8009fae <_fflush_r+0x32>
 8009fa4:	0599      	lsls	r1, r3, #22
 8009fa6:	d402      	bmi.n	8009fae <_fflush_r+0x32>
 8009fa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009faa:	f7fe fa66 	bl	800847a <__retarget_lock_acquire_recursive>
 8009fae:	4628      	mov	r0, r5
 8009fb0:	4621      	mov	r1, r4
 8009fb2:	f7ff ff5f 	bl	8009e74 <__sflush_r>
 8009fb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009fb8:	07da      	lsls	r2, r3, #31
 8009fba:	4605      	mov	r5, r0
 8009fbc:	d4e4      	bmi.n	8009f88 <_fflush_r+0xc>
 8009fbe:	89a3      	ldrh	r3, [r4, #12]
 8009fc0:	059b      	lsls	r3, r3, #22
 8009fc2:	d4e1      	bmi.n	8009f88 <_fflush_r+0xc>
 8009fc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009fc6:	f7fe fa59 	bl	800847c <__retarget_lock_release_recursive>
 8009fca:	e7dd      	b.n	8009f88 <_fflush_r+0xc>

08009fcc <__malloc_lock>:
 8009fcc:	4801      	ldr	r0, [pc, #4]	@ (8009fd4 <__malloc_lock+0x8>)
 8009fce:	f7fe ba54 	b.w	800847a <__retarget_lock_acquire_recursive>
 8009fd2:	bf00      	nop
 8009fd4:	2000045c 	.word	0x2000045c

08009fd8 <__malloc_unlock>:
 8009fd8:	4801      	ldr	r0, [pc, #4]	@ (8009fe0 <__malloc_unlock+0x8>)
 8009fda:	f7fe ba4f 	b.w	800847c <__retarget_lock_release_recursive>
 8009fde:	bf00      	nop
 8009fe0:	2000045c 	.word	0x2000045c

08009fe4 <_Balloc>:
 8009fe4:	b570      	push	{r4, r5, r6, lr}
 8009fe6:	69c6      	ldr	r6, [r0, #28]
 8009fe8:	4604      	mov	r4, r0
 8009fea:	460d      	mov	r5, r1
 8009fec:	b976      	cbnz	r6, 800a00c <_Balloc+0x28>
 8009fee:	2010      	movs	r0, #16
 8009ff0:	f7ff fe84 	bl	8009cfc <malloc>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	61e0      	str	r0, [r4, #28]
 8009ff8:	b920      	cbnz	r0, 800a004 <_Balloc+0x20>
 8009ffa:	4b18      	ldr	r3, [pc, #96]	@ (800a05c <_Balloc+0x78>)
 8009ffc:	4818      	ldr	r0, [pc, #96]	@ (800a060 <_Balloc+0x7c>)
 8009ffe:	216b      	movs	r1, #107	@ 0x6b
 800a000:	f000 feaa 	bl	800ad58 <__assert_func>
 800a004:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a008:	6006      	str	r6, [r0, #0]
 800a00a:	60c6      	str	r6, [r0, #12]
 800a00c:	69e6      	ldr	r6, [r4, #28]
 800a00e:	68f3      	ldr	r3, [r6, #12]
 800a010:	b183      	cbz	r3, 800a034 <_Balloc+0x50>
 800a012:	69e3      	ldr	r3, [r4, #28]
 800a014:	68db      	ldr	r3, [r3, #12]
 800a016:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a01a:	b9b8      	cbnz	r0, 800a04c <_Balloc+0x68>
 800a01c:	2101      	movs	r1, #1
 800a01e:	fa01 f605 	lsl.w	r6, r1, r5
 800a022:	1d72      	adds	r2, r6, #5
 800a024:	0092      	lsls	r2, r2, #2
 800a026:	4620      	mov	r0, r4
 800a028:	f000 feb4 	bl	800ad94 <_calloc_r>
 800a02c:	b160      	cbz	r0, 800a048 <_Balloc+0x64>
 800a02e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a032:	e00e      	b.n	800a052 <_Balloc+0x6e>
 800a034:	2221      	movs	r2, #33	@ 0x21
 800a036:	2104      	movs	r1, #4
 800a038:	4620      	mov	r0, r4
 800a03a:	f000 feab 	bl	800ad94 <_calloc_r>
 800a03e:	69e3      	ldr	r3, [r4, #28]
 800a040:	60f0      	str	r0, [r6, #12]
 800a042:	68db      	ldr	r3, [r3, #12]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d1e4      	bne.n	800a012 <_Balloc+0x2e>
 800a048:	2000      	movs	r0, #0
 800a04a:	bd70      	pop	{r4, r5, r6, pc}
 800a04c:	6802      	ldr	r2, [r0, #0]
 800a04e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a052:	2300      	movs	r3, #0
 800a054:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a058:	e7f7      	b.n	800a04a <_Balloc+0x66>
 800a05a:	bf00      	nop
 800a05c:	0800b22e 	.word	0x0800b22e
 800a060:	0800b31f 	.word	0x0800b31f

0800a064 <_Bfree>:
 800a064:	b570      	push	{r4, r5, r6, lr}
 800a066:	69c6      	ldr	r6, [r0, #28]
 800a068:	4605      	mov	r5, r0
 800a06a:	460c      	mov	r4, r1
 800a06c:	b976      	cbnz	r6, 800a08c <_Bfree+0x28>
 800a06e:	2010      	movs	r0, #16
 800a070:	f7ff fe44 	bl	8009cfc <malloc>
 800a074:	4602      	mov	r2, r0
 800a076:	61e8      	str	r0, [r5, #28]
 800a078:	b920      	cbnz	r0, 800a084 <_Bfree+0x20>
 800a07a:	4b09      	ldr	r3, [pc, #36]	@ (800a0a0 <_Bfree+0x3c>)
 800a07c:	4809      	ldr	r0, [pc, #36]	@ (800a0a4 <_Bfree+0x40>)
 800a07e:	218f      	movs	r1, #143	@ 0x8f
 800a080:	f000 fe6a 	bl	800ad58 <__assert_func>
 800a084:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a088:	6006      	str	r6, [r0, #0]
 800a08a:	60c6      	str	r6, [r0, #12]
 800a08c:	b13c      	cbz	r4, 800a09e <_Bfree+0x3a>
 800a08e:	69eb      	ldr	r3, [r5, #28]
 800a090:	6862      	ldr	r2, [r4, #4]
 800a092:	68db      	ldr	r3, [r3, #12]
 800a094:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a098:	6021      	str	r1, [r4, #0]
 800a09a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a09e:	bd70      	pop	{r4, r5, r6, pc}
 800a0a0:	0800b22e 	.word	0x0800b22e
 800a0a4:	0800b31f 	.word	0x0800b31f

0800a0a8 <__multadd>:
 800a0a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0ac:	690d      	ldr	r5, [r1, #16]
 800a0ae:	4607      	mov	r7, r0
 800a0b0:	460c      	mov	r4, r1
 800a0b2:	461e      	mov	r6, r3
 800a0b4:	f101 0c14 	add.w	ip, r1, #20
 800a0b8:	2000      	movs	r0, #0
 800a0ba:	f8dc 3000 	ldr.w	r3, [ip]
 800a0be:	b299      	uxth	r1, r3
 800a0c0:	fb02 6101 	mla	r1, r2, r1, r6
 800a0c4:	0c1e      	lsrs	r6, r3, #16
 800a0c6:	0c0b      	lsrs	r3, r1, #16
 800a0c8:	fb02 3306 	mla	r3, r2, r6, r3
 800a0cc:	b289      	uxth	r1, r1
 800a0ce:	3001      	adds	r0, #1
 800a0d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a0d4:	4285      	cmp	r5, r0
 800a0d6:	f84c 1b04 	str.w	r1, [ip], #4
 800a0da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a0de:	dcec      	bgt.n	800a0ba <__multadd+0x12>
 800a0e0:	b30e      	cbz	r6, 800a126 <__multadd+0x7e>
 800a0e2:	68a3      	ldr	r3, [r4, #8]
 800a0e4:	42ab      	cmp	r3, r5
 800a0e6:	dc19      	bgt.n	800a11c <__multadd+0x74>
 800a0e8:	6861      	ldr	r1, [r4, #4]
 800a0ea:	4638      	mov	r0, r7
 800a0ec:	3101      	adds	r1, #1
 800a0ee:	f7ff ff79 	bl	8009fe4 <_Balloc>
 800a0f2:	4680      	mov	r8, r0
 800a0f4:	b928      	cbnz	r0, 800a102 <__multadd+0x5a>
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	4b0c      	ldr	r3, [pc, #48]	@ (800a12c <__multadd+0x84>)
 800a0fa:	480d      	ldr	r0, [pc, #52]	@ (800a130 <__multadd+0x88>)
 800a0fc:	21ba      	movs	r1, #186	@ 0xba
 800a0fe:	f000 fe2b 	bl	800ad58 <__assert_func>
 800a102:	6922      	ldr	r2, [r4, #16]
 800a104:	3202      	adds	r2, #2
 800a106:	f104 010c 	add.w	r1, r4, #12
 800a10a:	0092      	lsls	r2, r2, #2
 800a10c:	300c      	adds	r0, #12
 800a10e:	f7fe f9b6 	bl	800847e <memcpy>
 800a112:	4621      	mov	r1, r4
 800a114:	4638      	mov	r0, r7
 800a116:	f7ff ffa5 	bl	800a064 <_Bfree>
 800a11a:	4644      	mov	r4, r8
 800a11c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a120:	3501      	adds	r5, #1
 800a122:	615e      	str	r6, [r3, #20]
 800a124:	6125      	str	r5, [r4, #16]
 800a126:	4620      	mov	r0, r4
 800a128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a12c:	0800b29d 	.word	0x0800b29d
 800a130:	0800b31f 	.word	0x0800b31f

0800a134 <__s2b>:
 800a134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a138:	460c      	mov	r4, r1
 800a13a:	4615      	mov	r5, r2
 800a13c:	461f      	mov	r7, r3
 800a13e:	2209      	movs	r2, #9
 800a140:	3308      	adds	r3, #8
 800a142:	4606      	mov	r6, r0
 800a144:	fb93 f3f2 	sdiv	r3, r3, r2
 800a148:	2100      	movs	r1, #0
 800a14a:	2201      	movs	r2, #1
 800a14c:	429a      	cmp	r2, r3
 800a14e:	db09      	blt.n	800a164 <__s2b+0x30>
 800a150:	4630      	mov	r0, r6
 800a152:	f7ff ff47 	bl	8009fe4 <_Balloc>
 800a156:	b940      	cbnz	r0, 800a16a <__s2b+0x36>
 800a158:	4602      	mov	r2, r0
 800a15a:	4b19      	ldr	r3, [pc, #100]	@ (800a1c0 <__s2b+0x8c>)
 800a15c:	4819      	ldr	r0, [pc, #100]	@ (800a1c4 <__s2b+0x90>)
 800a15e:	21d3      	movs	r1, #211	@ 0xd3
 800a160:	f000 fdfa 	bl	800ad58 <__assert_func>
 800a164:	0052      	lsls	r2, r2, #1
 800a166:	3101      	adds	r1, #1
 800a168:	e7f0      	b.n	800a14c <__s2b+0x18>
 800a16a:	9b08      	ldr	r3, [sp, #32]
 800a16c:	6143      	str	r3, [r0, #20]
 800a16e:	2d09      	cmp	r5, #9
 800a170:	f04f 0301 	mov.w	r3, #1
 800a174:	6103      	str	r3, [r0, #16]
 800a176:	dd16      	ble.n	800a1a6 <__s2b+0x72>
 800a178:	f104 0909 	add.w	r9, r4, #9
 800a17c:	46c8      	mov	r8, r9
 800a17e:	442c      	add	r4, r5
 800a180:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a184:	4601      	mov	r1, r0
 800a186:	3b30      	subs	r3, #48	@ 0x30
 800a188:	220a      	movs	r2, #10
 800a18a:	4630      	mov	r0, r6
 800a18c:	f7ff ff8c 	bl	800a0a8 <__multadd>
 800a190:	45a0      	cmp	r8, r4
 800a192:	d1f5      	bne.n	800a180 <__s2b+0x4c>
 800a194:	f1a5 0408 	sub.w	r4, r5, #8
 800a198:	444c      	add	r4, r9
 800a19a:	1b2d      	subs	r5, r5, r4
 800a19c:	1963      	adds	r3, r4, r5
 800a19e:	42bb      	cmp	r3, r7
 800a1a0:	db04      	blt.n	800a1ac <__s2b+0x78>
 800a1a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1a6:	340a      	adds	r4, #10
 800a1a8:	2509      	movs	r5, #9
 800a1aa:	e7f6      	b.n	800a19a <__s2b+0x66>
 800a1ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a1b0:	4601      	mov	r1, r0
 800a1b2:	3b30      	subs	r3, #48	@ 0x30
 800a1b4:	220a      	movs	r2, #10
 800a1b6:	4630      	mov	r0, r6
 800a1b8:	f7ff ff76 	bl	800a0a8 <__multadd>
 800a1bc:	e7ee      	b.n	800a19c <__s2b+0x68>
 800a1be:	bf00      	nop
 800a1c0:	0800b29d 	.word	0x0800b29d
 800a1c4:	0800b31f 	.word	0x0800b31f

0800a1c8 <__hi0bits>:
 800a1c8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	bf36      	itet	cc
 800a1d0:	0403      	lslcc	r3, r0, #16
 800a1d2:	2000      	movcs	r0, #0
 800a1d4:	2010      	movcc	r0, #16
 800a1d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a1da:	bf3c      	itt	cc
 800a1dc:	021b      	lslcc	r3, r3, #8
 800a1de:	3008      	addcc	r0, #8
 800a1e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a1e4:	bf3c      	itt	cc
 800a1e6:	011b      	lslcc	r3, r3, #4
 800a1e8:	3004      	addcc	r0, #4
 800a1ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1ee:	bf3c      	itt	cc
 800a1f0:	009b      	lslcc	r3, r3, #2
 800a1f2:	3002      	addcc	r0, #2
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	db05      	blt.n	800a204 <__hi0bits+0x3c>
 800a1f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a1fc:	f100 0001 	add.w	r0, r0, #1
 800a200:	bf08      	it	eq
 800a202:	2020      	moveq	r0, #32
 800a204:	4770      	bx	lr

0800a206 <__lo0bits>:
 800a206:	6803      	ldr	r3, [r0, #0]
 800a208:	4602      	mov	r2, r0
 800a20a:	f013 0007 	ands.w	r0, r3, #7
 800a20e:	d00b      	beq.n	800a228 <__lo0bits+0x22>
 800a210:	07d9      	lsls	r1, r3, #31
 800a212:	d421      	bmi.n	800a258 <__lo0bits+0x52>
 800a214:	0798      	lsls	r0, r3, #30
 800a216:	bf49      	itett	mi
 800a218:	085b      	lsrmi	r3, r3, #1
 800a21a:	089b      	lsrpl	r3, r3, #2
 800a21c:	2001      	movmi	r0, #1
 800a21e:	6013      	strmi	r3, [r2, #0]
 800a220:	bf5c      	itt	pl
 800a222:	6013      	strpl	r3, [r2, #0]
 800a224:	2002      	movpl	r0, #2
 800a226:	4770      	bx	lr
 800a228:	b299      	uxth	r1, r3
 800a22a:	b909      	cbnz	r1, 800a230 <__lo0bits+0x2a>
 800a22c:	0c1b      	lsrs	r3, r3, #16
 800a22e:	2010      	movs	r0, #16
 800a230:	b2d9      	uxtb	r1, r3
 800a232:	b909      	cbnz	r1, 800a238 <__lo0bits+0x32>
 800a234:	3008      	adds	r0, #8
 800a236:	0a1b      	lsrs	r3, r3, #8
 800a238:	0719      	lsls	r1, r3, #28
 800a23a:	bf04      	itt	eq
 800a23c:	091b      	lsreq	r3, r3, #4
 800a23e:	3004      	addeq	r0, #4
 800a240:	0799      	lsls	r1, r3, #30
 800a242:	bf04      	itt	eq
 800a244:	089b      	lsreq	r3, r3, #2
 800a246:	3002      	addeq	r0, #2
 800a248:	07d9      	lsls	r1, r3, #31
 800a24a:	d403      	bmi.n	800a254 <__lo0bits+0x4e>
 800a24c:	085b      	lsrs	r3, r3, #1
 800a24e:	f100 0001 	add.w	r0, r0, #1
 800a252:	d003      	beq.n	800a25c <__lo0bits+0x56>
 800a254:	6013      	str	r3, [r2, #0]
 800a256:	4770      	bx	lr
 800a258:	2000      	movs	r0, #0
 800a25a:	4770      	bx	lr
 800a25c:	2020      	movs	r0, #32
 800a25e:	4770      	bx	lr

0800a260 <__i2b>:
 800a260:	b510      	push	{r4, lr}
 800a262:	460c      	mov	r4, r1
 800a264:	2101      	movs	r1, #1
 800a266:	f7ff febd 	bl	8009fe4 <_Balloc>
 800a26a:	4602      	mov	r2, r0
 800a26c:	b928      	cbnz	r0, 800a27a <__i2b+0x1a>
 800a26e:	4b05      	ldr	r3, [pc, #20]	@ (800a284 <__i2b+0x24>)
 800a270:	4805      	ldr	r0, [pc, #20]	@ (800a288 <__i2b+0x28>)
 800a272:	f240 1145 	movw	r1, #325	@ 0x145
 800a276:	f000 fd6f 	bl	800ad58 <__assert_func>
 800a27a:	2301      	movs	r3, #1
 800a27c:	6144      	str	r4, [r0, #20]
 800a27e:	6103      	str	r3, [r0, #16]
 800a280:	bd10      	pop	{r4, pc}
 800a282:	bf00      	nop
 800a284:	0800b29d 	.word	0x0800b29d
 800a288:	0800b31f 	.word	0x0800b31f

0800a28c <__multiply>:
 800a28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a290:	4614      	mov	r4, r2
 800a292:	690a      	ldr	r2, [r1, #16]
 800a294:	6923      	ldr	r3, [r4, #16]
 800a296:	429a      	cmp	r2, r3
 800a298:	bfa8      	it	ge
 800a29a:	4623      	movge	r3, r4
 800a29c:	460f      	mov	r7, r1
 800a29e:	bfa4      	itt	ge
 800a2a0:	460c      	movge	r4, r1
 800a2a2:	461f      	movge	r7, r3
 800a2a4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a2a8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a2ac:	68a3      	ldr	r3, [r4, #8]
 800a2ae:	6861      	ldr	r1, [r4, #4]
 800a2b0:	eb0a 0609 	add.w	r6, sl, r9
 800a2b4:	42b3      	cmp	r3, r6
 800a2b6:	b085      	sub	sp, #20
 800a2b8:	bfb8      	it	lt
 800a2ba:	3101      	addlt	r1, #1
 800a2bc:	f7ff fe92 	bl	8009fe4 <_Balloc>
 800a2c0:	b930      	cbnz	r0, 800a2d0 <__multiply+0x44>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	4b44      	ldr	r3, [pc, #272]	@ (800a3d8 <__multiply+0x14c>)
 800a2c6:	4845      	ldr	r0, [pc, #276]	@ (800a3dc <__multiply+0x150>)
 800a2c8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a2cc:	f000 fd44 	bl	800ad58 <__assert_func>
 800a2d0:	f100 0514 	add.w	r5, r0, #20
 800a2d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a2d8:	462b      	mov	r3, r5
 800a2da:	2200      	movs	r2, #0
 800a2dc:	4543      	cmp	r3, r8
 800a2de:	d321      	bcc.n	800a324 <__multiply+0x98>
 800a2e0:	f107 0114 	add.w	r1, r7, #20
 800a2e4:	f104 0214 	add.w	r2, r4, #20
 800a2e8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a2ec:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a2f0:	9302      	str	r3, [sp, #8]
 800a2f2:	1b13      	subs	r3, r2, r4
 800a2f4:	3b15      	subs	r3, #21
 800a2f6:	f023 0303 	bic.w	r3, r3, #3
 800a2fa:	3304      	adds	r3, #4
 800a2fc:	f104 0715 	add.w	r7, r4, #21
 800a300:	42ba      	cmp	r2, r7
 800a302:	bf38      	it	cc
 800a304:	2304      	movcc	r3, #4
 800a306:	9301      	str	r3, [sp, #4]
 800a308:	9b02      	ldr	r3, [sp, #8]
 800a30a:	9103      	str	r1, [sp, #12]
 800a30c:	428b      	cmp	r3, r1
 800a30e:	d80c      	bhi.n	800a32a <__multiply+0x9e>
 800a310:	2e00      	cmp	r6, #0
 800a312:	dd03      	ble.n	800a31c <__multiply+0x90>
 800a314:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d05b      	beq.n	800a3d4 <__multiply+0x148>
 800a31c:	6106      	str	r6, [r0, #16]
 800a31e:	b005      	add	sp, #20
 800a320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a324:	f843 2b04 	str.w	r2, [r3], #4
 800a328:	e7d8      	b.n	800a2dc <__multiply+0x50>
 800a32a:	f8b1 a000 	ldrh.w	sl, [r1]
 800a32e:	f1ba 0f00 	cmp.w	sl, #0
 800a332:	d024      	beq.n	800a37e <__multiply+0xf2>
 800a334:	f104 0e14 	add.w	lr, r4, #20
 800a338:	46a9      	mov	r9, r5
 800a33a:	f04f 0c00 	mov.w	ip, #0
 800a33e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a342:	f8d9 3000 	ldr.w	r3, [r9]
 800a346:	fa1f fb87 	uxth.w	fp, r7
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	fb0a 330b 	mla	r3, sl, fp, r3
 800a350:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a354:	f8d9 7000 	ldr.w	r7, [r9]
 800a358:	4463      	add	r3, ip
 800a35a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a35e:	fb0a c70b 	mla	r7, sl, fp, ip
 800a362:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a366:	b29b      	uxth	r3, r3
 800a368:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a36c:	4572      	cmp	r2, lr
 800a36e:	f849 3b04 	str.w	r3, [r9], #4
 800a372:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a376:	d8e2      	bhi.n	800a33e <__multiply+0xb2>
 800a378:	9b01      	ldr	r3, [sp, #4]
 800a37a:	f845 c003 	str.w	ip, [r5, r3]
 800a37e:	9b03      	ldr	r3, [sp, #12]
 800a380:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a384:	3104      	adds	r1, #4
 800a386:	f1b9 0f00 	cmp.w	r9, #0
 800a38a:	d021      	beq.n	800a3d0 <__multiply+0x144>
 800a38c:	682b      	ldr	r3, [r5, #0]
 800a38e:	f104 0c14 	add.w	ip, r4, #20
 800a392:	46ae      	mov	lr, r5
 800a394:	f04f 0a00 	mov.w	sl, #0
 800a398:	f8bc b000 	ldrh.w	fp, [ip]
 800a39c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a3a0:	fb09 770b 	mla	r7, r9, fp, r7
 800a3a4:	4457      	add	r7, sl
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a3ac:	f84e 3b04 	str.w	r3, [lr], #4
 800a3b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a3b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a3b8:	f8be 3000 	ldrh.w	r3, [lr]
 800a3bc:	fb09 330a 	mla	r3, r9, sl, r3
 800a3c0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a3c4:	4562      	cmp	r2, ip
 800a3c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a3ca:	d8e5      	bhi.n	800a398 <__multiply+0x10c>
 800a3cc:	9f01      	ldr	r7, [sp, #4]
 800a3ce:	51eb      	str	r3, [r5, r7]
 800a3d0:	3504      	adds	r5, #4
 800a3d2:	e799      	b.n	800a308 <__multiply+0x7c>
 800a3d4:	3e01      	subs	r6, #1
 800a3d6:	e79b      	b.n	800a310 <__multiply+0x84>
 800a3d8:	0800b29d 	.word	0x0800b29d
 800a3dc:	0800b31f 	.word	0x0800b31f

0800a3e0 <__pow5mult>:
 800a3e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3e4:	4615      	mov	r5, r2
 800a3e6:	f012 0203 	ands.w	r2, r2, #3
 800a3ea:	4607      	mov	r7, r0
 800a3ec:	460e      	mov	r6, r1
 800a3ee:	d007      	beq.n	800a400 <__pow5mult+0x20>
 800a3f0:	4c25      	ldr	r4, [pc, #148]	@ (800a488 <__pow5mult+0xa8>)
 800a3f2:	3a01      	subs	r2, #1
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a3fa:	f7ff fe55 	bl	800a0a8 <__multadd>
 800a3fe:	4606      	mov	r6, r0
 800a400:	10ad      	asrs	r5, r5, #2
 800a402:	d03d      	beq.n	800a480 <__pow5mult+0xa0>
 800a404:	69fc      	ldr	r4, [r7, #28]
 800a406:	b97c      	cbnz	r4, 800a428 <__pow5mult+0x48>
 800a408:	2010      	movs	r0, #16
 800a40a:	f7ff fc77 	bl	8009cfc <malloc>
 800a40e:	4602      	mov	r2, r0
 800a410:	61f8      	str	r0, [r7, #28]
 800a412:	b928      	cbnz	r0, 800a420 <__pow5mult+0x40>
 800a414:	4b1d      	ldr	r3, [pc, #116]	@ (800a48c <__pow5mult+0xac>)
 800a416:	481e      	ldr	r0, [pc, #120]	@ (800a490 <__pow5mult+0xb0>)
 800a418:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a41c:	f000 fc9c 	bl	800ad58 <__assert_func>
 800a420:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a424:	6004      	str	r4, [r0, #0]
 800a426:	60c4      	str	r4, [r0, #12]
 800a428:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a42c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a430:	b94c      	cbnz	r4, 800a446 <__pow5mult+0x66>
 800a432:	f240 2171 	movw	r1, #625	@ 0x271
 800a436:	4638      	mov	r0, r7
 800a438:	f7ff ff12 	bl	800a260 <__i2b>
 800a43c:	2300      	movs	r3, #0
 800a43e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a442:	4604      	mov	r4, r0
 800a444:	6003      	str	r3, [r0, #0]
 800a446:	f04f 0900 	mov.w	r9, #0
 800a44a:	07eb      	lsls	r3, r5, #31
 800a44c:	d50a      	bpl.n	800a464 <__pow5mult+0x84>
 800a44e:	4631      	mov	r1, r6
 800a450:	4622      	mov	r2, r4
 800a452:	4638      	mov	r0, r7
 800a454:	f7ff ff1a 	bl	800a28c <__multiply>
 800a458:	4631      	mov	r1, r6
 800a45a:	4680      	mov	r8, r0
 800a45c:	4638      	mov	r0, r7
 800a45e:	f7ff fe01 	bl	800a064 <_Bfree>
 800a462:	4646      	mov	r6, r8
 800a464:	106d      	asrs	r5, r5, #1
 800a466:	d00b      	beq.n	800a480 <__pow5mult+0xa0>
 800a468:	6820      	ldr	r0, [r4, #0]
 800a46a:	b938      	cbnz	r0, 800a47c <__pow5mult+0x9c>
 800a46c:	4622      	mov	r2, r4
 800a46e:	4621      	mov	r1, r4
 800a470:	4638      	mov	r0, r7
 800a472:	f7ff ff0b 	bl	800a28c <__multiply>
 800a476:	6020      	str	r0, [r4, #0]
 800a478:	f8c0 9000 	str.w	r9, [r0]
 800a47c:	4604      	mov	r4, r0
 800a47e:	e7e4      	b.n	800a44a <__pow5mult+0x6a>
 800a480:	4630      	mov	r0, r6
 800a482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a486:	bf00      	nop
 800a488:	0800b378 	.word	0x0800b378
 800a48c:	0800b22e 	.word	0x0800b22e
 800a490:	0800b31f 	.word	0x0800b31f

0800a494 <__lshift>:
 800a494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a498:	460c      	mov	r4, r1
 800a49a:	6849      	ldr	r1, [r1, #4]
 800a49c:	6923      	ldr	r3, [r4, #16]
 800a49e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a4a2:	68a3      	ldr	r3, [r4, #8]
 800a4a4:	4607      	mov	r7, r0
 800a4a6:	4691      	mov	r9, r2
 800a4a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a4ac:	f108 0601 	add.w	r6, r8, #1
 800a4b0:	42b3      	cmp	r3, r6
 800a4b2:	db0b      	blt.n	800a4cc <__lshift+0x38>
 800a4b4:	4638      	mov	r0, r7
 800a4b6:	f7ff fd95 	bl	8009fe4 <_Balloc>
 800a4ba:	4605      	mov	r5, r0
 800a4bc:	b948      	cbnz	r0, 800a4d2 <__lshift+0x3e>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	4b28      	ldr	r3, [pc, #160]	@ (800a564 <__lshift+0xd0>)
 800a4c2:	4829      	ldr	r0, [pc, #164]	@ (800a568 <__lshift+0xd4>)
 800a4c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a4c8:	f000 fc46 	bl	800ad58 <__assert_func>
 800a4cc:	3101      	adds	r1, #1
 800a4ce:	005b      	lsls	r3, r3, #1
 800a4d0:	e7ee      	b.n	800a4b0 <__lshift+0x1c>
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	f100 0114 	add.w	r1, r0, #20
 800a4d8:	f100 0210 	add.w	r2, r0, #16
 800a4dc:	4618      	mov	r0, r3
 800a4de:	4553      	cmp	r3, sl
 800a4e0:	db33      	blt.n	800a54a <__lshift+0xb6>
 800a4e2:	6920      	ldr	r0, [r4, #16]
 800a4e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a4e8:	f104 0314 	add.w	r3, r4, #20
 800a4ec:	f019 091f 	ands.w	r9, r9, #31
 800a4f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a4f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a4f8:	d02b      	beq.n	800a552 <__lshift+0xbe>
 800a4fa:	f1c9 0e20 	rsb	lr, r9, #32
 800a4fe:	468a      	mov	sl, r1
 800a500:	2200      	movs	r2, #0
 800a502:	6818      	ldr	r0, [r3, #0]
 800a504:	fa00 f009 	lsl.w	r0, r0, r9
 800a508:	4310      	orrs	r0, r2
 800a50a:	f84a 0b04 	str.w	r0, [sl], #4
 800a50e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a512:	459c      	cmp	ip, r3
 800a514:	fa22 f20e 	lsr.w	r2, r2, lr
 800a518:	d8f3      	bhi.n	800a502 <__lshift+0x6e>
 800a51a:	ebac 0304 	sub.w	r3, ip, r4
 800a51e:	3b15      	subs	r3, #21
 800a520:	f023 0303 	bic.w	r3, r3, #3
 800a524:	3304      	adds	r3, #4
 800a526:	f104 0015 	add.w	r0, r4, #21
 800a52a:	4584      	cmp	ip, r0
 800a52c:	bf38      	it	cc
 800a52e:	2304      	movcc	r3, #4
 800a530:	50ca      	str	r2, [r1, r3]
 800a532:	b10a      	cbz	r2, 800a538 <__lshift+0xa4>
 800a534:	f108 0602 	add.w	r6, r8, #2
 800a538:	3e01      	subs	r6, #1
 800a53a:	4638      	mov	r0, r7
 800a53c:	612e      	str	r6, [r5, #16]
 800a53e:	4621      	mov	r1, r4
 800a540:	f7ff fd90 	bl	800a064 <_Bfree>
 800a544:	4628      	mov	r0, r5
 800a546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a54a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a54e:	3301      	adds	r3, #1
 800a550:	e7c5      	b.n	800a4de <__lshift+0x4a>
 800a552:	3904      	subs	r1, #4
 800a554:	f853 2b04 	ldr.w	r2, [r3], #4
 800a558:	f841 2f04 	str.w	r2, [r1, #4]!
 800a55c:	459c      	cmp	ip, r3
 800a55e:	d8f9      	bhi.n	800a554 <__lshift+0xc0>
 800a560:	e7ea      	b.n	800a538 <__lshift+0xa4>
 800a562:	bf00      	nop
 800a564:	0800b29d 	.word	0x0800b29d
 800a568:	0800b31f 	.word	0x0800b31f

0800a56c <__mcmp>:
 800a56c:	690a      	ldr	r2, [r1, #16]
 800a56e:	4603      	mov	r3, r0
 800a570:	6900      	ldr	r0, [r0, #16]
 800a572:	1a80      	subs	r0, r0, r2
 800a574:	b530      	push	{r4, r5, lr}
 800a576:	d10e      	bne.n	800a596 <__mcmp+0x2a>
 800a578:	3314      	adds	r3, #20
 800a57a:	3114      	adds	r1, #20
 800a57c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a580:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a584:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a588:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a58c:	4295      	cmp	r5, r2
 800a58e:	d003      	beq.n	800a598 <__mcmp+0x2c>
 800a590:	d205      	bcs.n	800a59e <__mcmp+0x32>
 800a592:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a596:	bd30      	pop	{r4, r5, pc}
 800a598:	42a3      	cmp	r3, r4
 800a59a:	d3f3      	bcc.n	800a584 <__mcmp+0x18>
 800a59c:	e7fb      	b.n	800a596 <__mcmp+0x2a>
 800a59e:	2001      	movs	r0, #1
 800a5a0:	e7f9      	b.n	800a596 <__mcmp+0x2a>
	...

0800a5a4 <__mdiff>:
 800a5a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5a8:	4689      	mov	r9, r1
 800a5aa:	4606      	mov	r6, r0
 800a5ac:	4611      	mov	r1, r2
 800a5ae:	4648      	mov	r0, r9
 800a5b0:	4614      	mov	r4, r2
 800a5b2:	f7ff ffdb 	bl	800a56c <__mcmp>
 800a5b6:	1e05      	subs	r5, r0, #0
 800a5b8:	d112      	bne.n	800a5e0 <__mdiff+0x3c>
 800a5ba:	4629      	mov	r1, r5
 800a5bc:	4630      	mov	r0, r6
 800a5be:	f7ff fd11 	bl	8009fe4 <_Balloc>
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	b928      	cbnz	r0, 800a5d2 <__mdiff+0x2e>
 800a5c6:	4b3f      	ldr	r3, [pc, #252]	@ (800a6c4 <__mdiff+0x120>)
 800a5c8:	f240 2137 	movw	r1, #567	@ 0x237
 800a5cc:	483e      	ldr	r0, [pc, #248]	@ (800a6c8 <__mdiff+0x124>)
 800a5ce:	f000 fbc3 	bl	800ad58 <__assert_func>
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a5d8:	4610      	mov	r0, r2
 800a5da:	b003      	add	sp, #12
 800a5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5e0:	bfbc      	itt	lt
 800a5e2:	464b      	movlt	r3, r9
 800a5e4:	46a1      	movlt	r9, r4
 800a5e6:	4630      	mov	r0, r6
 800a5e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a5ec:	bfba      	itte	lt
 800a5ee:	461c      	movlt	r4, r3
 800a5f0:	2501      	movlt	r5, #1
 800a5f2:	2500      	movge	r5, #0
 800a5f4:	f7ff fcf6 	bl	8009fe4 <_Balloc>
 800a5f8:	4602      	mov	r2, r0
 800a5fa:	b918      	cbnz	r0, 800a604 <__mdiff+0x60>
 800a5fc:	4b31      	ldr	r3, [pc, #196]	@ (800a6c4 <__mdiff+0x120>)
 800a5fe:	f240 2145 	movw	r1, #581	@ 0x245
 800a602:	e7e3      	b.n	800a5cc <__mdiff+0x28>
 800a604:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a608:	6926      	ldr	r6, [r4, #16]
 800a60a:	60c5      	str	r5, [r0, #12]
 800a60c:	f109 0310 	add.w	r3, r9, #16
 800a610:	f109 0514 	add.w	r5, r9, #20
 800a614:	f104 0e14 	add.w	lr, r4, #20
 800a618:	f100 0b14 	add.w	fp, r0, #20
 800a61c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a620:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a624:	9301      	str	r3, [sp, #4]
 800a626:	46d9      	mov	r9, fp
 800a628:	f04f 0c00 	mov.w	ip, #0
 800a62c:	9b01      	ldr	r3, [sp, #4]
 800a62e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a632:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a636:	9301      	str	r3, [sp, #4]
 800a638:	fa1f f38a 	uxth.w	r3, sl
 800a63c:	4619      	mov	r1, r3
 800a63e:	b283      	uxth	r3, r0
 800a640:	1acb      	subs	r3, r1, r3
 800a642:	0c00      	lsrs	r0, r0, #16
 800a644:	4463      	add	r3, ip
 800a646:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a64a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a64e:	b29b      	uxth	r3, r3
 800a650:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a654:	4576      	cmp	r6, lr
 800a656:	f849 3b04 	str.w	r3, [r9], #4
 800a65a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a65e:	d8e5      	bhi.n	800a62c <__mdiff+0x88>
 800a660:	1b33      	subs	r3, r6, r4
 800a662:	3b15      	subs	r3, #21
 800a664:	f023 0303 	bic.w	r3, r3, #3
 800a668:	3415      	adds	r4, #21
 800a66a:	3304      	adds	r3, #4
 800a66c:	42a6      	cmp	r6, r4
 800a66e:	bf38      	it	cc
 800a670:	2304      	movcc	r3, #4
 800a672:	441d      	add	r5, r3
 800a674:	445b      	add	r3, fp
 800a676:	461e      	mov	r6, r3
 800a678:	462c      	mov	r4, r5
 800a67a:	4544      	cmp	r4, r8
 800a67c:	d30e      	bcc.n	800a69c <__mdiff+0xf8>
 800a67e:	f108 0103 	add.w	r1, r8, #3
 800a682:	1b49      	subs	r1, r1, r5
 800a684:	f021 0103 	bic.w	r1, r1, #3
 800a688:	3d03      	subs	r5, #3
 800a68a:	45a8      	cmp	r8, r5
 800a68c:	bf38      	it	cc
 800a68e:	2100      	movcc	r1, #0
 800a690:	440b      	add	r3, r1
 800a692:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a696:	b191      	cbz	r1, 800a6be <__mdiff+0x11a>
 800a698:	6117      	str	r7, [r2, #16]
 800a69a:	e79d      	b.n	800a5d8 <__mdiff+0x34>
 800a69c:	f854 1b04 	ldr.w	r1, [r4], #4
 800a6a0:	46e6      	mov	lr, ip
 800a6a2:	0c08      	lsrs	r0, r1, #16
 800a6a4:	fa1c fc81 	uxtah	ip, ip, r1
 800a6a8:	4471      	add	r1, lr
 800a6aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a6ae:	b289      	uxth	r1, r1
 800a6b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a6b4:	f846 1b04 	str.w	r1, [r6], #4
 800a6b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a6bc:	e7dd      	b.n	800a67a <__mdiff+0xd6>
 800a6be:	3f01      	subs	r7, #1
 800a6c0:	e7e7      	b.n	800a692 <__mdiff+0xee>
 800a6c2:	bf00      	nop
 800a6c4:	0800b29d 	.word	0x0800b29d
 800a6c8:	0800b31f 	.word	0x0800b31f

0800a6cc <__ulp>:
 800a6cc:	b082      	sub	sp, #8
 800a6ce:	ed8d 0b00 	vstr	d0, [sp]
 800a6d2:	9a01      	ldr	r2, [sp, #4]
 800a6d4:	4b0f      	ldr	r3, [pc, #60]	@ (800a714 <__ulp+0x48>)
 800a6d6:	4013      	ands	r3, r2
 800a6d8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	dc08      	bgt.n	800a6f2 <__ulp+0x26>
 800a6e0:	425b      	negs	r3, r3
 800a6e2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a6e6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a6ea:	da04      	bge.n	800a6f6 <__ulp+0x2a>
 800a6ec:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a6f0:	4113      	asrs	r3, r2
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	e008      	b.n	800a708 <__ulp+0x3c>
 800a6f6:	f1a2 0314 	sub.w	r3, r2, #20
 800a6fa:	2b1e      	cmp	r3, #30
 800a6fc:	bfda      	itte	le
 800a6fe:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a702:	40da      	lsrle	r2, r3
 800a704:	2201      	movgt	r2, #1
 800a706:	2300      	movs	r3, #0
 800a708:	4619      	mov	r1, r3
 800a70a:	4610      	mov	r0, r2
 800a70c:	ec41 0b10 	vmov	d0, r0, r1
 800a710:	b002      	add	sp, #8
 800a712:	4770      	bx	lr
 800a714:	7ff00000 	.word	0x7ff00000

0800a718 <__b2d>:
 800a718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a71c:	6906      	ldr	r6, [r0, #16]
 800a71e:	f100 0814 	add.w	r8, r0, #20
 800a722:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a726:	1f37      	subs	r7, r6, #4
 800a728:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a72c:	4610      	mov	r0, r2
 800a72e:	f7ff fd4b 	bl	800a1c8 <__hi0bits>
 800a732:	f1c0 0320 	rsb	r3, r0, #32
 800a736:	280a      	cmp	r0, #10
 800a738:	600b      	str	r3, [r1, #0]
 800a73a:	491b      	ldr	r1, [pc, #108]	@ (800a7a8 <__b2d+0x90>)
 800a73c:	dc15      	bgt.n	800a76a <__b2d+0x52>
 800a73e:	f1c0 0c0b 	rsb	ip, r0, #11
 800a742:	fa22 f30c 	lsr.w	r3, r2, ip
 800a746:	45b8      	cmp	r8, r7
 800a748:	ea43 0501 	orr.w	r5, r3, r1
 800a74c:	bf34      	ite	cc
 800a74e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a752:	2300      	movcs	r3, #0
 800a754:	3015      	adds	r0, #21
 800a756:	fa02 f000 	lsl.w	r0, r2, r0
 800a75a:	fa23 f30c 	lsr.w	r3, r3, ip
 800a75e:	4303      	orrs	r3, r0
 800a760:	461c      	mov	r4, r3
 800a762:	ec45 4b10 	vmov	d0, r4, r5
 800a766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a76a:	45b8      	cmp	r8, r7
 800a76c:	bf3a      	itte	cc
 800a76e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a772:	f1a6 0708 	subcc.w	r7, r6, #8
 800a776:	2300      	movcs	r3, #0
 800a778:	380b      	subs	r0, #11
 800a77a:	d012      	beq.n	800a7a2 <__b2d+0x8a>
 800a77c:	f1c0 0120 	rsb	r1, r0, #32
 800a780:	fa23 f401 	lsr.w	r4, r3, r1
 800a784:	4082      	lsls	r2, r0
 800a786:	4322      	orrs	r2, r4
 800a788:	4547      	cmp	r7, r8
 800a78a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a78e:	bf8c      	ite	hi
 800a790:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a794:	2200      	movls	r2, #0
 800a796:	4083      	lsls	r3, r0
 800a798:	40ca      	lsrs	r2, r1
 800a79a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	e7de      	b.n	800a760 <__b2d+0x48>
 800a7a2:	ea42 0501 	orr.w	r5, r2, r1
 800a7a6:	e7db      	b.n	800a760 <__b2d+0x48>
 800a7a8:	3ff00000 	.word	0x3ff00000

0800a7ac <__d2b>:
 800a7ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a7b0:	460f      	mov	r7, r1
 800a7b2:	2101      	movs	r1, #1
 800a7b4:	ec59 8b10 	vmov	r8, r9, d0
 800a7b8:	4616      	mov	r6, r2
 800a7ba:	f7ff fc13 	bl	8009fe4 <_Balloc>
 800a7be:	4604      	mov	r4, r0
 800a7c0:	b930      	cbnz	r0, 800a7d0 <__d2b+0x24>
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	4b23      	ldr	r3, [pc, #140]	@ (800a854 <__d2b+0xa8>)
 800a7c6:	4824      	ldr	r0, [pc, #144]	@ (800a858 <__d2b+0xac>)
 800a7c8:	f240 310f 	movw	r1, #783	@ 0x30f
 800a7cc:	f000 fac4 	bl	800ad58 <__assert_func>
 800a7d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a7d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a7d8:	b10d      	cbz	r5, 800a7de <__d2b+0x32>
 800a7da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a7de:	9301      	str	r3, [sp, #4]
 800a7e0:	f1b8 0300 	subs.w	r3, r8, #0
 800a7e4:	d023      	beq.n	800a82e <__d2b+0x82>
 800a7e6:	4668      	mov	r0, sp
 800a7e8:	9300      	str	r3, [sp, #0]
 800a7ea:	f7ff fd0c 	bl	800a206 <__lo0bits>
 800a7ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a7f2:	b1d0      	cbz	r0, 800a82a <__d2b+0x7e>
 800a7f4:	f1c0 0320 	rsb	r3, r0, #32
 800a7f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a7fc:	430b      	orrs	r3, r1
 800a7fe:	40c2      	lsrs	r2, r0
 800a800:	6163      	str	r3, [r4, #20]
 800a802:	9201      	str	r2, [sp, #4]
 800a804:	9b01      	ldr	r3, [sp, #4]
 800a806:	61a3      	str	r3, [r4, #24]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	bf0c      	ite	eq
 800a80c:	2201      	moveq	r2, #1
 800a80e:	2202      	movne	r2, #2
 800a810:	6122      	str	r2, [r4, #16]
 800a812:	b1a5      	cbz	r5, 800a83e <__d2b+0x92>
 800a814:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a818:	4405      	add	r5, r0
 800a81a:	603d      	str	r5, [r7, #0]
 800a81c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a820:	6030      	str	r0, [r6, #0]
 800a822:	4620      	mov	r0, r4
 800a824:	b003      	add	sp, #12
 800a826:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a82a:	6161      	str	r1, [r4, #20]
 800a82c:	e7ea      	b.n	800a804 <__d2b+0x58>
 800a82e:	a801      	add	r0, sp, #4
 800a830:	f7ff fce9 	bl	800a206 <__lo0bits>
 800a834:	9b01      	ldr	r3, [sp, #4]
 800a836:	6163      	str	r3, [r4, #20]
 800a838:	3020      	adds	r0, #32
 800a83a:	2201      	movs	r2, #1
 800a83c:	e7e8      	b.n	800a810 <__d2b+0x64>
 800a83e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a842:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a846:	6038      	str	r0, [r7, #0]
 800a848:	6918      	ldr	r0, [r3, #16]
 800a84a:	f7ff fcbd 	bl	800a1c8 <__hi0bits>
 800a84e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a852:	e7e5      	b.n	800a820 <__d2b+0x74>
 800a854:	0800b29d 	.word	0x0800b29d
 800a858:	0800b31f 	.word	0x0800b31f

0800a85c <__ratio>:
 800a85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a860:	b085      	sub	sp, #20
 800a862:	e9cd 1000 	strd	r1, r0, [sp]
 800a866:	a902      	add	r1, sp, #8
 800a868:	f7ff ff56 	bl	800a718 <__b2d>
 800a86c:	9800      	ldr	r0, [sp, #0]
 800a86e:	a903      	add	r1, sp, #12
 800a870:	ec55 4b10 	vmov	r4, r5, d0
 800a874:	f7ff ff50 	bl	800a718 <__b2d>
 800a878:	9b01      	ldr	r3, [sp, #4]
 800a87a:	6919      	ldr	r1, [r3, #16]
 800a87c:	9b00      	ldr	r3, [sp, #0]
 800a87e:	691b      	ldr	r3, [r3, #16]
 800a880:	1ac9      	subs	r1, r1, r3
 800a882:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a886:	1a9b      	subs	r3, r3, r2
 800a888:	ec5b ab10 	vmov	sl, fp, d0
 800a88c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a890:	2b00      	cmp	r3, #0
 800a892:	bfce      	itee	gt
 800a894:	462a      	movgt	r2, r5
 800a896:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a89a:	465a      	movle	r2, fp
 800a89c:	462f      	mov	r7, r5
 800a89e:	46d9      	mov	r9, fp
 800a8a0:	bfcc      	ite	gt
 800a8a2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a8a6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a8aa:	464b      	mov	r3, r9
 800a8ac:	4652      	mov	r2, sl
 800a8ae:	4620      	mov	r0, r4
 800a8b0:	4639      	mov	r1, r7
 800a8b2:	f7f5 ffcb 	bl	800084c <__aeabi_ddiv>
 800a8b6:	ec41 0b10 	vmov	d0, r0, r1
 800a8ba:	b005      	add	sp, #20
 800a8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a8c0 <__copybits>:
 800a8c0:	3901      	subs	r1, #1
 800a8c2:	b570      	push	{r4, r5, r6, lr}
 800a8c4:	1149      	asrs	r1, r1, #5
 800a8c6:	6914      	ldr	r4, [r2, #16]
 800a8c8:	3101      	adds	r1, #1
 800a8ca:	f102 0314 	add.w	r3, r2, #20
 800a8ce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a8d2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a8d6:	1f05      	subs	r5, r0, #4
 800a8d8:	42a3      	cmp	r3, r4
 800a8da:	d30c      	bcc.n	800a8f6 <__copybits+0x36>
 800a8dc:	1aa3      	subs	r3, r4, r2
 800a8de:	3b11      	subs	r3, #17
 800a8e0:	f023 0303 	bic.w	r3, r3, #3
 800a8e4:	3211      	adds	r2, #17
 800a8e6:	42a2      	cmp	r2, r4
 800a8e8:	bf88      	it	hi
 800a8ea:	2300      	movhi	r3, #0
 800a8ec:	4418      	add	r0, r3
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	4288      	cmp	r0, r1
 800a8f2:	d305      	bcc.n	800a900 <__copybits+0x40>
 800a8f4:	bd70      	pop	{r4, r5, r6, pc}
 800a8f6:	f853 6b04 	ldr.w	r6, [r3], #4
 800a8fa:	f845 6f04 	str.w	r6, [r5, #4]!
 800a8fe:	e7eb      	b.n	800a8d8 <__copybits+0x18>
 800a900:	f840 3b04 	str.w	r3, [r0], #4
 800a904:	e7f4      	b.n	800a8f0 <__copybits+0x30>

0800a906 <__any_on>:
 800a906:	f100 0214 	add.w	r2, r0, #20
 800a90a:	6900      	ldr	r0, [r0, #16]
 800a90c:	114b      	asrs	r3, r1, #5
 800a90e:	4298      	cmp	r0, r3
 800a910:	b510      	push	{r4, lr}
 800a912:	db11      	blt.n	800a938 <__any_on+0x32>
 800a914:	dd0a      	ble.n	800a92c <__any_on+0x26>
 800a916:	f011 011f 	ands.w	r1, r1, #31
 800a91a:	d007      	beq.n	800a92c <__any_on+0x26>
 800a91c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a920:	fa24 f001 	lsr.w	r0, r4, r1
 800a924:	fa00 f101 	lsl.w	r1, r0, r1
 800a928:	428c      	cmp	r4, r1
 800a92a:	d10b      	bne.n	800a944 <__any_on+0x3e>
 800a92c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a930:	4293      	cmp	r3, r2
 800a932:	d803      	bhi.n	800a93c <__any_on+0x36>
 800a934:	2000      	movs	r0, #0
 800a936:	bd10      	pop	{r4, pc}
 800a938:	4603      	mov	r3, r0
 800a93a:	e7f7      	b.n	800a92c <__any_on+0x26>
 800a93c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a940:	2900      	cmp	r1, #0
 800a942:	d0f5      	beq.n	800a930 <__any_on+0x2a>
 800a944:	2001      	movs	r0, #1
 800a946:	e7f6      	b.n	800a936 <__any_on+0x30>

0800a948 <__sread>:
 800a948:	b510      	push	{r4, lr}
 800a94a:	460c      	mov	r4, r1
 800a94c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a950:	f000 f9ce 	bl	800acf0 <_read_r>
 800a954:	2800      	cmp	r0, #0
 800a956:	bfab      	itete	ge
 800a958:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a95a:	89a3      	ldrhlt	r3, [r4, #12]
 800a95c:	181b      	addge	r3, r3, r0
 800a95e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a962:	bfac      	ite	ge
 800a964:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a966:	81a3      	strhlt	r3, [r4, #12]
 800a968:	bd10      	pop	{r4, pc}

0800a96a <__swrite>:
 800a96a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a96e:	461f      	mov	r7, r3
 800a970:	898b      	ldrh	r3, [r1, #12]
 800a972:	05db      	lsls	r3, r3, #23
 800a974:	4605      	mov	r5, r0
 800a976:	460c      	mov	r4, r1
 800a978:	4616      	mov	r6, r2
 800a97a:	d505      	bpl.n	800a988 <__swrite+0x1e>
 800a97c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a980:	2302      	movs	r3, #2
 800a982:	2200      	movs	r2, #0
 800a984:	f000 f9a2 	bl	800accc <_lseek_r>
 800a988:	89a3      	ldrh	r3, [r4, #12]
 800a98a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a98e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a992:	81a3      	strh	r3, [r4, #12]
 800a994:	4632      	mov	r2, r6
 800a996:	463b      	mov	r3, r7
 800a998:	4628      	mov	r0, r5
 800a99a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a99e:	f000 b9c9 	b.w	800ad34 <_write_r>

0800a9a2 <__sseek>:
 800a9a2:	b510      	push	{r4, lr}
 800a9a4:	460c      	mov	r4, r1
 800a9a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9aa:	f000 f98f 	bl	800accc <_lseek_r>
 800a9ae:	1c43      	adds	r3, r0, #1
 800a9b0:	89a3      	ldrh	r3, [r4, #12]
 800a9b2:	bf15      	itete	ne
 800a9b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a9b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a9ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a9be:	81a3      	strheq	r3, [r4, #12]
 800a9c0:	bf18      	it	ne
 800a9c2:	81a3      	strhne	r3, [r4, #12]
 800a9c4:	bd10      	pop	{r4, pc}

0800a9c6 <__sclose>:
 800a9c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9ca:	f000 b94d 	b.w	800ac68 <_close_r>

0800a9ce <_realloc_r>:
 800a9ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9d2:	4680      	mov	r8, r0
 800a9d4:	4615      	mov	r5, r2
 800a9d6:	460c      	mov	r4, r1
 800a9d8:	b921      	cbnz	r1, 800a9e4 <_realloc_r+0x16>
 800a9da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9de:	4611      	mov	r1, r2
 800a9e0:	f7ff b9b6 	b.w	8009d50 <_malloc_r>
 800a9e4:	b92a      	cbnz	r2, 800a9f2 <_realloc_r+0x24>
 800a9e6:	f000 f9e9 	bl	800adbc <_free_r>
 800a9ea:	2400      	movs	r4, #0
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9f2:	f000 fa2d 	bl	800ae50 <_malloc_usable_size_r>
 800a9f6:	4285      	cmp	r5, r0
 800a9f8:	4606      	mov	r6, r0
 800a9fa:	d802      	bhi.n	800aa02 <_realloc_r+0x34>
 800a9fc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800aa00:	d8f4      	bhi.n	800a9ec <_realloc_r+0x1e>
 800aa02:	4629      	mov	r1, r5
 800aa04:	4640      	mov	r0, r8
 800aa06:	f7ff f9a3 	bl	8009d50 <_malloc_r>
 800aa0a:	4607      	mov	r7, r0
 800aa0c:	2800      	cmp	r0, #0
 800aa0e:	d0ec      	beq.n	800a9ea <_realloc_r+0x1c>
 800aa10:	42b5      	cmp	r5, r6
 800aa12:	462a      	mov	r2, r5
 800aa14:	4621      	mov	r1, r4
 800aa16:	bf28      	it	cs
 800aa18:	4632      	movcs	r2, r6
 800aa1a:	f7fd fd30 	bl	800847e <memcpy>
 800aa1e:	4621      	mov	r1, r4
 800aa20:	4640      	mov	r0, r8
 800aa22:	f000 f9cb 	bl	800adbc <_free_r>
 800aa26:	463c      	mov	r4, r7
 800aa28:	e7e0      	b.n	800a9ec <_realloc_r+0x1e>

0800aa2a <__swbuf_r>:
 800aa2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa2c:	460e      	mov	r6, r1
 800aa2e:	4614      	mov	r4, r2
 800aa30:	4605      	mov	r5, r0
 800aa32:	b118      	cbz	r0, 800aa3c <__swbuf_r+0x12>
 800aa34:	6a03      	ldr	r3, [r0, #32]
 800aa36:	b90b      	cbnz	r3, 800aa3c <__swbuf_r+0x12>
 800aa38:	f7fc fdac 	bl	8007594 <__sinit>
 800aa3c:	69a3      	ldr	r3, [r4, #24]
 800aa3e:	60a3      	str	r3, [r4, #8]
 800aa40:	89a3      	ldrh	r3, [r4, #12]
 800aa42:	071a      	lsls	r2, r3, #28
 800aa44:	d501      	bpl.n	800aa4a <__swbuf_r+0x20>
 800aa46:	6923      	ldr	r3, [r4, #16]
 800aa48:	b943      	cbnz	r3, 800aa5c <__swbuf_r+0x32>
 800aa4a:	4621      	mov	r1, r4
 800aa4c:	4628      	mov	r0, r5
 800aa4e:	f000 f82b 	bl	800aaa8 <__swsetup_r>
 800aa52:	b118      	cbz	r0, 800aa5c <__swbuf_r+0x32>
 800aa54:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800aa58:	4638      	mov	r0, r7
 800aa5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa5c:	6823      	ldr	r3, [r4, #0]
 800aa5e:	6922      	ldr	r2, [r4, #16]
 800aa60:	1a98      	subs	r0, r3, r2
 800aa62:	6963      	ldr	r3, [r4, #20]
 800aa64:	b2f6      	uxtb	r6, r6
 800aa66:	4283      	cmp	r3, r0
 800aa68:	4637      	mov	r7, r6
 800aa6a:	dc05      	bgt.n	800aa78 <__swbuf_r+0x4e>
 800aa6c:	4621      	mov	r1, r4
 800aa6e:	4628      	mov	r0, r5
 800aa70:	f7ff fa84 	bl	8009f7c <_fflush_r>
 800aa74:	2800      	cmp	r0, #0
 800aa76:	d1ed      	bne.n	800aa54 <__swbuf_r+0x2a>
 800aa78:	68a3      	ldr	r3, [r4, #8]
 800aa7a:	3b01      	subs	r3, #1
 800aa7c:	60a3      	str	r3, [r4, #8]
 800aa7e:	6823      	ldr	r3, [r4, #0]
 800aa80:	1c5a      	adds	r2, r3, #1
 800aa82:	6022      	str	r2, [r4, #0]
 800aa84:	701e      	strb	r6, [r3, #0]
 800aa86:	6962      	ldr	r2, [r4, #20]
 800aa88:	1c43      	adds	r3, r0, #1
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d004      	beq.n	800aa98 <__swbuf_r+0x6e>
 800aa8e:	89a3      	ldrh	r3, [r4, #12]
 800aa90:	07db      	lsls	r3, r3, #31
 800aa92:	d5e1      	bpl.n	800aa58 <__swbuf_r+0x2e>
 800aa94:	2e0a      	cmp	r6, #10
 800aa96:	d1df      	bne.n	800aa58 <__swbuf_r+0x2e>
 800aa98:	4621      	mov	r1, r4
 800aa9a:	4628      	mov	r0, r5
 800aa9c:	f7ff fa6e 	bl	8009f7c <_fflush_r>
 800aaa0:	2800      	cmp	r0, #0
 800aaa2:	d0d9      	beq.n	800aa58 <__swbuf_r+0x2e>
 800aaa4:	e7d6      	b.n	800aa54 <__swbuf_r+0x2a>
	...

0800aaa8 <__swsetup_r>:
 800aaa8:	b538      	push	{r3, r4, r5, lr}
 800aaaa:	4b29      	ldr	r3, [pc, #164]	@ (800ab50 <__swsetup_r+0xa8>)
 800aaac:	4605      	mov	r5, r0
 800aaae:	6818      	ldr	r0, [r3, #0]
 800aab0:	460c      	mov	r4, r1
 800aab2:	b118      	cbz	r0, 800aabc <__swsetup_r+0x14>
 800aab4:	6a03      	ldr	r3, [r0, #32]
 800aab6:	b90b      	cbnz	r3, 800aabc <__swsetup_r+0x14>
 800aab8:	f7fc fd6c 	bl	8007594 <__sinit>
 800aabc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aac0:	0719      	lsls	r1, r3, #28
 800aac2:	d422      	bmi.n	800ab0a <__swsetup_r+0x62>
 800aac4:	06da      	lsls	r2, r3, #27
 800aac6:	d407      	bmi.n	800aad8 <__swsetup_r+0x30>
 800aac8:	2209      	movs	r2, #9
 800aaca:	602a      	str	r2, [r5, #0]
 800aacc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aad0:	81a3      	strh	r3, [r4, #12]
 800aad2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aad6:	e033      	b.n	800ab40 <__swsetup_r+0x98>
 800aad8:	0758      	lsls	r0, r3, #29
 800aada:	d512      	bpl.n	800ab02 <__swsetup_r+0x5a>
 800aadc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aade:	b141      	cbz	r1, 800aaf2 <__swsetup_r+0x4a>
 800aae0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aae4:	4299      	cmp	r1, r3
 800aae6:	d002      	beq.n	800aaee <__swsetup_r+0x46>
 800aae8:	4628      	mov	r0, r5
 800aaea:	f000 f967 	bl	800adbc <_free_r>
 800aaee:	2300      	movs	r3, #0
 800aaf0:	6363      	str	r3, [r4, #52]	@ 0x34
 800aaf2:	89a3      	ldrh	r3, [r4, #12]
 800aaf4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aaf8:	81a3      	strh	r3, [r4, #12]
 800aafa:	2300      	movs	r3, #0
 800aafc:	6063      	str	r3, [r4, #4]
 800aafe:	6923      	ldr	r3, [r4, #16]
 800ab00:	6023      	str	r3, [r4, #0]
 800ab02:	89a3      	ldrh	r3, [r4, #12]
 800ab04:	f043 0308 	orr.w	r3, r3, #8
 800ab08:	81a3      	strh	r3, [r4, #12]
 800ab0a:	6923      	ldr	r3, [r4, #16]
 800ab0c:	b94b      	cbnz	r3, 800ab22 <__swsetup_r+0x7a>
 800ab0e:	89a3      	ldrh	r3, [r4, #12]
 800ab10:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ab14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab18:	d003      	beq.n	800ab22 <__swsetup_r+0x7a>
 800ab1a:	4621      	mov	r1, r4
 800ab1c:	4628      	mov	r0, r5
 800ab1e:	f000 f84c 	bl	800abba <__smakebuf_r>
 800ab22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab26:	f013 0201 	ands.w	r2, r3, #1
 800ab2a:	d00a      	beq.n	800ab42 <__swsetup_r+0x9a>
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	60a2      	str	r2, [r4, #8]
 800ab30:	6962      	ldr	r2, [r4, #20]
 800ab32:	4252      	negs	r2, r2
 800ab34:	61a2      	str	r2, [r4, #24]
 800ab36:	6922      	ldr	r2, [r4, #16]
 800ab38:	b942      	cbnz	r2, 800ab4c <__swsetup_r+0xa4>
 800ab3a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ab3e:	d1c5      	bne.n	800aacc <__swsetup_r+0x24>
 800ab40:	bd38      	pop	{r3, r4, r5, pc}
 800ab42:	0799      	lsls	r1, r3, #30
 800ab44:	bf58      	it	pl
 800ab46:	6962      	ldrpl	r2, [r4, #20]
 800ab48:	60a2      	str	r2, [r4, #8]
 800ab4a:	e7f4      	b.n	800ab36 <__swsetup_r+0x8e>
 800ab4c:	2000      	movs	r0, #0
 800ab4e:	e7f7      	b.n	800ab40 <__swsetup_r+0x98>
 800ab50:	20000184 	.word	0x20000184

0800ab54 <__ascii_wctomb>:
 800ab54:	4603      	mov	r3, r0
 800ab56:	4608      	mov	r0, r1
 800ab58:	b141      	cbz	r1, 800ab6c <__ascii_wctomb+0x18>
 800ab5a:	2aff      	cmp	r2, #255	@ 0xff
 800ab5c:	d904      	bls.n	800ab68 <__ascii_wctomb+0x14>
 800ab5e:	228a      	movs	r2, #138	@ 0x8a
 800ab60:	601a      	str	r2, [r3, #0]
 800ab62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab66:	4770      	bx	lr
 800ab68:	700a      	strb	r2, [r1, #0]
 800ab6a:	2001      	movs	r0, #1
 800ab6c:	4770      	bx	lr

0800ab6e <__swhatbuf_r>:
 800ab6e:	b570      	push	{r4, r5, r6, lr}
 800ab70:	460c      	mov	r4, r1
 800ab72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab76:	2900      	cmp	r1, #0
 800ab78:	b096      	sub	sp, #88	@ 0x58
 800ab7a:	4615      	mov	r5, r2
 800ab7c:	461e      	mov	r6, r3
 800ab7e:	da0d      	bge.n	800ab9c <__swhatbuf_r+0x2e>
 800ab80:	89a3      	ldrh	r3, [r4, #12]
 800ab82:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ab86:	f04f 0100 	mov.w	r1, #0
 800ab8a:	bf14      	ite	ne
 800ab8c:	2340      	movne	r3, #64	@ 0x40
 800ab8e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ab92:	2000      	movs	r0, #0
 800ab94:	6031      	str	r1, [r6, #0]
 800ab96:	602b      	str	r3, [r5, #0]
 800ab98:	b016      	add	sp, #88	@ 0x58
 800ab9a:	bd70      	pop	{r4, r5, r6, pc}
 800ab9c:	466a      	mov	r2, sp
 800ab9e:	f000 f873 	bl	800ac88 <_fstat_r>
 800aba2:	2800      	cmp	r0, #0
 800aba4:	dbec      	blt.n	800ab80 <__swhatbuf_r+0x12>
 800aba6:	9901      	ldr	r1, [sp, #4]
 800aba8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800abac:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800abb0:	4259      	negs	r1, r3
 800abb2:	4159      	adcs	r1, r3
 800abb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800abb8:	e7eb      	b.n	800ab92 <__swhatbuf_r+0x24>

0800abba <__smakebuf_r>:
 800abba:	898b      	ldrh	r3, [r1, #12]
 800abbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abbe:	079d      	lsls	r5, r3, #30
 800abc0:	4606      	mov	r6, r0
 800abc2:	460c      	mov	r4, r1
 800abc4:	d507      	bpl.n	800abd6 <__smakebuf_r+0x1c>
 800abc6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800abca:	6023      	str	r3, [r4, #0]
 800abcc:	6123      	str	r3, [r4, #16]
 800abce:	2301      	movs	r3, #1
 800abd0:	6163      	str	r3, [r4, #20]
 800abd2:	b003      	add	sp, #12
 800abd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abd6:	ab01      	add	r3, sp, #4
 800abd8:	466a      	mov	r2, sp
 800abda:	f7ff ffc8 	bl	800ab6e <__swhatbuf_r>
 800abde:	9f00      	ldr	r7, [sp, #0]
 800abe0:	4605      	mov	r5, r0
 800abe2:	4639      	mov	r1, r7
 800abe4:	4630      	mov	r0, r6
 800abe6:	f7ff f8b3 	bl	8009d50 <_malloc_r>
 800abea:	b948      	cbnz	r0, 800ac00 <__smakebuf_r+0x46>
 800abec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abf0:	059a      	lsls	r2, r3, #22
 800abf2:	d4ee      	bmi.n	800abd2 <__smakebuf_r+0x18>
 800abf4:	f023 0303 	bic.w	r3, r3, #3
 800abf8:	f043 0302 	orr.w	r3, r3, #2
 800abfc:	81a3      	strh	r3, [r4, #12]
 800abfe:	e7e2      	b.n	800abc6 <__smakebuf_r+0xc>
 800ac00:	89a3      	ldrh	r3, [r4, #12]
 800ac02:	6020      	str	r0, [r4, #0]
 800ac04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac08:	81a3      	strh	r3, [r4, #12]
 800ac0a:	9b01      	ldr	r3, [sp, #4]
 800ac0c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ac10:	b15b      	cbz	r3, 800ac2a <__smakebuf_r+0x70>
 800ac12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac16:	4630      	mov	r0, r6
 800ac18:	f000 f848 	bl	800acac <_isatty_r>
 800ac1c:	b128      	cbz	r0, 800ac2a <__smakebuf_r+0x70>
 800ac1e:	89a3      	ldrh	r3, [r4, #12]
 800ac20:	f023 0303 	bic.w	r3, r3, #3
 800ac24:	f043 0301 	orr.w	r3, r3, #1
 800ac28:	81a3      	strh	r3, [r4, #12]
 800ac2a:	89a3      	ldrh	r3, [r4, #12]
 800ac2c:	431d      	orrs	r5, r3
 800ac2e:	81a5      	strh	r5, [r4, #12]
 800ac30:	e7cf      	b.n	800abd2 <__smakebuf_r+0x18>

0800ac32 <memmove>:
 800ac32:	4288      	cmp	r0, r1
 800ac34:	b510      	push	{r4, lr}
 800ac36:	eb01 0402 	add.w	r4, r1, r2
 800ac3a:	d902      	bls.n	800ac42 <memmove+0x10>
 800ac3c:	4284      	cmp	r4, r0
 800ac3e:	4623      	mov	r3, r4
 800ac40:	d807      	bhi.n	800ac52 <memmove+0x20>
 800ac42:	1e43      	subs	r3, r0, #1
 800ac44:	42a1      	cmp	r1, r4
 800ac46:	d008      	beq.n	800ac5a <memmove+0x28>
 800ac48:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac4c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac50:	e7f8      	b.n	800ac44 <memmove+0x12>
 800ac52:	4402      	add	r2, r0
 800ac54:	4601      	mov	r1, r0
 800ac56:	428a      	cmp	r2, r1
 800ac58:	d100      	bne.n	800ac5c <memmove+0x2a>
 800ac5a:	bd10      	pop	{r4, pc}
 800ac5c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac60:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac64:	e7f7      	b.n	800ac56 <memmove+0x24>
	...

0800ac68 <_close_r>:
 800ac68:	b538      	push	{r3, r4, r5, lr}
 800ac6a:	4d06      	ldr	r5, [pc, #24]	@ (800ac84 <_close_r+0x1c>)
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	4604      	mov	r4, r0
 800ac70:	4608      	mov	r0, r1
 800ac72:	602b      	str	r3, [r5, #0]
 800ac74:	f7f6 fdf6 	bl	8001864 <_close>
 800ac78:	1c43      	adds	r3, r0, #1
 800ac7a:	d102      	bne.n	800ac82 <_close_r+0x1a>
 800ac7c:	682b      	ldr	r3, [r5, #0]
 800ac7e:	b103      	cbz	r3, 800ac82 <_close_r+0x1a>
 800ac80:	6023      	str	r3, [r4, #0]
 800ac82:	bd38      	pop	{r3, r4, r5, pc}
 800ac84:	20000468 	.word	0x20000468

0800ac88 <_fstat_r>:
 800ac88:	b538      	push	{r3, r4, r5, lr}
 800ac8a:	4d07      	ldr	r5, [pc, #28]	@ (800aca8 <_fstat_r+0x20>)
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	4604      	mov	r4, r0
 800ac90:	4608      	mov	r0, r1
 800ac92:	4611      	mov	r1, r2
 800ac94:	602b      	str	r3, [r5, #0]
 800ac96:	f7f6 fdf1 	bl	800187c <_fstat>
 800ac9a:	1c43      	adds	r3, r0, #1
 800ac9c:	d102      	bne.n	800aca4 <_fstat_r+0x1c>
 800ac9e:	682b      	ldr	r3, [r5, #0]
 800aca0:	b103      	cbz	r3, 800aca4 <_fstat_r+0x1c>
 800aca2:	6023      	str	r3, [r4, #0]
 800aca4:	bd38      	pop	{r3, r4, r5, pc}
 800aca6:	bf00      	nop
 800aca8:	20000468 	.word	0x20000468

0800acac <_isatty_r>:
 800acac:	b538      	push	{r3, r4, r5, lr}
 800acae:	4d06      	ldr	r5, [pc, #24]	@ (800acc8 <_isatty_r+0x1c>)
 800acb0:	2300      	movs	r3, #0
 800acb2:	4604      	mov	r4, r0
 800acb4:	4608      	mov	r0, r1
 800acb6:	602b      	str	r3, [r5, #0]
 800acb8:	f7f6 fdf0 	bl	800189c <_isatty>
 800acbc:	1c43      	adds	r3, r0, #1
 800acbe:	d102      	bne.n	800acc6 <_isatty_r+0x1a>
 800acc0:	682b      	ldr	r3, [r5, #0]
 800acc2:	b103      	cbz	r3, 800acc6 <_isatty_r+0x1a>
 800acc4:	6023      	str	r3, [r4, #0]
 800acc6:	bd38      	pop	{r3, r4, r5, pc}
 800acc8:	20000468 	.word	0x20000468

0800accc <_lseek_r>:
 800accc:	b538      	push	{r3, r4, r5, lr}
 800acce:	4d07      	ldr	r5, [pc, #28]	@ (800acec <_lseek_r+0x20>)
 800acd0:	4604      	mov	r4, r0
 800acd2:	4608      	mov	r0, r1
 800acd4:	4611      	mov	r1, r2
 800acd6:	2200      	movs	r2, #0
 800acd8:	602a      	str	r2, [r5, #0]
 800acda:	461a      	mov	r2, r3
 800acdc:	f7f6 fde9 	bl	80018b2 <_lseek>
 800ace0:	1c43      	adds	r3, r0, #1
 800ace2:	d102      	bne.n	800acea <_lseek_r+0x1e>
 800ace4:	682b      	ldr	r3, [r5, #0]
 800ace6:	b103      	cbz	r3, 800acea <_lseek_r+0x1e>
 800ace8:	6023      	str	r3, [r4, #0]
 800acea:	bd38      	pop	{r3, r4, r5, pc}
 800acec:	20000468 	.word	0x20000468

0800acf0 <_read_r>:
 800acf0:	b538      	push	{r3, r4, r5, lr}
 800acf2:	4d07      	ldr	r5, [pc, #28]	@ (800ad10 <_read_r+0x20>)
 800acf4:	4604      	mov	r4, r0
 800acf6:	4608      	mov	r0, r1
 800acf8:	4611      	mov	r1, r2
 800acfa:	2200      	movs	r2, #0
 800acfc:	602a      	str	r2, [r5, #0]
 800acfe:	461a      	mov	r2, r3
 800ad00:	f7f6 fd77 	bl	80017f2 <_read>
 800ad04:	1c43      	adds	r3, r0, #1
 800ad06:	d102      	bne.n	800ad0e <_read_r+0x1e>
 800ad08:	682b      	ldr	r3, [r5, #0]
 800ad0a:	b103      	cbz	r3, 800ad0e <_read_r+0x1e>
 800ad0c:	6023      	str	r3, [r4, #0]
 800ad0e:	bd38      	pop	{r3, r4, r5, pc}
 800ad10:	20000468 	.word	0x20000468

0800ad14 <_sbrk_r>:
 800ad14:	b538      	push	{r3, r4, r5, lr}
 800ad16:	4d06      	ldr	r5, [pc, #24]	@ (800ad30 <_sbrk_r+0x1c>)
 800ad18:	2300      	movs	r3, #0
 800ad1a:	4604      	mov	r4, r0
 800ad1c:	4608      	mov	r0, r1
 800ad1e:	602b      	str	r3, [r5, #0]
 800ad20:	f7f6 fdd4 	bl	80018cc <_sbrk>
 800ad24:	1c43      	adds	r3, r0, #1
 800ad26:	d102      	bne.n	800ad2e <_sbrk_r+0x1a>
 800ad28:	682b      	ldr	r3, [r5, #0]
 800ad2a:	b103      	cbz	r3, 800ad2e <_sbrk_r+0x1a>
 800ad2c:	6023      	str	r3, [r4, #0]
 800ad2e:	bd38      	pop	{r3, r4, r5, pc}
 800ad30:	20000468 	.word	0x20000468

0800ad34 <_write_r>:
 800ad34:	b538      	push	{r3, r4, r5, lr}
 800ad36:	4d07      	ldr	r5, [pc, #28]	@ (800ad54 <_write_r+0x20>)
 800ad38:	4604      	mov	r4, r0
 800ad3a:	4608      	mov	r0, r1
 800ad3c:	4611      	mov	r1, r2
 800ad3e:	2200      	movs	r2, #0
 800ad40:	602a      	str	r2, [r5, #0]
 800ad42:	461a      	mov	r2, r3
 800ad44:	f7f6 fd72 	bl	800182c <_write>
 800ad48:	1c43      	adds	r3, r0, #1
 800ad4a:	d102      	bne.n	800ad52 <_write_r+0x1e>
 800ad4c:	682b      	ldr	r3, [r5, #0]
 800ad4e:	b103      	cbz	r3, 800ad52 <_write_r+0x1e>
 800ad50:	6023      	str	r3, [r4, #0]
 800ad52:	bd38      	pop	{r3, r4, r5, pc}
 800ad54:	20000468 	.word	0x20000468

0800ad58 <__assert_func>:
 800ad58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad5a:	4614      	mov	r4, r2
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	4b09      	ldr	r3, [pc, #36]	@ (800ad84 <__assert_func+0x2c>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4605      	mov	r5, r0
 800ad64:	68d8      	ldr	r0, [r3, #12]
 800ad66:	b954      	cbnz	r4, 800ad7e <__assert_func+0x26>
 800ad68:	4b07      	ldr	r3, [pc, #28]	@ (800ad88 <__assert_func+0x30>)
 800ad6a:	461c      	mov	r4, r3
 800ad6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad70:	9100      	str	r1, [sp, #0]
 800ad72:	462b      	mov	r3, r5
 800ad74:	4905      	ldr	r1, [pc, #20]	@ (800ad8c <__assert_func+0x34>)
 800ad76:	f000 f873 	bl	800ae60 <fiprintf>
 800ad7a:	f000 f883 	bl	800ae84 <abort>
 800ad7e:	4b04      	ldr	r3, [pc, #16]	@ (800ad90 <__assert_func+0x38>)
 800ad80:	e7f4      	b.n	800ad6c <__assert_func+0x14>
 800ad82:	bf00      	nop
 800ad84:	20000184 	.word	0x20000184
 800ad88:	0800b4b3 	.word	0x0800b4b3
 800ad8c:	0800b485 	.word	0x0800b485
 800ad90:	0800b478 	.word	0x0800b478

0800ad94 <_calloc_r>:
 800ad94:	b570      	push	{r4, r5, r6, lr}
 800ad96:	fba1 5402 	umull	r5, r4, r1, r2
 800ad9a:	b93c      	cbnz	r4, 800adac <_calloc_r+0x18>
 800ad9c:	4629      	mov	r1, r5
 800ad9e:	f7fe ffd7 	bl	8009d50 <_malloc_r>
 800ada2:	4606      	mov	r6, r0
 800ada4:	b928      	cbnz	r0, 800adb2 <_calloc_r+0x1e>
 800ada6:	2600      	movs	r6, #0
 800ada8:	4630      	mov	r0, r6
 800adaa:	bd70      	pop	{r4, r5, r6, pc}
 800adac:	220c      	movs	r2, #12
 800adae:	6002      	str	r2, [r0, #0]
 800adb0:	e7f9      	b.n	800ada6 <_calloc_r+0x12>
 800adb2:	462a      	mov	r2, r5
 800adb4:	4621      	mov	r1, r4
 800adb6:	f7fd fb29 	bl	800840c <memset>
 800adba:	e7f5      	b.n	800ada8 <_calloc_r+0x14>

0800adbc <_free_r>:
 800adbc:	b538      	push	{r3, r4, r5, lr}
 800adbe:	4605      	mov	r5, r0
 800adc0:	2900      	cmp	r1, #0
 800adc2:	d041      	beq.n	800ae48 <_free_r+0x8c>
 800adc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adc8:	1f0c      	subs	r4, r1, #4
 800adca:	2b00      	cmp	r3, #0
 800adcc:	bfb8      	it	lt
 800adce:	18e4      	addlt	r4, r4, r3
 800add0:	f7ff f8fc 	bl	8009fcc <__malloc_lock>
 800add4:	4a1d      	ldr	r2, [pc, #116]	@ (800ae4c <_free_r+0x90>)
 800add6:	6813      	ldr	r3, [r2, #0]
 800add8:	b933      	cbnz	r3, 800ade8 <_free_r+0x2c>
 800adda:	6063      	str	r3, [r4, #4]
 800addc:	6014      	str	r4, [r2, #0]
 800adde:	4628      	mov	r0, r5
 800ade0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ade4:	f7ff b8f8 	b.w	8009fd8 <__malloc_unlock>
 800ade8:	42a3      	cmp	r3, r4
 800adea:	d908      	bls.n	800adfe <_free_r+0x42>
 800adec:	6820      	ldr	r0, [r4, #0]
 800adee:	1821      	adds	r1, r4, r0
 800adf0:	428b      	cmp	r3, r1
 800adf2:	bf01      	itttt	eq
 800adf4:	6819      	ldreq	r1, [r3, #0]
 800adf6:	685b      	ldreq	r3, [r3, #4]
 800adf8:	1809      	addeq	r1, r1, r0
 800adfa:	6021      	streq	r1, [r4, #0]
 800adfc:	e7ed      	b.n	800adda <_free_r+0x1e>
 800adfe:	461a      	mov	r2, r3
 800ae00:	685b      	ldr	r3, [r3, #4]
 800ae02:	b10b      	cbz	r3, 800ae08 <_free_r+0x4c>
 800ae04:	42a3      	cmp	r3, r4
 800ae06:	d9fa      	bls.n	800adfe <_free_r+0x42>
 800ae08:	6811      	ldr	r1, [r2, #0]
 800ae0a:	1850      	adds	r0, r2, r1
 800ae0c:	42a0      	cmp	r0, r4
 800ae0e:	d10b      	bne.n	800ae28 <_free_r+0x6c>
 800ae10:	6820      	ldr	r0, [r4, #0]
 800ae12:	4401      	add	r1, r0
 800ae14:	1850      	adds	r0, r2, r1
 800ae16:	4283      	cmp	r3, r0
 800ae18:	6011      	str	r1, [r2, #0]
 800ae1a:	d1e0      	bne.n	800adde <_free_r+0x22>
 800ae1c:	6818      	ldr	r0, [r3, #0]
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	6053      	str	r3, [r2, #4]
 800ae22:	4408      	add	r0, r1
 800ae24:	6010      	str	r0, [r2, #0]
 800ae26:	e7da      	b.n	800adde <_free_r+0x22>
 800ae28:	d902      	bls.n	800ae30 <_free_r+0x74>
 800ae2a:	230c      	movs	r3, #12
 800ae2c:	602b      	str	r3, [r5, #0]
 800ae2e:	e7d6      	b.n	800adde <_free_r+0x22>
 800ae30:	6820      	ldr	r0, [r4, #0]
 800ae32:	1821      	adds	r1, r4, r0
 800ae34:	428b      	cmp	r3, r1
 800ae36:	bf04      	itt	eq
 800ae38:	6819      	ldreq	r1, [r3, #0]
 800ae3a:	685b      	ldreq	r3, [r3, #4]
 800ae3c:	6063      	str	r3, [r4, #4]
 800ae3e:	bf04      	itt	eq
 800ae40:	1809      	addeq	r1, r1, r0
 800ae42:	6021      	streq	r1, [r4, #0]
 800ae44:	6054      	str	r4, [r2, #4]
 800ae46:	e7ca      	b.n	800adde <_free_r+0x22>
 800ae48:	bd38      	pop	{r3, r4, r5, pc}
 800ae4a:	bf00      	nop
 800ae4c:	20000464 	.word	0x20000464

0800ae50 <_malloc_usable_size_r>:
 800ae50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae54:	1f18      	subs	r0, r3, #4
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	bfbc      	itt	lt
 800ae5a:	580b      	ldrlt	r3, [r1, r0]
 800ae5c:	18c0      	addlt	r0, r0, r3
 800ae5e:	4770      	bx	lr

0800ae60 <fiprintf>:
 800ae60:	b40e      	push	{r1, r2, r3}
 800ae62:	b503      	push	{r0, r1, lr}
 800ae64:	4601      	mov	r1, r0
 800ae66:	ab03      	add	r3, sp, #12
 800ae68:	4805      	ldr	r0, [pc, #20]	@ (800ae80 <fiprintf+0x20>)
 800ae6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae6e:	6800      	ldr	r0, [r0, #0]
 800ae70:	9301      	str	r3, [sp, #4]
 800ae72:	f7fe fe2b 	bl	8009acc <_vfiprintf_r>
 800ae76:	b002      	add	sp, #8
 800ae78:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae7c:	b003      	add	sp, #12
 800ae7e:	4770      	bx	lr
 800ae80:	20000184 	.word	0x20000184

0800ae84 <abort>:
 800ae84:	b508      	push	{r3, lr}
 800ae86:	2006      	movs	r0, #6
 800ae88:	f000 f82c 	bl	800aee4 <raise>
 800ae8c:	2001      	movs	r0, #1
 800ae8e:	f7f6 fca5 	bl	80017dc <_exit>

0800ae92 <_raise_r>:
 800ae92:	291f      	cmp	r1, #31
 800ae94:	b538      	push	{r3, r4, r5, lr}
 800ae96:	4605      	mov	r5, r0
 800ae98:	460c      	mov	r4, r1
 800ae9a:	d904      	bls.n	800aea6 <_raise_r+0x14>
 800ae9c:	2316      	movs	r3, #22
 800ae9e:	6003      	str	r3, [r0, #0]
 800aea0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aea4:	bd38      	pop	{r3, r4, r5, pc}
 800aea6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aea8:	b112      	cbz	r2, 800aeb0 <_raise_r+0x1e>
 800aeaa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aeae:	b94b      	cbnz	r3, 800aec4 <_raise_r+0x32>
 800aeb0:	4628      	mov	r0, r5
 800aeb2:	f000 f831 	bl	800af18 <_getpid_r>
 800aeb6:	4622      	mov	r2, r4
 800aeb8:	4601      	mov	r1, r0
 800aeba:	4628      	mov	r0, r5
 800aebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aec0:	f000 b818 	b.w	800aef4 <_kill_r>
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d00a      	beq.n	800aede <_raise_r+0x4c>
 800aec8:	1c59      	adds	r1, r3, #1
 800aeca:	d103      	bne.n	800aed4 <_raise_r+0x42>
 800aecc:	2316      	movs	r3, #22
 800aece:	6003      	str	r3, [r0, #0]
 800aed0:	2001      	movs	r0, #1
 800aed2:	e7e7      	b.n	800aea4 <_raise_r+0x12>
 800aed4:	2100      	movs	r1, #0
 800aed6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800aeda:	4620      	mov	r0, r4
 800aedc:	4798      	blx	r3
 800aede:	2000      	movs	r0, #0
 800aee0:	e7e0      	b.n	800aea4 <_raise_r+0x12>
	...

0800aee4 <raise>:
 800aee4:	4b02      	ldr	r3, [pc, #8]	@ (800aef0 <raise+0xc>)
 800aee6:	4601      	mov	r1, r0
 800aee8:	6818      	ldr	r0, [r3, #0]
 800aeea:	f7ff bfd2 	b.w	800ae92 <_raise_r>
 800aeee:	bf00      	nop
 800aef0:	20000184 	.word	0x20000184

0800aef4 <_kill_r>:
 800aef4:	b538      	push	{r3, r4, r5, lr}
 800aef6:	4d07      	ldr	r5, [pc, #28]	@ (800af14 <_kill_r+0x20>)
 800aef8:	2300      	movs	r3, #0
 800aefa:	4604      	mov	r4, r0
 800aefc:	4608      	mov	r0, r1
 800aefe:	4611      	mov	r1, r2
 800af00:	602b      	str	r3, [r5, #0]
 800af02:	f7f6 fc5b 	bl	80017bc <_kill>
 800af06:	1c43      	adds	r3, r0, #1
 800af08:	d102      	bne.n	800af10 <_kill_r+0x1c>
 800af0a:	682b      	ldr	r3, [r5, #0]
 800af0c:	b103      	cbz	r3, 800af10 <_kill_r+0x1c>
 800af0e:	6023      	str	r3, [r4, #0]
 800af10:	bd38      	pop	{r3, r4, r5, pc}
 800af12:	bf00      	nop
 800af14:	20000468 	.word	0x20000468

0800af18 <_getpid_r>:
 800af18:	f7f6 bc48 	b.w	80017ac <_getpid>

0800af1c <_init>:
 800af1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af1e:	bf00      	nop
 800af20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af22:	bc08      	pop	{r3}
 800af24:	469e      	mov	lr, r3
 800af26:	4770      	bx	lr

0800af28 <_fini>:
 800af28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af2a:	bf00      	nop
 800af2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af2e:	bc08      	pop	{r3}
 800af30:	469e      	mov	lr, r3
 800af32:	4770      	bx	lr
